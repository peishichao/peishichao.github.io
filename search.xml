<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[阅读量全都变为0了，真是大写的尴尬]]></title>
      <url>http://www.steven7.top/2017/01/18/2017-7.html</url>
      <content type="html"><![CDATA[<p><img src="http://p1.bpimg.com/1949/e33a6a130a05c430t.jpg" alt="Markdown"></p>
<a id="more"></a>
<p>本来我的阅读量就没有多少，最多的好像就只有250左右（这个数字好像有点尴尬）。<img src="http://i1.piimg.com/1949/79a243269381b851.gif" alt="Markdown"></p>
<p>自从上篇博客改了永久链接的地址之后发现我的所有博客的访问量都变成了0。我心里那个寒啊、我心里那个苦啊。宝宝真的心好累啊。<img src="http://i1.piimg.com/1949/ab6422b2bf413535.png" alt="Markdown"></p>
<p>谨以此贴表达对我以前的访问量的崇高的敬意。感谢之前的访问者现在可以在访问一遍哟。<img src="http://i1.piimg.com/1949/46e2b001036ab273.png" alt="Markdown"></p>
<p>宝宝心里苦啊，但是宝宝还是要说出来。(づ｡◕‿‿◕｡)づ</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="http://i1.piimg.com/567571/473944d51f13444e.png" alt=""></p>
<p><a href="http://www.steven7.top/">Steven`s Notes</a> by <a href="http://www.steven7.top/about.html">Steven</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.  </p>
<p>由<a href="http://www.steven7.top/about.html">裴士超</a>创作并维护的<a href="http://www.steven7.top">斯蒂芬</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me" target="_blank" rel="external">Steven`s Notes</a>博客（ <a href="http://www.steven7.top">http://www.steven7.top</a> ），版权所有，侵权必究。</p>
<hr>
<p>本文永久链接：<a href="http://www.steven7.top/2017/01/18/2017-7.html">http://www.steven7.top/2017/01/18/2017-7.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[基于HexoNexT的SEO优化（3）]]></title>
      <url>http://www.steven7.top/2017/01/18/2017-6.html</url>
      <content type="html"><![CDATA[<p><img src="http://i1.piimg.com/1949/404cfb114e94fe65t.jpg" alt="Markdown"></p>
<a id="more"></a>
<h3 id="修改permalink"><a href="#修改permalink" class="headerlink" title="修改permalink"></a>修改permalink</h3><p>hexo默认的permalink配置是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">permalink: :year/:month/:day/:title/</div></pre></td></tr></table></figure>
<p>这样生成的访问链接都是类似后缀带有犯些康的，这样可能对于搜索引擎不是太友好，我们可以把permalink修改成.html结尾的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">permalink: :year/:month/:day/:title.html</div></pre></td></tr></table></figure>
<p>还有一点需要注意的是，上述的title最好是英文的，因为永久链接最好不带中文。</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="http://i1.piimg.com/567571/473944d51f13444e.png" alt=""></p>
<p><a href="http://www.steven7.top/">Steven`s Notes</a> by <a href="http://www.steven7.top/about.html">Steven</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.  </p>
<p>由<a href="http://www.steven7.top/about.html">裴士超</a>创作并维护的<a href="http://www.steven7.top">斯蒂芬</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me" target="_blank" rel="external">Steven`s Notes</a>博客（ <a href="http://www.steven7.top">http://www.steven7.top</a> ），版权所有，侵权必究。</p>
<hr>
<p>本文永久链接：<a href="http://www.steven7.top/2017/01/18/2017-6.html">http://www.steven7.top/2017/01/18/2017-6.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[解决github pages屏蔽百度爬虫的问题]]></title>
      <url>http://www.steven7.top/2017/01/18/2017-5-1.html</url>
      <content type="html"><![CDATA[<p><img src="http://p1.bqimg.com/1949/82bd234fbaaa83e4.png" alt="Markdown"></p>
<a id="more"></a>
<p>GitHub pages屏蔽了百度爬虫(屏蔽了百度爬虫的UAMozilla/5.0 (compatible; Baiduspider/2.0; +<a href="http://www.baidu.com/search/spider.html))。这样你的博客如果是部署在github上面的话是很难被百度收录的，从百度站长工具抓取诊断中就可以发现爬取都是403" target="_blank" rel="external">http://www.baidu.com/search/spider.html))。这样你的博客如果是部署在github上面的话是很难被百度收录的，从百度站长工具抓取诊断中就可以发现爬取都是403</a> forbidden。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">HTTP/1.0 403 Forbidden</div><div class="line">Cache-Control: no-cache</div><div class="line">Connection: close</div><div class="line">Content-Type: text/html</div></pre></td></tr></table></figure>
<p>目前主要有两种解决方案：CDN回源和为百度spider指定特殊线路。</p>
<h3 id="CDN回源"><a href="#CDN回源" class="headerlink" title="CDN回源"></a>CDN回源</h3><p>博客一般都是静态文件，很适合使用CDN回源，这样不仅能提高访问速度还能跳过github对百度爬虫的屏蔽。<br>回源的意思是用户请求hexo之后CDN会抓取博客内容，这样其他用户就不用访问github pages了而是直接从CDN就近的节点拉取数据，访问速度更快。但是这里有个问题，比如百度爬虫所在的区域CDN节点还没有缓存博客数据，这样百度爬虫会穿透CDN直接请求到github pages，然后后果就是github pages返回403 forbidden。所以CDN回源的方式仅适用于博客访客量比较大的情况（这样访问会在百度爬虫之前让CDN缓存博客数据，当然也只是比较大的概率）。</p>
<p>不过如果无视百度爬虫，给hexo加上CDN回源也是很不错的，至少能提高访问速度。我使用的是百度云加速。百度云加速提供免费的CDN加速功能，还可以更快的被百度蜘蛛抓到，何乐而不为呐。部分操作可以参考我的这篇博客的相关提示。<a href="http://www.steven7.top/2016/08/15/Hexo-Seo-2/">本博客的SEO优化（2）-让谷歌和百度尽快收录你</a></p>
<h3 id="为百度spider指定特殊线路"><a href="#为百度spider指定特殊线路" class="headerlink" title="为百度spider指定特殊线路"></a>为百度spider指定特殊线路</h3><p>除了github pages能托管hexo之外，还有其他的选择，比如gitcafe pages(已经和coding.net合并)。传送门：<a href="https://coding.net/help/doc/pages/index.html" target="_blank" rel="external">gitcafe pages配置</a>，配置还是挺简单的。而且gitcafe没有屏蔽百度爬虫。但是gitcafe pages的服务器目前还不够github给力（偶尔出现一些无法打开的情况），所以有了新的思路：</p>
<p>正常用户访问github pages，百度爬虫访问gitcafe</p>
<p>现在的DNS解析服务一般都可以指定特定的线路，比如指定百度爬虫的线路解析到gitcafe。</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="http://i1.piimg.com/567571/473944d51f13444e.png" alt=""></p>
<p><a href="http://www.steven7.top/">Steven`s Notes</a> by <a href="http://www.steven7.top/about.html">Steven</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.  </p>
<p>由<a href="http://www.steven7.top/about.html">裴士超</a>创作并维护的<a href="http://www.steven7.top">斯蒂芬</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me" target="_blank" rel="external">Steven`s Notes</a>博客（ <a href="http://www.steven7.top">http://www.steven7.top</a> ），版权所有，侵权必究。</p>
<hr>
<p>本文永久链接：<a href="http://www.steven7.top/2017/01/18/2017-5-1.html">http://www.steven7.top/2017/01/18/2017-5-1.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于比特币的更多解释：比特币协议的工作原理（解析双重花费）]]></title>
      <url>http://www.steven7.top/2017/01/17/2017-5.html</url>
      <content type="html"><![CDATA[<p><img src="http://i1.piimg.com/1949/25809df938ec065d.jpg" alt="Markdown"></p>
<p><strong>If you don’t believe me or don’t get it, I don’t have time to try to convince you, sorry.</strong></p>
<p>中本聪：比特币创始人</p>
<a id="more"></a>
<p>本文转载于：<a href="http://blog.shuoyangdesign.com/?p=902" target="_blank" rel="external">用户体验随想-比特币协议是怎样工作的</a></p>
<p>比特币的基础是密码学，这点可能会让你吃惊，不是说比特币是一种货币吗？难道它是一个发送秘密信息的方式吗？实际上，比特币想要解决的问题绝大部分是关于保护交易的——保证人们不能偷别人的东西或冒充别人等等。在原子组成的物质世界里，我们通过锁，签名，银行保险箱等等来保证安全。在信息世界里我们通过密码学来保证安全性。这就是为什么比特币的核心是密码学的协议。</p>
<p>我们会从一个非常简单的数字货币开始，我们暂时叫他“Infocoin”，用来区分于Bitcoin。当然我们第一版本的Infocoin会有很多的缺点，所以我们会经过几次迭代，每次迭代会新介绍一到两个新的概念。经过若干次之后，我们就会得到一个完整的比特币协议了。我们会一起重新发明比特币。</p>
<p>这种办法比一开始就直接解释比特币要慢一些。但是即使你可以一下了解比特币的原理，你也很难理解为什么比特币要设计成这个样子。而慢慢的一步一步迭代式的解释，其优点就在于它可以让你对比特币的每个元素有更清晰的理解。</p>
<h3 id="第一步：签了名的意向书"><a href="#第一步：签了名的意向书" class="headerlink" title="第一步：签了名的意向书"></a>第一步：签了名的意向书</h3><p>怎么设计一个货币呢？</p>
<p>从表面判断，一个数字货币听起来不可能。假设一个人——我们叫她Alice——有一些想要花掉的数字货币。如果Alice可以用一串字符作为钱的话，我们怎么能阻止她用同样的那串字符反复的使用呢？如果我们能解决这个问题，我们有怎样能防止其他人伪造一串字符，从Alice那边偷走呢？</p>
<p>这只是用信息做货币要解决的众多问题中的两个。在第一版的Infocoin中，我们想办法让Alice供一个字符串来作为钱，并且想个办法保护它不被伪造。假设Alice要把一个infocoin给另一个人Bob。Alice需要写下一个消息：“我Alice要给Bob一个infocoin”。 她然后用数字签名的办法将这个信息和一个私钥（这个私钥是随机生成的一个64位数）一起签下名产生一个结果。并且将这个签了名的结果字符公布给整个世界。</p>
<p>这个办法并不怎么出众，但还是有一些优点的。世界上任何人都可以用Alice的公钥去验证Alice确实是那个签了名的人。其他任何人都不可能产生那个签名的结果（这个签名只可能从Alice拥有的私钥产生，原理请看上文提到的<a href="http://baike.baidu.com/view/7626.htm?fr=wordsearch" target="_blank" rel="external">数字签名</a>），所以Alice不能反悔说“不，我没有给Bob那个infocoin”。这样，这个协议提供了Alice确实有意向给Bob一个infocoin的证明。同样，其他任何人都不能产生那样一个签了名的信息，这样防止了其他人伪造Alice的信息。当然，当Alice已经发布了她的消息之后，其他人是有可能复制这个消息的，但是发布之前不可能伪造。所以，证明意向和防止消息发布之前被伪造这两个功能是这个协议里真正值得注意的特性。</p>
<p>我还没有说这个协议里的钱到底是什么呢。明确的说：钱其实就是这个消息本身。也就是说那一串代签了名的代表着“我Alice要给Bob一个infocoin”的字符。后面协议将会在这一点上类似，也就是所有的数字货币只是越来越详细的消息字符。</p>
<h3 id="用序列号来给货币一个唯一的标识"><a href="#用序列号来给货币一个唯一的标识" class="headerlink" title="用序列号来给货币一个唯一的标识"></a>用序列号来给货币一个唯一的标识</h3><p>我们第一版的Infocoin的问题是Alice可以重复地给Bob发送同一个签了名的消息。假设Bob收到了10份这样的消息“我，Alice，要给Bob一个infocoin”。这是说Alice给Bob了10个不同的infocoin呢？还是Alice给Bob一个infocoin，只是不小心消息重复了？或者是她想要欺骗Bob让给他相信她给了他10个infocoin，而实际上给外面世界发出的消息只证明了她只给了一个infocoin。</p>
<p>我们想要的是让infocoin有个唯一的标识。它需要一个标签或者序列号。Alice可以在消息“我Alice要给Bob一个序列号为8740348的infocoin”上签名。之后Alice如果在另一个消息里签名 “我Alice要给Bob一个序列号为8770431的 infocoin”，这样，Bob和其他人就会知道这里两个是不同的infocoin。</p>
<p>为了让这个方案可行，我们就必须要一个可信的序列号来源。一种产生序列号的办法是建立一个机构比如银行。这个银行将会为infocoin产生序列号，记录谁拥有着哪个infocoin，并且验证交易的真实性。</p>
<p>更详细的说，我们假设Alice去一个银行，说“我要从我的账户里取一个infocoin”。这个银行从她的账户里减掉一个infocoin，然后给她一个新的从没用过的序列号，假设是“1234567”。然后，当Alice想要给Bob发一个infocoin的时候，她给这个新的消息签名“我Alice要给Bob一个序列号为1234567的infocoin”。但是Bob不只接受这个infocoin，而且他去联系银行，确认两件事，第一，序列号为1234567的infocoin确实是属于Alice的。第二，Alice还没有花掉那个infocoin。然后银行更新它的记录来显示那个infocoin现在是属于Bob而不是Alice。</p>
<h3 id="让每个人都成为银行"><a href="#让每个人都成为银行" class="headerlink" title="让每个人都成为银行"></a>让每个人都成为银行</h3><p>上面的这个解决方法看起来很有潜力。但是，我们可以做到更有野心的事。我们可以从这个协议里剔除掉银行。这样大幅的改变了这个货币的本身属性。这意味着将不会有一个单独的组织负责这个货币。当你想中央银行拥有着多么大权利的时候（控制货币发行）——这意味着巨大的改变。</p>
<p>方法是让每个人共同合作成为银行。尤其是，我们假设每个用infocoin的人保存一份完整的记录，这个记录包括哪个infocoin属于哪个人。你可以把它想象成一个共享的公开的账本，这个账本记录着所有的infocoin的交易记录。我们就将它叫做“区块链 blockchain”，因为比特币里面就是这么叫的。</p>
<p>现在，我们假设Alice要将一个infocoin给Bob。她在消息“我Alice要给Bob一个序列号为1234567的infocoin”上签名。并且将签了名的消息输出结果给Bob，Bob可以用他自己的那份block chain去检验，“OK，确实那个infocoin是Alice给我的”。如果他检查没问题，他就将Alice的消息和自己接受这个infocoin的消息公布给全网络。然后所有的人更新他们的blockchain。</p>
<p>我们仍然存在“序列号从哪里来”的问题，但是这件事其实很容易解决，所以我推后再解释。更加难的问题是这个协议允许Alice重复的花费她的infocoin。她可以发布一个签了名的消息“我Alice要给Bob一个序列号为1234567的infocoin” ，同时她也可以发布一个签名的消息说“我Alice要给Charlie一个序列号为1234567的infocoin”。Bob和Charlie两个人都用他们自己的blockchain去检验那个infocoin确实是Alice发过来的。假设他们在同一时间进行的检验（在他们两个互相知道另一个的消息之前），他们两个都会发现，是的，我的blockchain证明那个币是属于Alice。所以他们都接受了那个交易，并且公布他们的接受信息给整个网络。现在就有问题了。网络上其他的人应该怎样更新他们的blockchain呢？这样看来貌似不能简单的达到统一交易账本。而且即使每个人都同意用一样的办法更新他们的blockchain，Bob和Charlie两个人之间有一个是肯定被骗了。</p>
<p>我们把这个问题叫做“双重花费 double spending”（后文称“双花”）, 一眼看来，这样的双花似乎很难成功。毕竟，如果Alice先将消息发给Bob，然后Bob将消息发送给其他所有人(包括Charlie)，其他人更新了他们的blockchain。这时候，Charlie就不会被Alice骗了。所以似乎双重花费只有在短暂的一段时间内可能。然而，即使这个时间很短，有这个问题也是不可取的。更糟的是，Alice可以用一些技巧让这一段时间按延长。比如说她可以用网络分析软件找到Bob和Charlie之间的交流的延迟时间很长的时候。或者可以做一些事情故意打扰他们之间的网络连接。如果她可以减慢这个交流一点点，就可以使得她的双花成功变得容易许多。</p>
<p>那怎么解决这个问题呢？最简单的办法是当Alice给Bob发送infocoin的时候，Bob不应该独自的检验这个交易。而他应该将这个可待定的交易公布到整个infocoin网络里，让其他人帮忙判断这个交易是否合理。如果他们共同决定这个交易是合理的，那么Bob可以去接受这个infocoin，然后所有人更新他们的blockchain。这种类协议可以防止双花，因为如果Alice想要同时给Bob和Charlie发送同样的infocoin时，网络上的其他人会注意到，并且告诉Bob和Charlie这个交易有问题，然后这个交易就不允许通过。</p>
<p>更具体的来说，假设Alice想要给Bob一个infocoin。和之前一样，她给一个消息签名，“我Alice要给Bob一个序列号为1234567的infocoin”，并将签好名的消息给Bob。也和之前一样，Bob用他自己的blockchain做一个检查，这个币确实属于Alice。但是协议不一样了，Bob并不直接接受这个，而是公布Alice的消息给整个网络。网络上的其他成员检查Alice是否拥有这个infocoin，如果是，那么他们公布消息说“没错，Alice确实有infocoin 1234567， 现在可以将其转给Bob了”。一旦有足够的人公布这个消息，每个人更新他的blockchain来显示infocoin 1234567现在属于Bob，交易完成。</p>
<p>这个协议现在还有很多不确定的因素。比如，“一旦有足够的人公布这个消息”到底是什么意思，多少个人算是足够？不可能是整个infocoin网络，因为我们事先不知道谁在infocoin网络上。同样，也不能是固定的一部分用户。我们现在先不着急将这些问题弄清楚。在这里，我将要指出一个这交易个方案的严重的问题，解决那个问题将会同时帮助上面的问题弄清楚。</p>
<h3 id="工作证明-Proof-of-work"><a href="#工作证明-Proof-of-work" class="headerlink" title="工作证明 Proof-of-work"></a>工作证明 Proof-of-work</h3><p>假设Alice想要在上述的协议中双花，他需要掌管整个的infocoin网络。假设她用一个自动的系统在infocoin网络上建立很多个不同身份的账户，假设有10亿个。和之前一样，她试图进行双花，将同样的infocoin给Bob和Charlie，但是当Bob和Charlie询问infocoin网络的来检验这个交易时，Alice的马甲们淹没整个网络，告诉Bob和Charlie他们可以通过这个交易，并且可能欺骗他们其中一个或者两个人都接受这个交易。</p>
<p>有一个聪明的办法，用一个叫做“工作证明Proof-of-work”的方法。方法并不直观，需要结合两个概念，1）人工的让检验交易的过程花费较大的计算开销；2）奖赏他们帮忙检验这个交易。用奖赏的办法激励在该网络上的人去验证交易。加大交易验证开销的优点是验证不会再被那些拥有很多账户的人控制，而是只会被他能提供的总共计算能力控制。我们将会看到，通过一些聪明的设计，我们可以让欺骗者必须花费非常大的计算资源来达到欺骗的目的，让它变的不切实际。</p>
<p>这就是工作证明的要点。但是要真正弄明白工作证明，我们需要深入更加具体的细节。</p>
<p>假设Alice给整个网络公布消息“我Alice要给Bob一个序列号为1234567的infocoin”。当网络上的其他人听到这个消息后，每个人将其加入到一列待定的交易之中，这些交易都还没有被整个网络通过。比如说网络上一个叫做David的人可能有下面这一列待定的交易：</p>
<blockquote>
<p>我Tom要给Sue一个序列号为1201174的infocoin。</p>
<p>我Sydney要给Cynthia一个序列号为1295618的infocoin。</p>
<p>我Alice要给Bob一个序列号为1234567的infocoin。</p>
</blockquote>
<p>David检查他自己的blockchain，看到上述这些交易是合理的。他要帮助将这个验证消息公布到整个网络中去。但是，在这之前，检验交易协议需要David去解决一个计算难题——也就是工作证明。若他没有得到难题的解，网络上的其他成员不会接受他的验证。</p>
<p>那么David到底要解决一个什么的难题呢？要解释这个，我们用一个网络上面每个人都知道的固定的哈希函数hash function——将其包括在协议本身。比特币用一个众所周知的<a href="http://baike.baidu.com/view/531723.htm" target="_blank" rel="external">SHA-256哈希函数</a>，但是任何密码学的哈希函数在这里都可以用。我们给David的这一组待定的交易一个标记，”L”吧，为了之后可以引用。这一组待定的交易也就相当于blockchain里面的block（区块）（-理解这个Block很重要，block也就是一组交易信息组成的集合，一个block包括很多个交易）。假设David在这个区块”L”后添加一个数字x(叫做nonce，暂时的随机数)然后hash他们的结合。比方说，我们用L=“Hello, world!” 作为一些交易的标记。然后加上一个暂时的随机数，我们从“x=0”开始吧。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; h(&quot;hello&quot;, world! 0) =</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; 1312af178c253f84028d480a6adc1e25e81caa44c749ec81976192e2ec934c64</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>David将要解决的问题（工作证明）是找到一个随机数x，当我们将这个x添加到L后面并且hash这个组合的时候，得到的结果开始为几个<a href="https://en.bitcoin.it/wiki/Proof_of_work" target="_blank" rel="external">0开头</a>。这个难题的难度可以通过调整开头零的个数来调节。一个简单的”工作证明”只需要3或4个零开头的hash，一个难的“工作证明”则可能需要更多的零开头，比如说15个连续的零。在上述情况下，x=0的到的hash结果不成功，因为结果不是由0开始的。那么我们就尝试x=1，</p>
<p>可以看到x=1的时候也不成立</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; h(&quot;Hello, world!1&quot;) = </div><div class="line">&gt;   e9afc424b79e4f6ab42d99c81156d3a17228d6e1eef4139be78e948a9332a7d8</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>然后尝试x=2, 然后x=3 ，4，5…. 知道最后，发现x=4350的时候，我们得到了</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; h(&quot;Hello, world!4250&quot;) = </div><div class="line">&gt;   0000c3af42fc31103f1fdc0151fa747ff87349a4714df7cc52ea464e12dcd4e9</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>这个随机数x给了我们一个结果是四个零开头的hash。这个就足够解决一个简单的“工作证明”的难题了。</p>
<p>让这个难题不容易解决的是其密码哈希函数结果永远是随机的，对输入值做任何细小的改变将会完全该别整个哈希函数的输出结果，以至于很难去预测。所以如果我们需要输出结果必须是开始于10个0，那么David将平均需要 1610 ≈ 1012 个不同的x才能找到那个合适的值。这是一个非常有挑战性的任务，需要很多的计算能力。</p>
<p>显然，我们可以通过规定需要零的多少来控制工作证明难题的难易程度。事实上，比特币协议通过对上述的工作证明稍加修改，可以对难题的难易程度有更良好的控制。不再是规定需要多少个开始的零，而是规定block的hash输出结果要小于或等于一个<a href="https://en.bitcoin.it/wiki/Target" target="_blank" rel="external">目标值</a>，这个目标值是自动调节的，用来保证比特币的每一个区块（block）平均要花10分钟来解。</p>
<p>好了，我们假设David很幸运，找到了一个合适的x(nonce)，恭喜他！（他将会得到找到这个答案的奖赏）。他会公布他已经证明了这个区块里面的交易是合理的，并且与之同时公布她找到的x值，其他infocoin里的参与者可以证明x那个工作证明的有效解。然后他们就更新自己的blockchain，来包括David所公布的这些交易。</p>
<p>为了让工作证明这个方案的运作，网络的参与者应该需要一个激励机制来帮助验证交易。没有激励机制的话，没有人会愿意花费自己的计算机算力来帮助检验交易。如果网络参与者不愿意花费算力，那么整个系统就不会运转。因此，我们可以通过给他们一些infocoin的方式来奖励任何成功验证了交易的人。若给他们提供的infocoin奖励足够的多，可以激励他们来参与验证。</p>
<p>在比特币的协议里，这个验证的过程被称作“mining” （挖矿）。每一个交易区块的验证成功者都会获得比特币作为奖励。最开始的时候，是50个比特币的奖励。但是每格21万个验证的区块（也就是大概每4年左右），奖励会减半。现在为止只发生了一次，也就是说现在验证一个block获得的奖励是25个比特币。 减半的过程会持续发生，直到大概2140年。那时候，挖矿的奖励的将会降低到10-8个比特币。而10-8个比特币是比特币最小的单位（被称作一个Satoshi），因此到2140年，总共的比特币将会停止增长。然而，这并不会消除验证交易的激励机制，比特币可以允许参与者加入验证交易的费用，用来奖赏验证交易的人。早期的比特币，交易费几乎为零，但是随着比特币的普及，交易费会逐渐升高，现在已经成为除了25个比特币奖励之外的额外激励了。</p>
<p>你可以将工作证明（proof-of-work）看做一个竞相验证交易的过程。每个参与者会花费一部分的计算机算力。一个挖矿者获胜的机会大概等于他们控制的计算计算力的大小和整个网络的算力的比例。比如说，一个挖矿者控制着整个网络算力量百分之一的计算能力，那么他的获胜的概率也大概是百分之一。所以提供大量计算能力是支撑竞争能力的因素，一个不诚实的挖矿者只有很小的机会去破坏验证过程，除非他们花费巨大的计算机资源。</p>
<p>当然，就算是不诚实的挖矿者仅有很小的机会破坏整个blockchain，我们也没有足够的信心拿它来当成货币。特别是，我们还没有最终解决双花的问题。</p>
<p>我会马上分析双花的问题，但是在那之前，我想在Infocoin的概念里补充一个重要的细节。理想情况下，我们希望Infocoin网络能够统一交易发生的顺序。如果我们没有统一的顺序，那么谁在哪个特定的时候有哪个infocoin就不是很清楚了。为了帮着解决这一点。我们要求新的区块（block）必须要包含指向上一个区块的指针，这个指针也其实就是上一个block的哈希（hash）结果。因此，基本上说，区块链 （block chain）本身也就是一个线性的一串包含着交易信息的区块（blocks），一个接着一个，每一个block都包含着指向上一个block的指针。</p>
<p><img src="http://michaelnielsen.org/ddi/wp-content/uploads/2013/12/block_chain.png" alt=""></p>
<p>偶然情况下，一个blockchain上会产生分支。这种情况是因为，有时候两个挖矿者几乎同时验证出来一个区块的交易。他们同时公布到网络里，有些人用一个方法更新他们的blockchain，另一些人用另外一个方法更新他们的blockchain。</p>
<p><img src="http://michaelnielsen.org/ddi/wp-content/uploads/2013/12/block_chain_fork.png" alt=""></p>
<p>这就造成了我们想要避免的情况 ——这种情况，交易的顺序就不清楚了，而且谁有哪个infocoin也就不清楚了。幸运的是，有一个简单的办法可以用来挪去分支。规则是这样的：如果分支情况出现，那么网络上的人们继续保持两个分支，任何情况下，挖矿者只在最长的那个blockchain上工作。</p>
<p>假设我们有一个分支，有一些挖矿者先收到block A，另一些挖矿者先收到的是block B。那些收到block A的挖矿者将要继续沿着他们的分支挖矿，而其他人沿着Block B的分支挖矿。我们假设在B分支上的挖矿者先成功挖到下一个block：</p>
<p><img src="http://michaelnielsen.org/ddi/wp-content/uploads/2013/12/block_chain_extended.png" alt=""></p>
<p>当他们收到这个消息后，在A分支的人会注意到现在B分支是最长的，于是就会转换到B的分支。在A分支上的工作就会迅速的停止，这样每个人就会都在同一个顺序的blockchain上工作了。然后block A就会被忽略。当然，所有在block A里面的待定交易将会继续保持待定状态，随后会在B分支上被放到新的block里，这样，所有的交易最终还是会被验证的。</p>
<p>同理，如果在分支A上的挖矿者先挖到下一个block，那么在B分支上工作的人就是停止，转到A分支上。</p>
<p>不论结果是什么，这个过程保证了blockchain有统一的顺序。在比特币中，一个交易能不算作确认直到 1）它存在于最长的分支中的block里，2）至少有5个验证过的block在其后面得到验证。这种情况，我们说这个交易有了“6个确认”。这给了整个网络时间去统一block的顺序。我们在Infocoin里，也用同样的方案。</p>
<p>现在我们理解了时间顺序，那我们回去想想如果一个不诚实的人想要双重花费的话会怎么样。假设Alice要同时给Bob和Charlie同样的交易。一个可能性就是让她去验证同时带有两个交易的一个block。假设她拥有百分之一的计算能力，那么她有可能比较幸运的验证出了这一个block。不幸的是，这个双重花费将会马上被其他人发现并且拒绝，尽管她解决了工作证明里的难题。所以这个可能性我们不用担心。</p>
<p>但是另一种可能性是，她试图分别公布两个交易。她可能给一部分挖矿者公布一个交易，给另一部分挖矿者公布另一个交易，她希望让两个交易都得到验证。幸运的是，这种情况下，如我们刚才所说，网络最终只会确认其中一个交易。所以，这个也不是问题。</p>
<p>还有一种可能是，Alice = Bob，也就是说Alice试图将一个币给Charlie，同时她又将那个币给她自己，因为她自己可以有多个账户。这种情况下，Alice的策略是等到Charlie接受了这个Infocoin，也就是大概在交易在最长的blockchain中被确认6次之后。她再试图去解决另外一个拥有她发给自己的交易的那个block分支。</p>
<p><img src="http://michaelnielsen.org/ddi/wp-content/uploads/2013/12/block_chain_cheating.png" alt=""></p>
<p>可惜的是，这个时候Alice已经比最长的blockchain晚了6步。她很难在跟得上最长的分支了。其他的挖矿者不会帮助她，因为他们都需要在最长的分支上工作才能得到奖赏。除非Alice在解决工作证明的时候能够比网络上其他人结合起来还快（也就是说她大概有多于整个网络50%的计算能力）。当然，她可能会偶然幸运，在百分之一的算力的情况下能解决一个block，但是同时赶上6个的花相当于是 1/1006 = 10-12 。这种情况可以说是想到于零。</p>
<p>当然这不是非常严格的说Alice肯定不能双花了。这只是一个合理的推论。比特币的白皮书原文并没有进行一个严格的安全分析，只是和我这里类似的非正式推论。安全团体任然在分析比特币的安全性和潜在的缺陷，具体可以看<a href="https://en.bitcoin.it/wiki/Research" target="_blank" rel="external">这个列表</a>。</p>
<p>另外：</p>
<p>如果觉得有帮助，建议你Tip给这篇文章的原作者<a href="http://michaelnielsen.org/blog/" target="_blank" rel="external">Michael Nielsen</a>， 他的地址是<em>17ukkKt1bNLAqdJ1QQv8v9Askr6vy3MzTZ ， </em>你也可以follow他的<a href="https://twitter.com/michael_nielsen" target="_blank" rel="external">Twitter </a>。 或者关注他的将要出版的关于<em>neural networks and deep learning</em>新书的<a href="http://neuralnetworksanddeeplearning.com/chap1.html" target="_blank" rel="external">第一章</a></p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="http://i1.piimg.com/567571/473944d51f13444e.png" alt=""></p>
<p><a href="http://www.steven7.top/">Steven`s Notes</a> by <a href="http://www.steven7.top/about.html">Steven</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.  </p>
<p>由<a href="http://www.steven7.top/about.html">裴士超</a>创作并维护的<a href="http://www.steven7.top">斯蒂芬</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me" target="_blank" rel="external">Steven`s Notes</a>博客（ <a href="http://www.steven7.top">http://www.steven7.top</a> ），版权所有，侵权必究。</p>
<hr>
<p>本文永久链接：<a href="http://www.steven7.top/2017/01/17/2017-5.html">http://www.steven7.top/2017/01/17/2017-5.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[比特币白皮书：一种点对点的电子现金系统]]></title>
      <url>http://www.steven7.top/2017/01/17/2017-4.html</url>
      <content type="html"><![CDATA[<p><img src="http://p1.bqimg.com/1949/2a297568091ba15ft.jpg" alt="Markdown"></p>
<a id="more"></a>
<p>写在前面的一些话：</p>
<p>这边paper本来是写在上篇博客所推荐的“区块链：定义未来金融与经济新格局”的附录中的，由于不好提取所以转载了一篇网上现有的文章。</p>
<h1 id="比特币白皮书：一种点对点的电子现金系统"><a href="#比特币白皮书：一种点对点的电子现金系统" class="headerlink" title="比特币白皮书：一种点对点的电子现金系统"></a>比特币白皮书：一种点对点的电子现金系统</h1><h3 id="原文作者：中本聪（Satoshi-Nakamoto）"><a href="#原文作者：中本聪（Satoshi-Nakamoto）" class="headerlink" title="原文作者：中本聪（Satoshi Nakamoto）"></a><strong>原文作者：中本聪（Satoshi Nakamoto）</strong></h3><p><strong>作者邮箱：Satoshin@gmx.com</strong></p>
<p><strong>执行翻译：8btc.com  巴比特 QQagent</strong></p>
<p>转载于<a href="http://www.8btc.com/wiki/bitcoin-a-peer-to-peer-electronic-cash-system" target="_blank" rel="external"><strong>巴比特 </strong></a></p>
<hr>
<blockquote>
<p>[摘要]：本文提出了一种完全通过点对点技术实现的电子现金系统，它使得在线支付能够直接由一方发起并支付给另外一方，中间不需要通过任何的金融机构。虽然数字签名（Digital signatures）部分解决了这个问题，但是如果仍然需要第三方的支持才能防止双重支付（double-spending）的话，那么这种系统也就失去了存在的价值。我们(we)在此提出一种解决方案，使现金系统在点对点的环境下运行，并防止双重支付问题。该网络通过随机散列（hashing）对全部交易加上时间戳（timestamps），将它们合并入一个不断延伸的基于随机散列的工作量证明（proof-of-work）的链条作为交易记录，除非重新完成全部的工作量证明，形成的交易记录将不可更改。最长的链条不仅将作为被观察到的事件序列（sequence）的证明，而且被看做是来自CPU计算能力最大的池（pool）。只要大多数的CPU计算能力都没有打算合作起来对全网进行攻击，那么诚实的节点将会生成最长的、超过攻击者的链条。这个系统本身需要的基础设施非常少。信息尽最大努力在全网传播即可，节点(nodes)可以随时离开和重新加入网络，并将最长的工作量证明链条作为在该节点离线期间发生的交易的证明。</p>
</blockquote>
<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>互联网上的贸易，几乎都需要借助金融机构作为可资信赖的第三方来处理电子支付信息。虽然这类系统在绝大多数情况下都运作良好，但是这类系统仍然内生性地受制于“基于信用的模式”(trust based model)的弱点。我们无法实现完全不可逆的交易，因为金融机构总是不可避免地会出面协调争端。而金融中介的存在，也会增加交易的成本，并且限制了实际可行的最小交易规模，也限制了日常的小额支付交易。并且潜在的损失还在于，很多商品和服务本身是无法退货的，如果缺乏不可逆的支付手段，互联网的贸易就大大受限。因为有潜在的退款的可能，就需要交易双方拥有信任。而商家也必须提防自己的客户，因此会向客户索取完全不必要的个人信息。而实际的商业行为中，一定比例的欺诈性客户也被认为是不可避免的，相关损失视作销售费用处理。而在使用物理现金的情况下，这些销售费用和支付问题上的不确定性却是可以避免的，因为此时没有第三方信用中介的存在。</p>
<p>互联网上的贸易，几乎都需要借助金融机构作为可资信赖的第三方来处理电子支付信息。虽然这类系统在绝大多数情况下都运作良好，但是这类系统仍然内生性地受制于“基于信用的模式”(trust based model)的弱点。我们无法实现完全不可逆的交易，因为金融机构总是不可避免地会出面协调争端。而金融中介的存在，也会增加交易的成本，并且限制了实际可行的最小交易规模，也限制了日常的小额支付交易。并且潜在的损失还在于，很多商品和服务本身是无法退货的，如果缺乏不可逆的支付手段，互联网的贸易就大大受限。因为有潜在的退款的可能，就需要交易双方拥有信任。而商家也必须提防自己的客户，因此会向客户索取完全不必要的个人信息。而实际的商业行为中，一定比例的欺诈性客户也被认为是不可避免的，相关损失视作销售费用处理。而在使用物理现金的情况下，这些销售费用和支付问题上的不确定性却是可以避免的，因为此时没有第三方信用中介的存在。<br>所以，我们非常需要这样一种电子支付系统，它基于密码学原理而不基于信用，使得任何达成一致的双方，能够直接进行支付，从而不需要第三方中介的参与。杜绝回滚(reverse)支付交易的可能，这就可以保护特定的卖家免于欺诈；而对于想要保护买家的人来说，在此环境下设立通常的第三方担保机制也可谓轻松加愉快。在这篇论文中，我们(we)将提出一种通过点对点分布式的时间戳服务器来生成依照时间前后排列并加以记录的电子交易证明，从而解决双重支付问题。只要诚实的节点所控制的计算能力的总和，大于有合作关系的(cooperating)攻击者的计算能力的总和，该系统就是安全的。</p>
<h2 id="2-交易-Transactions"><a href="#2-交易-Transactions" class="headerlink" title="2. 交易(Transactions)"></a>2. 交易(Transactions)</h2><p>我们定义，一枚电子货币（an electronic coin）是这样的一串数字签名：每一位所有者通过对前一次交易和下一位拥有者的公钥(Public key) 签署一个随机散列的数字签名，并将这个签名附加在这枚电子货币的末尾，电子货币就发送给了下一位所有者。而收款人通过对签名进行检验，就能够验证该链条的所有者。</p>
<h1 id=""><a href="#" class="headerlink" title=""></a><img src="http://7fvhfe.com1.z0.glb.clouddn.com/wp-content/uploads/2013/11/11.png" alt="1"></h1><p>该过程的问题在于，收款人将难以检验，之前的某位所有者，是否对这枚电子货币进行了双重支付。通常的解决方案，就是引入信得过的第三方权威，或者类似于造币厂(mint)的机构，来对每一笔交易进行检验，以防止双重支付。在每一笔交易结束后，这枚电子货币就要被造币厂回收，而造币厂将发行一枚新的电子货币；而只有造币厂直接发行的电子货币，才算作有效，这样就能够防止双重支付。可是该解决方案的问题在于，整个货币系统的命运完全依赖于运作造币厂的公司，因为每一笔交易都要经过该造币厂的确认，而该造币厂就好比是一家银行。</p>
<p>该过程的问题在于，收款人将难以检验，之前的某位所有者，是否对这枚电子货币进行了双重支付。通常的解决方案，就是引入信得过的第三方权威，或者类似于造币厂(mint)的机构，来对每一笔交易进行检验，以防止双重支付。在每一笔交易结束后，这枚电子货币就要被造币厂回收，而造币厂将发行一枚新的电子货币；而只有造币厂直接发行的电子货币，才算作有效，这样就能够防止双重支付。可是该解决方案的问题在于，整个货币系统的命运完全依赖于运作造币厂的公司，因为每一笔交易都要经过该造币厂的确认，而该造币厂就好比是一家银行。<br>我们需要收款人有某种方法，能够确保之前的所有者没有对更早发生的交易实施签名。从逻辑上看，为了达到目的，实际上我们需要关注的只是于本交易之前发生的交易，而不需要关注这笔交易发生之后是否会有双重支付的尝试。为了确保某一次交易是不存在的，那么唯一的方法就是获悉之前发生过的所有交易。在造币厂模型里面，造币厂获悉所有的交易，并且决定了交易完成的先后顺序。如果想要在电子系统中排除第三方中介机构，那么交易信息就应当被公开宣布（publicly announced）<a href="http://www.8btc.com/wiki/bitcoin-a-peer-to-peer-electronic-cash-system#footnote-1" target="_blank" rel="external">[]</a> ，我们需要整个系统内的所有参与者，都有唯一公认的历史交易序列。收款人需要确保在交易期间绝大多数的节点都认同该交易是首次出现。</p>
<h2 id="3-时间戳服务器-Timestamp-server"><a href="#3-时间戳服务器-Timestamp-server" class="headerlink" title="3. 时间戳服务器(Timestamp server)"></a>3. 时间戳服务器(Timestamp server)</h2><p>本解决方案首先提出一个“时间戳服务器”。时间戳服务器通过对以区块(block)形式存在的一组数据实施随机散列而加上时间戳，并将该随机散列进行广播，就像在新闻或世界性新闻组网络（Usenet）的发帖一样<a href="http://www.8btc.com/wiki/bitcoin-a-peer-to-peer-electronic-cash-system#footnote-2" target="_blank" rel="external">[]</a><a href="http://www.8btc.com/wiki/bitcoin-a-peer-to-peer-electronic-cash-system#footnote-3" target="_blank" rel="external">[]</a><a href="http://www.8btc.com/wiki/bitcoin-a-peer-to-peer-electronic-cash-system#footnote-4" target="_blank" rel="external">[]</a><a href="http://www.8btc.com/wiki/bitcoin-a-peer-to-peer-electronic-cash-system#footnote-5" target="_blank" rel="external">[]</a> 。显然，该时间戳能够证实特定数据必然于某特定时间是的确存在的，因为只有在该时刻存在了才能获取相应的随机散列值。每个时间戳应当将前一个时间戳纳入其随机散列值中，每一个随后的时间戳都对之前的一个时间戳进行增强(reinforcing)，这样就形成了一个链条（Chain）。</p>
<p><img src="http://7fvhfe.com1.z0.glb.clouddn.com/wp-content/uploads/2013/11/21.png" alt="2"></p>
<h2 id="4-工作量证明（Proof-of-Work）"><a href="#4-工作量证明（Proof-of-Work）" class="headerlink" title="4. 工作量证明（Proof-of-Work）"></a>4. 工作量证明（Proof-of-Work）</h2><p>为了在点对点的基础上构建一组分散化的时间戳服务器，仅仅像报纸或世界性新闻网络组一样工作是不够的，我们还需要一个类似于亚当•柏克（Adam Back）提出的哈希现金（Hashcash）<a href="http://www.8btc.com/wiki/bitcoin-a-peer-to-peer-electronic-cash-system#footnote-6" target="_blank" rel="external">[]</a> 。在进行随机散列运算时，工作量证明机制引入了对某一个特定值的扫描工作，比方说SHA-256下，随机散列值以一个或多个0开始。那么随着0的数目的上升, 找到这个解所需要的工作量将呈指数增长，而对结果进行检验则仅需要一次随机散列运算。</p>
<p>我们在区块中补增一个随机数(Nonce)，这个随机数要使得该给定区块的随机散列值出现了所需的那么多个0。我们通过反复尝试来找到这个随机数，直到找到为止，这样我们就构建了一个工作量证明机制。只要该CPU耗费的工作量能够满足该工作量证明机制，那么除非重新完成相当的工作量，该区块的信息就不可更改。由于之后的区块是链接在该区块之后的，所以想要更改该区块中的信息，就还需要重新完成之后所有区块的全部工作量。</p>
<p><img src="http://7fvhfe.com1.z0.glb.clouddn.com/wp-content/uploads/2013/11/31.png" alt="3"></p>
<p>同时，该工作量证明机制还解决了在集体投票表决时，谁是大多数的问题。如果决定大多数的方式是基于IP地址的，一IP地址一票，那么如果有人拥有分配大量IP地址的权力，则该机制就被破坏了。而工作量证明机制的本质则是一CPU一票。“大多数”的决定表达为最长的链，因为最长的链包含了最大的工作量。如果大多数的CPU为诚实的节点控制，那么诚实的链条将以最快的速度延长，并超越其他的竞争链条。如果想要对业已出现的区块进行修改，攻击者必须重新完成该区块的工作量外加该区块之后所有区块的工作量，并最终赶上和超越诚实节点的工作量。我们将在后文证明，设想一个较慢的攻击者试图赶上随后的区块，那么其成功概率将呈指数化递减。</p>
<p>同时，该工作量证明机制还解决了在集体投票表决时，谁是大多数的问题。如果决定大多数的方式是基于IP地址的，一IP地址一票，那么如果有人拥有分配大量IP地址的权力，则该机制就被破坏了。而工作量证明机制的本质则是一CPU一票。“大多数”的决定表达为最长的链，因为最长的链包含了最大的工作量。如果大多数的CPU为诚实的节点控制，那么诚实的链条将以最快的速度延长，并超越其他的竞争链条。如果想要对业已出现的区块进行修改，攻击者必须重新完成该区块的工作量外加该区块之后所有区块的工作量，并最终赶上和超越诚实节点的工作量。我们将在后文证明，设想一个较慢的攻击者试图赶上随后的区块，那么其成功概率将呈指数化递减。<br>另一个问题是，硬件的运算速度在高速增长，而节点参与网络的程度则会有所起伏。为了解决这个问题，工作量证明的难度(the proof-of-work difficulty)将采用移动平均目标的方法来确定，即令难度指向令每小时生成区块的速度为某一个预定的平均数。如果区块生成的速度过快，那么难度就会提高。</p>
<h2 id="5-网络"><a href="#5-网络" class="headerlink" title="5. 网络"></a>5. 网络</h2><p>运行该网络的步骤如下：</p>
<ul>
<li>1) 新的交易向全网进行广播；</li>
<li>2) 每一个节点都将收到的交易信息纳入一个区块中；</li>
<li>3) 每个节点都尝试在自己的区块中找到一个具有足够难度的工作量证明；</li>
<li>4) 当一个节点找到了一个工作量证明，它就向全网进行广播；</li>
<li>5) 当且仅当包含在该区块中的所有交易都是有效的且之前未存在过的，其他节点才认同该区块的有效性；</li>
<li>6) 其他节点表示他们接受该区块，而表示接受的方法，则是在跟随该区块的末尾，制造新的区块以延长该链条，而将被接受区块的随机散列值视为先于新区快的随机散列值。</li>
</ul>
<p>节点始终都将最长的链条视为正确的链条，并持续工作和延长它。如果有两个节点同时广播不同版本的新区块，那么其他节点在接收到该区块的时间上将存在先后差别。当此情形，他们将在率先收到的区块基础上进行工作，但也会保留另外一个链条，以防后者变成最长的链条。该僵局（tie）的打破要等到下一个工作量证明被发现，而其中的一条链条被证实为是较长的一条，那么在另一条分支链条上工作的节点将转换阵营，开始在较长的链条上工作。</p>
<p>节点始终都将最长的链条视为正确的链条，并持续工作和延长它。如果有两个节点同时广播不同版本的新区块，那么其他节点在接收到该区块的时间上将存在先后差别。当此情形，他们将在率先收到的区块基础上进行工作，但也会保留另外一个链条，以防后者变成最长的链条。该僵局（tie）的打破要等到下一个工作量证明被发现，而其中的一条链条被证实为是较长的一条，那么在另一条分支链条上工作的节点将转换阵营，开始在较长的链条上工作。<br>所谓“新的交易要广播”，实际上不需要抵达全部的节点。只要交易信息能够抵达足够多的节点，那么他们将很快被整合进一个区块中。而区块的广播对被丢弃的信息是具有容错能力的。如果一个节点没有收到某特定区块，那么该节点将会发现自己缺失了某个区块，也就可以提出自己下载该区块的请求。</p>
<h2 id="6-激励"><a href="#6-激励" class="headerlink" title="6. 激励"></a>6. 激励</h2><p>我们约定如此：每个区块的第一笔交易进行特殊化处理，该交易产生一枚由该区块创造者拥有的新的电子货币。这样就增加了节点支持该网络的激励，并在没有中央集权机构发行货币的情况下，提供了一种将电子货币分配到流通领域的一种方法。这种将一定数量新货币持续增添到货币系统中的方法，非常类似于耗费资源去挖掘金矿并将黄金注入到流通领域。此时，CPU的时间和电力消耗就是消耗的资源。</p>
<p>我们约定如此：每个区块的第一笔交易进行特殊化处理，该交易产生一枚由该区块创造者拥有的新的电子货币。这样就增加了节点支持该网络的激励，并在没有中央集权机构发行货币的情况下，提供了一种将电子货币分配到流通领域的一种方法。这种将一定数量新货币持续增添到货币系统中的方法，非常类似于耗费资源去挖掘金矿并将黄金注入到流通领域。此时，CPU的时间和电力消耗就是消耗的资源。<br>另外一个激励的来源则是交易费（transaction fees）。如果某笔交易的输出值小于输入值，那么差额就是交易费，该交易费将被增加到该区块的激励中。只要既定数量的电子货币已经进入流通，那么激励机制就可以逐渐转换为完全依靠交易费，那么本货币系统就能够免于通货膨胀。</p>
<p>我们约定如此：每个区块的第一笔交易进行特殊化处理，该交易产生一枚由该区块创造者拥有的新的电子货币。这样就增加了节点支持该网络的激励，并在没有中央集权机构发行货币的情况下，提供了一种将电子货币分配到流通领域的一种方法。这种将一定数量新货币持续增添到货币系统中的方法，非常类似于耗费资源去挖掘金矿并将黄金注入到流通领域。此时，CPU的时间和电力消耗就是消耗的资源。<br>另外一个激励的来源则是交易费（transaction fees）。如果某笔交易的输出值小于输入值，那么差额就是交易费，该交易费将被增加到该区块的激励中。只要既定数量的电子货币已经进入流通，那么激励机制就可以逐渐转换为完全依靠交易费，那么本货币系统就能够免于通货膨胀。<br>激励系统也有助于鼓励节点保持诚实。如果有一个贪婪的攻击者能够调集比所有诚实节点加起来还要多的CPU计算力，那么他就面临一个选择：要么将其用于诚实工作产生新的电子货币，或者将其用于进行二次支付攻击。那么他就会发现，按照规则行事、诚实工作是更有利可图的。因为该等规则使得他能够拥有更多的电子货币，而不是破坏这个系统使得其自身财富的有效性受损。</p>
<h2 id="7-回收硬盘空间"><a href="#7-回收硬盘空间" class="headerlink" title="7. 回收硬盘空间"></a>7. 回收硬盘空间</h2><p>如果最近的交易已经被纳入了足够多的区块之中，那么就可以丢弃该交易之前的数据，以回收硬盘空间。为了同时确保不损害区块的随机散列值，交易信息被随机散列时，被构建成一种Merkle树（Merkle tree）<a href="http://www.8btc.com/wiki/bitcoin-a-peer-to-peer-electronic-cash-system#footnote-7" target="_blank" rel="external">[]</a> 的形态，使得只有根(root)被纳入了区块的随机散列值。通过将该树（tree）的分支拔除（stubbing）的方法，老区块就能被压缩。而内部的随机散列值是不必保存的。</p>
<p><img src="http://7fvhfe.com1.z0.glb.clouddn.com/wp-content/uploads/2013/11/41.png" alt="4"></p>
<p>不含交易信息的区块头（Block header）大小仅有80字节。如果我们设定区块生成的速率为每10分钟一个，那么每一年产生的数据位4.2MB。（80 bytes <em> 6 </em> 24 * 365 = 4.2MB）。2008年，PC系统通常的内存容量为2GB，按照摩尔定律的预言，即使将全部的区块头存储于内存之中都不是问题。</p>
<h2 id="8-简化的支付确认（Simplified-Payment-Verification）"><a href="#8-简化的支付确认（Simplified-Payment-Verification）" class="headerlink" title="8. 简化的支付确认（Simplified Payment Verification）"></a>8. 简化的支付确认（Simplified Payment Verification）</h2><p>在不运行完整网络节点的情况下，也能够对支付进行检验。一个用户需要保留最长的工作量证明链条的区块头的拷贝，它可以不断向网络发起询问，直到它确信自己拥有最长的链条，并能够通过merkle的分支通向它被加上时间戳并纳入区块的那次交易。节点想要自行检验该交易的有效性原本是不可能的，但通过追溯到链条的某个位置，它就能看到某个节点曾经接受过它，并且于其后追加的区块也进一步证明全网曾经接受了它。</p>
<p><img src="http://7fvhfe.com1.z0.glb.clouddn.com/wp-content/uploads/2013/11/5.png" alt="5"></p>
<p>当此情形，只要诚实的节点控制了网络，检验机制就是可靠的。但是，当全网被一个计算力占优的攻击者攻击时，将变得较为脆弱。因为网络节点能够自行确认交易的有效性，只要攻击者能够持续地保持计算力优势，简化的机制会被攻击者焊接的（fabricated）交易欺骗。那么一个可行的策略就是，只要他们发现了一个无效的区块，就立刻发出警报，收到警报的用户将立刻开始下载被警告有问题的区块或交易的完整信息，以便对信息的不一致进行判定。对于日常会发生大量收付的商业机构，可能仍会希望运行他们自己的完整节点，以保持较大的独立完全性和检验的快速性。</p>
<p><img src="http://7fvhfe.com1.z0.glb.clouddn.com/wp-content/uploads/2013/11/7.png" alt="7"></p>
<h2 id="9-价值的组合与分割（Combining-and-Splitting-Value）"><a href="#9-价值的组合与分割（Combining-and-Splitting-Value）" class="headerlink" title="9. 价值的组合与分割（Combining and Splitting Value）"></a>9. 价值的组合与分割（Combining and Splitting Value）</h2><p>虽然可以单个单个地对电子货币进行处理，但是对于每一枚电子货币单独发起一次交易将是一种笨拙的办法。为了使得价值易于组合与分割，交易被设计为可以纳入多个输入和输出。一般而言是某次价值较大的前次交易构成的单一输入，或者由某几个价值较小的前次交易共同构成的并行输入，但是输出最多只有两个：一个用于支付，另一个用于找零（如有）。</p>
<p>虽然可以单个单个地对电子货币进行处理，但是对于每一枚电子货币单独发起一次交易将是一种笨拙的办法。为了使得价值易于组合与分割，交易被设计为可以纳入多个输入和输出。一般而言是某次价值较大的前次交易构成的单一输入，或者由某几个价值较小的前次交易共同构成的并行输入，但是输出最多只有两个：一个用于支付，另一个用于找零（如有）。<br>需要指出的是，当一笔交易依赖于之前的多笔交易时，这些交易又各自依赖于多笔交易，但这并不存在任何问题。因为这个工作机制并不需要展开检验之前发生的所有交易历史。</p>
<h2 id="10-隐私（Privacy）"><a href="#10-隐私（Privacy）" class="headerlink" title="10. 隐私（Privacy）"></a>10. 隐私（Privacy）</h2><p><img src="http://7fvhfe.com1.z0.glb.clouddn.com/wp-content/uploads/2013/11/6.png" alt="6"></p>
<p>传统的造币厂模型为交易的参与者提供了一定程度的隐私保护，因为试图向可信任的第三方索取交易信息是严格受限的。但是如果将交易信息向全网进行广播，就意味着这样的方法失效了。但是隐私依然可以得到保护：将公钥保持为匿名。公众得知的信息仅仅是有某个人将一定数量的货币发所给了另外一个人，但是难以将该交易同特定的人联系在一起，也就是说，公众难以确信，这些人究竟是谁。这同股票交易所发布的信息是类似的，股票交易发生的时间、交易量是记录在案且可供查询的，但是交易双方的身份信息却不予透露。</p>
<p>传统的造币厂模型为交易的参与者提供了一定程度的隐私保护，因为试图向可信任的第三方索取交易信息是严格受限的。但是如果将交易信息向全网进行广播，就意味着这样的方法失效了。但是隐私依然可以得到保护：将公钥保持为匿名。公众得知的信息仅仅是有某个人将一定数量的货币发所给了另外一个人，但是难以将该交易同特定的人联系在一起，也就是说，公众难以确信，这些人究竟是谁。这同股票交易所发布的信息是类似的，股票交易发生的时间、交易量是记录在案且可供查询的，但是交易双方的身份信息却不予透露。<br>作为额外的预防措施，使用者可以让每次交易都生成一个新的地址，以确保这些交易不被追溯到一个共同的所有者。但是由于并行输入的存在，一定程度上的追溯还是不可避免的，因为并行输入表明这些货币都属于同一个所有者。此时的风险在于，如果某个人的某一个公钥被确认属于他，那么就可以追溯出此人的其它很多交易。</p>
<h2 id="11-计算"><a href="#11-计算" class="headerlink" title="11. 计算"></a>11. 计算</h2><p>设想如下场景：一个攻击者试图比诚实节点产生链条更快地制造替代性区块链。即便它达到了这一目的，但是整个系统也并非就此完全受制于攻击者的独断意志了，比方说凭空创造价值，或者掠夺本不属于攻击者的货币。这是因为节点将不会接受无效的交易，而诚实的节点永远不会接受一个包含了无效信息的区块。一个攻击者能做的，最多是更改他自己的交易信息，并试图拿回他刚刚付给别人的钱。</p>
<p>设想如下场景：一个攻击者试图比诚实节点产生链条更快地制造替代性区块链。即便它达到了这一目的，但是整个系统也并非就此完全受制于攻击者的独断意志了，比方说凭空创造价值，或者掠夺本不属于攻击者的货币。这是因为节点将不会接受无效的交易，而诚实的节点永远不会接受一个包含了无效信息的区块。一个攻击者能做的，最多是更改他自己的交易信息，并试图拿回他刚刚付给别人的钱。<br>诚实链条和攻击者链条之间的竞赛，可以用二叉树随机漫步（Binomial Random Walk)来描述。成功事件定义为诚实链条延长了一个区块，使其领先性+1，而失败事件则是攻击者的链条被延长了一个区块，使得差距-1。</p>
<p>设想如下场景：一个攻击者试图比诚实节点产生链条更快地制造替代性区块链。即便它达到了这一目的，但是整个系统也并非就此完全受制于攻击者的独断意志了，比方说凭空创造价值，或者掠夺本不属于攻击者的货币。这是因为节点将不会接受无效的交易，而诚实的节点永远不会接受一个包含了无效信息的区块。一个攻击者能做的，最多是更改他自己的交易信息，并试图拿回他刚刚付给别人的钱。<br>诚实链条和攻击者链条之间的竞赛，可以用二叉树随机漫步（Binomial Random Walk)来描述。成功事件定义为诚实链条延长了一个区块，使其领先性+1，而失败事件则是攻击者的链条被延长了一个区块，使得差距-1。<br>攻击者成功填补某一既定差距的可能性，可以近似地看做赌徒破产问题（Gambler’s Ruin problem）。假定一个赌徒拥有无限的透支信用，然后开始进行潜在次数为无穷的赌博，试图填补上自己的亏空。那么我们可以计算他填补上亏空的概率，也就是该攻击者赶上诚实链条，如下所示<a href="http://www.8btc.com/wiki/bitcoin-a-peer-to-peer-electronic-cash-system#footnote-8" target="_blank" rel="external">[]</a> ：</p>
<p><img src="http://7fvhfe.com1.z0.glb.clouddn.com/wp-content/uploads/2013/11/pq.png" alt="pq"></p>
<p>假定p&gt;q，那么攻击成功的概率就因为区块数的增长而呈现指数化下降。由于概率是攻击者的敌人，如果他不能幸运且快速地获得成功，那么他获得成功的机会随着时间的流逝就变得愈发渺茫。那么我们考虑一个收款人需要等待多长时间，才能足够确信付款人已经难以更改交易了。我们假设付款人是一个支付攻击者，希望让收款人在一段时间内相信他已经付过款了，然后立即将支付的款项重新支付给自己。虽然收款人届时会发现这一点，但为时已晚。</p>
<p>假定p&gt;q，那么攻击成功的概率就因为区块数的增长而呈现指数化下降。由于概率是攻击者的敌人，如果他不能幸运且快速地获得成功，那么他获得成功的机会随着时间的流逝就变得愈发渺茫。那么我们考虑一个收款人需要等待多长时间，才能足够确信付款人已经难以更改交易了。我们假设付款人是一个支付攻击者，希望让收款人在一段时间内相信他已经付过款了，然后立即将支付的款项重新支付给自己。虽然收款人届时会发现这一点，但为时已晚。<br>收款人生成了新的一对密钥组合，然后只预留一个较短的时间将公钥发送给付款人。这将可以防止以下情况：付款人预先准备好一个区块链然后持续地对此区块进行运算，直到运气让他的区块链超越了诚实链条，方才立即执行支付。当此情形，只要交易一旦发出，攻击者就开始秘密地准备一条包含了该交易替代版本的平行链条。</p>
<p>假定p&gt;q，那么攻击成功的概率就因为区块数的增长而呈现指数化下降。由于概率是攻击者的敌人，如果他不能幸运且快速地获得成功，那么他获得成功的机会随着时间的流逝就变得愈发渺茫。那么我们考虑一个收款人需要等待多长时间，才能足够确信付款人已经难以更改交易了。我们假设付款人是一个支付攻击者，希望让收款人在一段时间内相信他已经付过款了，然后立即将支付的款项重新支付给自己。虽然收款人届时会发现这一点，但为时已晚。<br>收款人生成了新的一对密钥组合，然后只预留一个较短的时间将公钥发送给付款人。这将可以防止以下情况：付款人预先准备好一个区块链然后持续地对此区块进行运算，直到运气让他的区块链超越了诚实链条，方才立即执行支付。当此情形，只要交易一旦发出，攻击者就开始秘密地准备一条包含了该交易替代版本的平行链条。<br>然后收款人将等待交易出现在首个区块中，然后在等到z个区块链接其后。此时，他仍然不能确切知道攻击者已经进展了多少个区块，但是假设诚实区块将耗费平均预期时间以产生一个区块，那么攻击者的潜在进展就是一个泊松分布，分布的期望值为：</p>
<p><img src="http://7fvhfe.com1.z0.glb.clouddn.com/wp-content/uploads/2013/11/image022.png" alt="image022"></p>
<p>当此情形，为了计算攻击者追赶上的概率，我们将攻击者取得进展区块数量的泊松分布的概率密度，乘以在该数量下攻击者依然能够追赶上的概率。</p>
<p><img src="http://7fvhfe.com1.z0.glb.clouddn.com/wp-content/uploads/2013/11/pq2.png" alt="pq2"></p>
<p>化为如下形式，避免对无限数列求和：</p>
<p><img src="http://7fvhfe.com1.z0.glb.clouddn.com/wp-content/uploads/2013/11/pq3.png" alt="pq3"></p>
<p>写为如下C语言代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> double AttackerSuccessProbability(double q, int z)</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">double</span> p = <span class="number">1.0</span> - q;</div><div class="line"><span class="keyword">double</span> lambda = z * (q / p);</div><div class="line"><span class="keyword">double</span> sum = <span class="number">1.0</span>;</div><div class="line"><span class="keyword">int</span> i, k;</div><div class="line"><span class="keyword">for</span> (k = <span class="number">0</span>; k &lt;= z; k++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">double</span> poisson = <span class="built_in">exp</span>(-lambda);</div><div class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= k; i++)</div><div class="line">poisson *= lambda / i;</div><div class="line">sum -= poisson * (<span class="number">1</span> - <span class="built_in">pow</span>(q / p, z - k));</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> sum;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对其进行运算，我们可以得到如下的概率结果，发现概率对z值呈指数下降。</p>
<p>当q=0.1时<br>z=0 P=1.0000000<br>z=1 P=0.2045873<br>z=2 P=0.0509779<br>z=3 P=0.0131722<br>z=4 P=0.0034552<br>z=5 P=0.0009137<br>z=6 P=0.0002428<br>z=7 P=0.0000647<br>z=8 P=0.0000173<br>z=9 P=0.0000046<br>z=10 P=0.0000012</p>
<p>当q=0.3时<br>z=0 P=1.0000000<br>z=5 P=0.1773523<br>z=10 P=0.0416605<br>z=15 P=0.0101008<br>z=20 P=0.0024804<br>z=25 P=0.0006132<br>z=30 P=0.0001522<br>z=35 P=0.0000379<br>z=40 P=0.0000095<br>z=45 P=0.0000024<br>z=50 P=0.0000006</p>
<p>求解令P&lt;0.1%的z值：</p>
<p>为使P&lt;0.001，则<br>q=0.10 z=5<br>q=0.15 z=8<br>q=0.20 z=11<br>q=0.25 z=15<br>q=0.30 z=24<br>q=0.35 z=41<br>q=0.40 z=89<br>q=0.45 z=340</p>
<h2 id="12-结论"><a href="#12-结论" class="headerlink" title="12.结论"></a>12.结论</h2><p>我们在此提出了一种不需要信用中介的电子支付系统。我们首先讨论了通常的电子货币的电子签名原理，虽然这种系统为所有权提供了强有力的控制，但是不足以防止双重支付。为了解决这个问题，我们提出了一种采用工作量证明机制的点对点网络来记录交易的公开信息，只要诚实的节点能够控制绝大多数的CPU计算能力，就能使得攻击者事实上难以改变交易记录。该网络的强健之处在于它结构上的简洁性。节点之间的工作大部分是彼此独立的，只需要很少的协同。每个节点都不需要明确自己的身份，由于交易信息的流动路径并无任何要求，所以只需要尽其最大努力传播即可。节点可以随时离开网络，而想重新加入网络也非常容易，因为只需要补充接收离开期间的工作量证明链条即可。节点通过自己的CPU计算力进行投票，表决他们对有效区块的确认，他们不断延长有效的区块链来表达自己的确认，并拒绝在无效的区块之后延长区块以表示拒绝。本框架包含了一个P2P电子货币系统所需要的全部规则和激励措施。</p>
<p>注释   </p>
<p>W Dai（戴伟）,a scheme for a group of untraceable digital pseudonyms to pay each other with money and to enforce contracts amongst themselves without outside help（一种能够借助电子假名在群体内部相互支付并迫使个体遵守规则且不需要外界协助的电子现金机制）, “B-money”, <a href="http://www.weidai.com/bmoney.txt" target="_blank" rel="external">http://www.weidai.com/bmoney.txt</a>, 1998</p>
<p><a href="http://www.8btc.com/wiki/bitcoin-a-peer-to-peer-electronic-cash-system#refmark-1" target="_blank" rel="external">↵</a>H. Massias, X.S. Avila, and J.-J. Quisquater, “Design of a secure timestamping service with minimal trust requirements,”（在最小化信任的基础上设计一种时间戳服务器） In 20th Symposium on Information Theory in the Benelux, May 1999.</p>
<p><a href="http://www.8btc.com/wiki/bitcoin-a-peer-to-peer-electronic-cash-system#refmark-2" target="_blank" rel="external">↵</a>S. Haber, W.S. Stornetta, “How to time-stamp a digital document,” （怎样为电子文件添加时间戳）In Journal of Cryptology, vol 3, No.2, pages 99-111, 1991.</p>
<p><a href="http://www.8btc.com/wiki/bitcoin-a-peer-to-peer-electronic-cash-system#refmark-3" target="_blank" rel="external">↵</a>D. Bayer, S. Haber, W.S. Stornetta, “Improving the efficiency and reliability of digital time-stamping,”（提升电子时间戳的效率和可靠性） In Sequences II: Methods in Communication, Security and Computer Science, pages 329-334, 1993.</p>
<p><a href="http://www.8btc.com/wiki/bitcoin-a-peer-to-peer-electronic-cash-system#refmark-4" target="_blank" rel="external">↵</a>S. Haber, W.S. Stornetta, “Secure names for bit-strings,”（比特字串的安全命名） In Proceedings of the 4th ACM Conference on Computer and Communications Security, pages 28-35, April 1997. on Computer and Communications Security, pages 28-35, April 1997.</p>
<p><a href="http://www.8btc.com/wiki/bitcoin-a-peer-to-peer-electronic-cash-system#refmark-5" target="_blank" rel="external">↵</a>A. Back, “Hashcash – a denial of service counter-measure,”（哈希现金——拒绝服务式攻击的克制方法）<a href="http://www.hashcash.org/papers/hashcash.pdf" target="_blank" rel="external">http://www.hashcash.org/papers/hashcash.pdf</a>, 2002.</p>
<p><a href="http://www.8btc.com/wiki/bitcoin-a-peer-to-peer-electronic-cash-system#refmark-6" target="_blank" rel="external">↵</a>R.C. Merkle, “Protocols for public key cryptosystems,” （公钥密码系统的协议）In Proc. 1980 Symposium on Security and Privacy, IEEE Computer Society, pages 122-133, April 1980.</p>
<p>S. Haber, W.S. Stornetta, “Secure names for bit-strings,”（比特字串安全命名） In Proceedings of the 4th ACM Conference on Computer and Communications Security, pages 28-35, April 1997. on Computer and Communications Security, pages 28-35, April 1997.</p>
<p>H. Massias, X.S. Avila, and J.-J. Quisquater, “Design of a secure timestamping service with minimal trust requirements,”（在最小化信任的条件下设计一种时间戳服务器） In 20th Symposium on Information Theory in the Benelux, May 1999.<a href="http://www.8btc.com/wiki/bitcoin-a-peer-to-peer-electronic-cash-system#refmark-7" target="_blank" rel="external">↵</a></p>
<p>W. Feller, “An introduction to probability theory and its applications,” （概率学理论与应用导论）1957<a href="http://www.8btc.com/wiki/bitcoin-a-peer-to-peer-electronic-cash-system#refmark-8" target="_blank" rel="external">↵</a></p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="http://i1.piimg.com/567571/473944d51f13444e.png" alt=""></p>
<p><a href="http://www.steven7.top/">Steven`s Notes</a> by <a href="http://www.steven7.top/about.html">Steven</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.  </p>
<p>由<a href="http://www.steven7.top/about.html">裴士超</a>创作并维护的<a href="http://www.steven7.top">斯蒂芬</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me" target="_blank" rel="external">Steven`s Notes</a>博客（ <a href="http://www.steven7.top">http://www.steven7.top</a> ），版权所有，侵权必究。</p>
<hr>
<p>本文永久链接：<a href="http://www.steven7.top/2017/01/17/2017-4.html">http://www.steven7.top/2017/01/17/2017-4.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[“区块链：定义未来金融与经济新格局”的读书笔记（作者：张健）]]></title>
      <url>http://www.steven7.top/2017/01/17/2017-3.html</url>
      <content type="html"><![CDATA[<p><img src="http://p1.bqimg.com/1949/69657ad96184500at.jpg" alt="Markdown"></p>
<a id="more"></a>
<p>这本电子书下载了挺久了，放在ibook里面呆了好久一直没有看，刚好回家闲着无事花了几天的时间看完了，把读书笔记分享一下，感觉这本书写的还是挺好的。值得再细读细读。把读书笔记导出来也是花了可费劲的功夫啊。好像ibook的笔记导出功能只能使用iphone自带的邮箱才可以。其他的都不行。<img src="http://i1.piimg.com/1949/7afa535472282aae.gif" alt="Markdown"></p>
<p>笔记摘自<br>区块链：定义未来金融与经济新格局<br>张健 </p>
<p>序言<br>区块链虽然以技术的面目诞生，但是其所带来的，已经远远超越技术范畴本身，正如互联网所给我们带来的一样。在我看来，区块链不仅仅是一项技术、一个工具，更是一种思想。开放、共享、去中心化，区块链的这些核心精神与互联网不谋而合。而与互联网不同的是，区块链把这样的思想从信息的传递进一步拓展到价值的传输。 </p>
<p>序言<br>互联网时代的来临，使得信息传输的成本趋于零，这已经深刻地改变了社会的经济格局及每个人的生活。这促使我思考，当未来市场交易成本趋于零的时代到来时，整个世界经济格局及社会结构将发生怎样的变化？ </p>
<p>序言<br>国内首家比特币区块浏览器“区块”（Qukuai.com）正式上线 </p>
<p>序言<br>在一个各方面边际成本正逐步趋于零的社会，“时间”越来越成为我们最大的成本。知识可以长久存在，但机会往往转瞬即逝。我们可以学习过去的知识，却无法抓住过去的机会。我们越早一点了解到新事物，就越有可能抓住时代前行带给我们的机遇。 </p>
<p>序言<br>对于区块链这样一种协议式的、需要大规模社会协作与参与的颠覆性技术，越快让更多人了解到它的意义，就会使其越快体现出自身的价值。 </p>
<p>序言<br>价值互联网时代的到来吧！ </p>
<p>第0章 必然的出现<br>这些力量并非命运，而是轨迹。它们提供的并不是我们将去往何方的预测，而是告诉我们，在不远的将来，我们会向哪些方向前行，必然而然。 </p>
<p>文字与货币<br>然而在人类文明的历史长河中，有两样东西的诞生具有极为特殊的地位，甚至其他任何创造都无法与之相提并论，它们就是文字与货币。文字的发明，使得人类能够在精神层面做到可靠的交流与传承；而货币的发明，则让人类在物质层面能够做到这一点。如果没有这两者，人类作为一个群体将无法获得知识与财富的迭代与累积，也就不会有人类辉煌的文明成果。 </p>
<p>文字与货币<br>文字不是一种深思熟虑后的发明物，而是伴随对私有财产的强烈意识而产生的一种副产品。 </p>
<p>文字与货币<br>《圣经·创世纪》里有一则著名的故事：起初人类有共同的语言，并且一起居住在与幼发拉底河相距不远的地方。人们利用河谷的资源在那里建筑城和塔，以聚集全体人类。上帝降临视察，认为人类过于自信和团结，一旦完成计划，人类将无所不能。上帝决定打乱人们的口音和语言，并使他们分散各地。于是高塔停工了，人们操持不同的语言，互相之间难以交流。这个塔就是巴别塔。 </p>
<p>文字与货币<br>它告诉我们，如果全人类能顺畅地交流，那么所能产生的能量和带来的改变是不可估量的。而 </p>
<p>文字与货币<br>全球经济一体化的背景下，人类还是被不同的货币所分割。我们不由得遐想，如果有一天建成货币的巴别塔，人类的经济生活将会面临怎样的飞跃 </p>
<p>信息的演化<br>1948年，香农发表了《通信的数学原理》，这篇具有划时代意义的论文奠定了现代信息论的基础。在文章中，香农为人类引入了一个新的单词——比特（bit）。牛顿量化了力，建立起经典物理学的大厦；香农量化了信息，打下了人类进入信息时代的基础。如今比特作为衡量信息多少的单位，已经与米、千克、分钟一样，成为人类生活中最基本的量纲之一。1949年，香农又有了重量级的发现，他公开发表的《保密系统的通信理论》一文，开辟了用信息论来研究密码学的新思路。这一发现将密码从艺术变成科学。 </p>
<p>尝试定义信用<br>现代经济学认为，现代市场经济从根本上是一种信用经济，因为随着分工的深化和市场的扩大，信用出现在借贷活动和其他一切市场经济活动中。信用是维系商品交换的基本前提，是市场经济良好并高效运行的基础。 </p>
<p>尝试定义信用<br>金钱就是一种互相信任的系统，而且还不是随随便便的某种系统——金钱正是有史以来最普遍也最有效的互信系统。 </p>
<p>尝试定义信用<br>区块链是作为比特币底层技术与基础架构而诞生的。比特币是一个可以点对点进行支付、不依赖任何第三方的电子现金系统。借助密码学技术，比特币的发明者中本聪构造了一个极为巧妙的经济系统，解决了在去中心化的结构下，如何创造一个可信的价值传输系统这个难题。 </p>
<p>尝试定义信用<br>类似地，在我看来，区块链的诞生给了我们解决另一个宏大问题的机会——如何用数学方法定义信用。 </p>
<p>尝试定义信用<br>只要潜在收益与信用行为的概率之乘积大于潜在损失与不守信行为的概率之乘积（潜在收益×信用行为的概率&gt;潜在损失×不守信行为的概率），信用就是占优势的行为策略。1990年科尔曼就以代数的方式提出了这种计算方法[6]。 </p>
<p>尝试定义信用<br>比如，我们这里可以将信用行为的可信度简单定义为违约成本与违约收益的比值（信用行为可信度＝违约成本/违约收益）。对于在区块链上发生的任何交易，我们都可以用此公式得出一个精确的结果 </p>
<p>尝试定义信用<br>比特币从诞生到现在已经在争议中走过了7年，在这样一个去中心化的经济系统内部，在没有任何可信的第三方担保的情况下，却没有发生过严重的欺诈行为，其主要原因在于，欺诈行为的成本往往远大于预期的收益。这也符合中本聪在创造区块链时的计算及预测[11]。显然，当欺诈行为所要付出的成本远大于其所能带来的收益，并且成本和收益都可以事先被精确计算时，任何一个理性的参与者都不会有欺诈的动力。 </p>
<p>从互联网到区块链<br>信息传递方式的跨越式发展给人们带来的不仅是某个行业和领域的改变，更是全人类社会组织形式和行为方式的深刻变革。一种司空见惯的说法是，互联网的核心精神是开放、共享、去中心化、自下而上、多元价值等，这些说法没错，但绝不是由于互联网的出现才产生的，而是因为市场这只看不见的手导致人类社会本身就有这种天然倾向。技术的进步导致交流更为高效，这样的倾向也就被进一步放大。所谓互联网精神，只是由于拥有了新的信息传递工具，是人类行为的自然投射。 </p>
<p>从互联网到区块链<br>互联网是为了解决信息的高效传输而被发明的，在这个网络中，信息在全球范围内的点对点传输变得异常高效与廉价。然而，这种信息传输网络并没有对有价值的信息进行保护的内在机制，在网上复制、传播乃至篡改一条信息的成本几乎为零，我们无法点对点地传递带有所有权的信息。一些传统行业（比如唱片业、出版业）在互联网诞生后受到了很大冲击，就是这个特征带来的必然结果。虽然目前各国政府对网上内容的版权保护力度越来越大，但仍然很难从技术层面上杜绝侵权问题。 </p>
<p>从互联网到区块链<br>从电子货币的诞生与发展来看，虽然我们已经做到了让货币以数字化的形式高效流通，但这种数字化还相当初级。我们不得不依赖大量的第三方中介机构才能保障电子货币的流通，而这种形式不仅引入了中心化的风险，也提升了传输的成本 </p>
<p>从互联网到区块链<br>信用是制造货币的真正原材料。而区块链通过构造一个可以量化信用的经济系统，使得一个点对点的电子现金系统——比特币[1]的出现成为可能。或者说，区块链创造了一个数字化的、可以点对点传输价值的信用系统。 </p>
<p>从互联网到区块链<br>综上所述，我们可以看到，在传递信息的路径上，人类从文字开始，最终创造出了互联网这样高效的信息传递网络；为了传输价值，人类从货币开始，也必将创造出与互联网相匹配的价值传输网络。区块链的诞生，正是人类构建价值传输网络的开始。其实，跳出我们生存的时代，从更大的人类历史发展的尺度看，互联网与区块链的诞生也只有短短几十年的时间差而已，未来的考古工作者何尝不能说，人类同时发明了高效的信息传递网络和价值传输网络。 </p>
<p>区块链的诞生<br>万物源自比特。 </p>
<p>区块链的诞生<br>2008年9月，以雷曼兄弟的倒闭为开端，金融危机在美国爆发并向全世界蔓延。为应对危机，世界各国政府和中央银行采取了史无前例的财政刺激方案和扩张的货币政策并对金融机构提供紧急援助。这些措施同时也引起了广泛的质疑。 2008年10月31日下午2点10分，在一个普通的密码学邮件列表中，几百个成员均收到了自称是中本聪的人的电子邮件[6]，“我一直在研究一个新的电子现金系统，这完全是点对点的，无需任何可信的第三方”，然后他将收件人引向一个九页的白皮书，其中描述了一个新的货币体系。同年11月16日，中本聪发布了比特币代码的先行版本[7]。 </p>
<p>区块链的诞生<br>区块链作为比特币背后的技术架构，是随着比特币的出现而诞生的。因此，要讲区块链的诞生，我们就不得不从比特币的历史说起。 </p>
<p>区块链的诞生<br>所以在1992年夏天，一个由富有创意的数学黑客、公民自由主义者、自由市场的鼓吹者、天才程序员、改旗易帜的密码学家以及其他各种前卫人士组成的松散联盟开始创造、拼凑甚至是盗用加密技术，并将其植入网络之中。他们管自己叫“密码朋克”。 </p>
<p>区块链的诞生<br>密码朋克们的观点是：现代社会不断蔓延着对个人隐私和权利的侵蚀。他们互相交流着对这一问题的关注，并认为在数字时代保护隐私对于维持一个开放社会是至关重要的。这一理念在比特币中得到体现：去中心化的追求，对匿名的拥抱，自由主义的原则。 </p>
<p>区块链的诞生<br>亚当·贝克（Adam Back）是一位英国的密码学家，1997年，他发明了哈希现金（Hashcash）[2]，其中用到了工作量证明系统（Proof Of Work）。这个机制的原型可用于解决互联网垃圾信息，比如作为垃圾邮件问题的一个解决方案[3]。它要求计算机在获得发送信息权限之前做一定的计算工作，这对正常的信息传播几乎不会造成可以察觉的影响，但是对向全网大量散布垃圾信息的计算机来说，这些计算会变得不可承受。这种工作量证明机制后来成为比特币的核心要素之一。 </p>
<p>区块链的诞生<br>哈伯和斯托尼塔（Haber and Stornetta）在1997年提出了一个用时间戳的方法保证数字文件安全的协议[4]。对它的简单解释是，用时间戳的方式表达文件创建的先后顺序，协议要求在文件创建后其时间戳不能改动，这就使文件被篡改的可能性为零。这个协议成为比特币区块链协议的原型。 </p>
<p>区块链的诞生<br>戴伟（W Dai）是一位兴趣广泛的密码学专家，他在1998年发明了B-money[5]。B-money强调点对点的交易和不可更改的交易记录，网络中的每一个交易者都保持对交易的追踪。不过在B-money中，每个节点分别记录自己的账本，这不可避免地会产生节点间的不一致。戴伟为此设计了复杂的奖惩机制以防止节点作弊，但是并没有从根本上解决问题。中本聪发明比特币的时候借鉴了很多戴伟的设计，并和戴伟有很多邮件交流。 </p>
<p>区块链的诞生<br>哈尔·芬尼（Hal Finney）是PGP公司的一位顶级开发人员，也是密码朋克运动早期和重要的成员。2004年，芬尼推出了自己的电子货币，在其中采用了可重复使用的工作量证明机制（RPOW）。哈尔·芬尼是第一笔比特币转账的接受者，在比特币发展的早期与中本聪有大量互动与交流。由于身患绝症，哈尔·芬尼已于2014年去世。 </p>
<p>区块链的诞生<br>2009年1月3日，中本聪在位于芬兰赫尔辛基的一个小型服务器上挖出了比特币的第一个区块——创世区块（Genesis Block），并获得了首批“挖矿”奖励——50个比特币 </p>
<p>区块链的诞生<br>然而事实是，中本聪通过一个天才的发明——区块链，扫清了创造加密货币的最后障碍。于是，出乎大多数人的意料，比特币开始走上了一条不断成长与快速发展的道路。 </p>
<p>区块链的诞生<br>如今，比特币已经成为数字货币领域的翘楚，拥有数十亿美元的市值，但中本聪早已于2010年选择隐退。中本聪到底是谁是每一个关心比特币的人都感兴趣的话题，从《纽约客》到《新闻周刊》，媒体找到了数个自称是中本聪或者被认为是中本聪的人。但无一例外，这些发现都因为可信度不足遭到了读者甚至是中本聪本人的否定。中本聪是谁？也许我们永远不得而知。 </p>
<p>第1章 区块链是什么<br>这种奇特的货币制度其实并不难理解，雅浦岛的货币不是费币，而是其背后的一套由信用记录以及信用记录的清算构成的体系。费币只是用来记账的表征[2]。凯恩斯在他的《货币论》里表示：“福内斯的书让我们了解到，有一个民族对货币的观念可能比其他国家的人聪明得多。”[3] </p>
<p>第1章 区块链是什么<br>关于货币是什么的问题，在历史上有两种针锋相对的学说。货币金属论者认为货币与贵金属等同，货币必须具有金属内容和实质价值，货币的价值取决于贵金属的价值。货币名目论者则否定货币的实质价值，认为货币只是一种符号，一种名目上的存在。随着金本位制度的崩溃，目前世界上几乎所有国家的货币都已是信用货币，这场争论的结果也越来越清晰，货币名目论逐渐占据了统治地位。美国著名经济学家米什金在《货币金融学》中对货币的定义为：“货币或货币供给是任何在支付商品、劳务或偿还债务时被普遍接受的东西。”[6] </p>
<p>第1章 区块链是什么<br>从纸质的信用货币发展到目前广泛使用的电子货币，如信用卡、网上银行、手机银行等，进一步体现了记账货币的特点——当你通过网银给其他人转账的时候，没有发生任何物理货币的转移，只是银行里记账系统的账务发生了变化而已 </p>
<p>第1章 区块链是什么<br>比特币只是记账的表征，而区块链就是其背后的一套由信用记录以及信用记录的清算构成的体系 </p>
<p>天才的发明<br>因为账本上的内容必须是唯一的，所以就导致记账是一种天然的中心化的行为。在通信手段不发达的时代，这是必然的选择；在如今的信息时代，中心化的记账方式依然覆盖了社会生活的方方面面。然而，中心化的记账却有一些显而易见的弱点：一旦这个中心出现问题，如被篡改、被损坏，整个系统就会面临危机乃至崩溃。 一 </p>
<p>天才的发明<br>从设计记账系统的角度，要达成去中心化的目标，显然需要具备以下两个条件： 1）账本数据的存储必须是去中心化的，不能指定任何参与方拥有特殊的保存账本的权力，或者说，我们需要让所有参与方都平等地拥有保存账本的权力。 2）记账行为本身必须是去中心化的，不能指定任何参与方拥有特殊的记账权力，或者说，我们需要让所有参与方都平等地拥有记录账务数据的权力。 </p>
<p>天才的发明<br>从技术的角度看，区块链就是比特币的基础架构及实现方式。没有区块链，就不会有比特币。也就是说，我们谈论比特币的发明，与谈论区块链的发明是一回事。 </p>
<p>天才的发明<br>在所有参与方都可以保存账本的前提下，又让所有参与方都拥有记账的权力，必然会导致账本数据的不一致。这个道理很浅显：即使不考虑恶意的参与方，由于每个参与方所处的物理环境不同，因此接收到的账务信息不可能是完全一致的。而作为一个记账系统，数据的一致性是最基本要求，如果我们不能拥有一致的账本数据，大家记的账各不相同，那么整个记账系统无疑会乱作一团，也就没有任何价值了 </p>
<p>天才的发明<br>依据之前的分析，既然所有参与方同时记账会导致混乱，那么为了保证数据的一致性，我们就不得不选择让某个特定参与方拥有存储账本的权力或是记账的权力，然而这样，就会至少与上面的两个条件之一相违背……这似乎成了不可能解决的问题。 </p>
<p>天才的发明<br>一致性问题尤其是分布式系统的一致性问题是个很大的概念，也是计算机科学领域很早就在研究的内容 </p>
<p>天才的发明<br>分布式系统和去中心化系统并不是等同的概念，但是都要面对在缺乏信任的前提下如何取得一致的问题。 </p>
<p>天才的发明<br>在任何一个系统中，不一致的信息都会造成系统混乱。去中心化的系统没有中央管理机构，因而信息传播的一致性更成为关键的问题。下面我们看一下中本聪给出的解决方案到底是什么。 </p>
<p>天才的发明<br>如果区块链是一个实物账本，那么区块就相当于账本中的一页，区块中承载的信息就是这一页上记载的交易内容。 </p>
<p>天才的发明<br>那么，区块链是靠怎样的架构设计最终解决了去中心化记账的难题呢？竞争记账机制成为了解决问题的关键。 </p>
<p>天才的发明<br>所谓的竞争记账，就是以每个节点的计算能力（“算力”）来竞争记账权的一种机制。在比特币系统中，大约每十分钟进行一轮算力竞赛，竞赛的胜利者获得一次记账的权力，即向区块链这个总账本写入一个新区块的权力。这样，在一定时间内，只有竞争的胜利者才能完成一轮记账并向其他节点同步新增账本信息，这个过程就是区块产生的过程。 </p>
<p>天才的发明<br>计算能力只能决定赢得竞争的概率。为了便于理解，我们可以用彩票系统做一个形象的类比，算力高的节点相当于可以一次买很多张彩票的人，算力低的节点相当于一次只能买一张或是几张彩票的人。在一轮开奖中，一次买很多张彩票的人只是中奖概率更大，却并不是一定会中奖。 </p>
<p>天才的发明<br>那么，算力竞争是如何做到的？又由谁有权判定竞争的结果呢？区块链系统是通过一个称为“工作量证明”（Proof Of Work，POW）的机制完成的。举个形象的例子，比如要组装一批玩具，早上起来我给了你一些零件，晚上回来便看到玩具摆在桌上，虽然我没有从早到晚盯着你做玩具的过程，但我也能确定你确实做了这么多工作。这就是对工作量证明的简单理解——通过一个（人人都可以验证的）特定的结果，就能确认（竞争的）参与者完成了相应的工作量。关于POW的机制与实现细节会在下面的章节中详述。 </p>
<p>天才的发明<br>不过，算力竞争是要付出成本的，没有激励，节点就没有进行竞争的动力。在中本聪的设计里，每轮竞争胜出并完成记账的节点将可以获得系统给予的一定数量的比特币奖励[2]。这个奖励的过程同时也是比特币的发行过程[3]。节点不停地进行计算，以期获得系统发放的比特币。这种设计相当巧妙——它将竞争记账机制与货币的发行完美结合到一起，在引入竞争的同时，解决了去中心化货币系统中发行的难题。这个过程很像现实生活中黄金开采的过程，因此被人们形象地称为“挖矿”。 </p>
<p>天才的发明<br>最终，区块链通过构造一个以竞争-记账-奖励为核心的经济系统，解决了去中心化记账的难题。在这个系统中，每一个节点只需要根据自身利益行事，出于“自私”的目的进行的竞争，最终造就了保护系统安全的庞大算力基础，提升了系统的可靠性。比特币借助区块链打造了一个正向循环的经济系统，才使得其在没有强大的中心化机构或组织推动的情况下，自然地生长出来并发展壮大。 </p>
<p>共识机制与价值载体<br>共识机制是区块链技术的核心，它使得区块链这样一个去中心化的账本系统成为可能；而价值载体是区块链技术的潜力所在，它使得区块链技术的应用领域远不止数字货币。这两个核心因素是区块链内生能力得以扩展的关键。 </p>
<p>共识机制与价值载体<br>在中心化的结构体系中，系统的共识由中心决定，各参与方只需要服从这个中心即可，因此，共识的建立是极为高效的。而在去中心化的结构体系中，由于系统的各个参与方地位平等，当出现分歧的时候，如何达成共识就成了问题。 </p>
<p>共识机制与价值载体<br>市场经济是一个典型的去中心化系统，这个系统的共识机制就是市场经济制度。参与市场经济的每个主体都在遵守商业规则的基础上，按照实现自己利益最大化的原则行事，同时在客观上推动了整个市场的繁荣。“无形的手“推动了人们争取自身利益的行为，这些行为的结果则服务于更大的社会利益。正如亚当·斯密所说：“我们的晚餐并非来自屠宰商、酿酒师和面包师的恩惠，而是来自他们对自身利益的关切。” </p>
<p>共识机制与价值载体<br>然而对工作量证明机制也有一些批评。一个常见的指责是“浪费”能源，因为节点进行算力竞赛是要消耗电力的。目前，投入挖矿竞争的总算力已经接近1300P（注：引用自<a href="http://qukuai.com/pools，可以近似认为1P的算力能够实现每秒1015次哈希计算。），挖矿也因此成了能源密集型的行业（注：用目前主流的28nm矿机来估算的话，1300P算力每秒消耗的电力高达2.16×105kW。）。" target="_blank" rel="external">http://qukuai.com/pools，可以近似认为1P的算力能够实现每秒1015次哈希计算。），挖矿也因此成了能源密集型的行业（注：用目前主流的28nm矿机来估算的话，1300P算力每秒消耗的电力高达2.16×105kW。）。</a> </p>
<p>共识机制与价值载体<br>其中典型的是权益证明机制（Proof Of Stake，POS），以节点持有币的数量和时间来选择记账权 </p>
<p>共识机制与价值载体<br>从目前的实践看，工作量证明机制仍然是最为有效和可靠的去中心化共识机制。 </p>
<p>共识机制与价值载体<br>那么，未来是否会有更先进的技术来降低共识机制资源消耗呢？在我看来，对于更低成本甚至无成本的共识机制[3]的追逐，正如人类历史上对于永动机的追逐一样，是注定要失败的。虽然我们并不能说POW就是最好的去中心化共识机制，但是我真正想表达的是，当谈到区块链技术与共识机制时，我们应该知道天下没有免费的午餐。 </p>
<p>共识机制与价值载体<br>所谓公有链，是指比特币区块链这样的完全去中心化的、不受任何机构控制的区块链；而私有链[4]则是指存在一定的中心化控制的区块链。 </p>
<p>共识机制与价值载体<br>从本质上来说，私有链就是以牺牲部分去中心化的特性为代价，来换取对于区块链权限的一些特殊控制，并且可以使用比公有链更为高效、灵活、低成本的共识机制。我们认为，私有链确实有大量的场景可以对接现实世界的需求，有限的去中心化更容易达成共识，可以使交易速度更快、效率更高，并且可以提供更多受控的功能，比如，在特定场景下必要的交易回滚。去中心化与中心化并不是非此即彼，相反，它们之间是一种共生共存、互相依赖与结合的关系。在去中心化协议的基础上，可以衍生出各种中心化的服务，以适应不同行业及领域的个性化需求。比如，VPN（Virtual Private Network）就是一个在共用网络上构建专用网络的例子，该技术允许人们利用互联网现有的基础设施，构建有限且开放的专有网络，而[…] </p>
<p>共识机制与价值载体<br>因此，金融机构对私有链的兴趣更大。目前私有链最著名的例子是R3CEV公司牵头的区块链联盟，它已经吸引了全球四十多家大型银行的加入[5]，其中不乏美国银行、摩根大通等巨头的身影。 </p>
<p>共识机制与价值载体<br>显然，作为一个记账系统，区块链上面不仅可以记录数字形式的货币，也可以记录能用数字定义的其他任何资产，甚至，由于区块链上的价值转移可以通过脚本语言来完成，这意味着区块链上还可以定义更为复杂的交易逻辑。也就是说，除了数字货币，区块链还可以承载股权、债券、产权、版权、公证、合约、投票等可以用数字形式进行价值存储或转移的任何东西。 </p>
<p>共识机制与价值载体<br>区块链是一个制造信任的机器。在任何需要信任的领域，区块链都有用武之地。 </p>
<p>共识机制与价值载体<br>显然，比特币并不是唯一的基于区块链技术的数字货币。据统计，仅2015年，新发布的数字货币就有800余种。坊间笑称，发行新币最难的部分是起名字，因为常用的可以起名字的英文单词已经用完了。 </p>
<p>共识机制与价值载体<br>还有一些并不是简单的模仿，而是有自己的创新和专注的领域，这种类型的币我们称之为竞争币[7]。在数字货币的市值方面，尽管比特币遥遥领先，但之后诞生的莱特币、以太坊的市值都曾短暂地超过10亿美元。 </p>
<p>共识机制与价值载体<br>数字货币是目前区块链创造的使用最广泛也是受认可程度最高的一类应用。以比特币为代表的数字货币一度成为区块链的代名词。可以预期的是，即使在区块链广泛使用的未来，数字货币也仍然会是最为重要的区块链应用之一。 </p>
<p>共识机制与价值载体<br>寻求如何将区块链技术应用于华尔街。 </p>
<p>共识机制与价值载体<br>另外，由于区块链公开、透明、难以篡改的特点，利用区块链技术可以非常方便地为任何数字资产或有价值的信息实现比现有中心化结构更为可靠的存在性证明，以及各种形式现实资产的登记或转移。这方面的应用可以包括产权、版权、公证等诸多领域。 </p>
<p>当交易变得智能<br>这是一个质的变化。由于区块链的可编程属性，使得区块链上所能承载的就不仅仅是普通的交易，而是可以基于程序自动执行的智能交易。 </p>
<p>当交易变得智能<br>特币的多重签名技术就是使用脚本实现可编程交易的一个典型例子。其基本原理是，在系统里创建一个由多个人共同管理的账户，只有达到事先约定数量的人的同意，才能动用该账户的钱，并且这个过程是由系统本身保障执行的，不需要任何第三方介入。 </p>
<p>当交易变得智能<br>智能合约是计算机程序，所以很容易应用于其他需要的场景——增加更加细致的控制条件，完成更复杂的执行逻辑。这有点类似传统的合同，我们也可以认为，智能合约就是把合同以代码的形式搬到了区块链上，但这就带来了根本的区别：它不需要任何人监督合同的执行，订立合同的双方也无法在合同完成前单方面违约，一切都是按合同的约定自动执行的。相信随着区块链的普及和交易智能化的发展，它将会对未来的交易模式与商业结构带来巨大的影响。 </p>
<p>当交易变得智能<br>具体的实践来看，由于比特币的脚本语言并不是图灵完备[2]的，所以在扩展性上，比特币区块链目前所支持的资产定义和交易模式还比较有限 </p>
<p>当交易变得智能<br>目前，以太坊上的代币以太币（ETH）的市值已经达到了比特币的1/10，成为全球市值排名第二的数字货币[3]。 </p>
<p>将区块链连接起来<br>如果说共识机制与价值载体是区块链内生能力得以扩展的关键，那么以侧链技术为代表的、能够将不同区块链连接起来技术，就是区块链拓展外在结构的关键。 </p>
<p>将区块链连接起来<br>首先，比特币区块链的设计只考虑了比特币的交易，本身并不支持定义其他资产，或是定义复杂的交易逻辑。如果要添加新功能，就要对系统进行升级 </p>
<p>将区块链连接起来<br>然而困难在于，对于比特币这样的完全去中心化的系统，任何改变都需要获得社区的一致同意，以至于快速改变是异常困难的。 </p>
<p>将区块链连接起来<br>比特币的上述局限直接导致了部分竞争币的诞生，这些竞争币采用了不同的区块链，有着各自的特点和创新。但是，由于缺乏广泛的共识与信任，绝大部分基于新区块链的竞争币并不拥有类似比特币区块链这样在强大的算力保护下的稳定与安全，同时币值的稳定性也普遍较差。更重要的是，数字资产不能在不同的区块链间直接转移，这导致了价值的孤岛，正如同一个个不能互联互通的“局域网”一样。 </p>
<p>将区块链连接起来<br>为方便数字资产在不同区块链间互相转移，侧链（Sidechain）技术应运而生。简单地说，侧链就像是一条条通路，将不同的区块链互相连接在一起，以实现区块链的扩展。侧链完全独立于比特币区块链，但是这两个账本之间能够“互相操作”，实现交互。 </p>
<p>将区块链连接起来<br>本质上，区块链是不同数字价值的载体，而侧链技术则是连接不同区块链的通路。现在还不能断言最终成熟的侧链技术形态，甚至我们也不知道未来真正大规模应用于区块链间连接的技术是否会以“侧链技术”的名义出现，但侧链技术的理念及核心功能的发展与成熟是毋庸置疑的。 </p>
<p>区块链的未来<br>信息不对称（Information Asymmetry）是指参与交易的各方所拥有的可影响交易的信息不同[1]。一般而言，卖家比买家拥有更多关于交易物品的信息。由于互联网的出现，新一代的传播渠道和几乎瞬时的传播速度使人们可以更容易地得到想要的信息。今天，互联网之所以给商业社会带来了深刻的影响，正是由于它打破了信息的不对称。 </p>
<p>区块链的未来<br>然而，互联网对于信息不对称的打破还远不够彻底。在互联网上，我们有了统一的信息传输层，但是还没有统一的价值传输层。因此在进行交易（价值传输）的时候，我们仍然需要依赖大量的中介机构来保证价值的可靠存储和转移。这些中介机构的存在不仅降低了价值传输的效率，也增加了价值流通的成本。 </p>
<p>区块链的未来<br>基于互联网构建统一的价值传输层，即价值互联网的诞生，将是区块链发展及演进的必然结果。价值互联网的诞生将进一步打破信息不对称的壁垒，让以货币及数字资产为代表的数字化价值无需借助大量的中介机构，就能在全球范围内自由流动。这将让市场效率获得一次质的飞跃，甚至彻底改变目前的金融与经济格局。 </p>
<p>区块链的未来<br>本质上，互联网同区块链一样，也是个去中心化的网络，并没有一个“互联网中心”存在。不同的是，互联网是一个高效的信息传输网络，但并不关心信息的所有权，没有内生的、对有价值信息的保护机制；区块链作为一种可以传输所有权的协议，将会基于现有互联网协议架构构建出新的基础协议层。从这个角度看，区块链（协议）会和TCP/IP协议一样，成为未来互联网的基础协议之一。 </p>
<p>区块链的未来<br>未来区块链的结构也一定是分层的，不同层级、不同类型的区块链承担着不同的作用。我们认为，未来的区块链也将会在一个统一的底层协议基础上发展出各种各样的应用层协议，从而构建出多样化生态的价值互联网。 </p>
<p>区块链的未来<br>如同互联网的发展一样，区块链这种协议式的、需要大规模协作和参与的颠覆式技术，其崛起的周期将比大多数人预想的要长，而最终影响的范围和深度也会远远超出大多数人的想象。区块链未来发展的过程不会一帆风顺，可能会经历过热甚至泡沫阶段，也可能会经历低谷。但我相信，区块链作为数字化浪潮下一个阶段的核心技术，最终将会构建出多样化生态的价值互联网，从而深刻改变未来商业社会的结构与我们每个人的生活。 </p>
<p>数字货币产业链<br>像乔布斯重新定义了“苹果”一样，对数字货币爱好者来说，中本聪重新定义了“挖矿”“矿工”“矿机”。比特币的竞争记账过程是通过节点算力的竞争实现的。这个过程就是常说的“挖矿”，运行这些计算节点的人就是“矿工”，而这些计算的节点、矿工挖矿的工具就是所谓的“矿机”。 </p>
<p>数字货币产业链<br>显卡挖矿时代是比特币挖矿历史上最热闹的时期，以至于当时无论线上渠道还是线下卖场，高端显卡全部售罄。 </p>
<p>数字货币产业链<br>参与挖矿的模式也分成了两类，除了掌握较多财力和资源的矿工可以自建矿场，继续单独挖矿外，更多的矿工选择了加入“矿池”，采取联合挖矿的模式。 </p>
<p>数字货币产业链<br>单独挖矿不需要和别人分享你的收益，但是随着全网算力的不断上升，单独挖矿成功打包区块的概率在显著降低——尤其是在算力不够大的情况下。而加入一个矿池则可以增加竞争胜利的概率，但是收益要在所有矿池成员之间进行分配。 </p>
<p>数字货币产业链<br>矿池属于矿工的松散联盟，矿工们将挖矿资源汇集在一起，共享算力，同时通过一定的算法，矿池管理者收取一定的管理费，矿工按各自的算力占比分享挖矿收益[4]。 </p>
<p>数字货币产业链<br>人们一直在担心，如果单一矿池所占的算力超过了50%，系统就会面临51%攻击的威胁。Ghash.IO的算力占比就曾短暂地接近50%，之后，很多矿工自发撤离了这个矿池。不可否认的是，任何单一矿池所占的算力比例过大都是对系统的潜在威胁。 </p>
<p>数字货币产业链<br>然而，除了正常经营的云挖矿服务外，这也是最容易滋生欺诈的一种挖矿方式，Hashie.co、CloudHashing.com等提供的云挖矿服务就是前车之鉴[6]。 </p>
<p>数字货币产业链<br>比特币的存储是比特币使用过程中的一个核心环节。随着比特币走出极客圈子，走向普通大众，钱包服务也随之成为比特币产业中的重要一环 </p>
<p>数字货币产业链<br>虽然比特币客户端本身就有钱包的功能，但它不能跨平台使用，同时存在钱包的导入/导出对普通用户来说门槛过高的问题。由于区块数据本身越来越大[10]，因此将完整的比特币客户端作为钱包使用带来的不便也越来越多。因此，市场上出现了多种钱包服务，它们大致可以分为以下三类[11]。 </p>
<p>数字货币产业链<br>网页钱包。网页端钱包的好处是，不管使用什么设备，只要你能上网，就能使用它。而它的缺点也很明显，即将私钥暴露给第三方的风险相对较大。目前主流的在线钱包都使用了加密或者多重签名的措施以获取用户的信任。目前使用人群较多的在线钱包有Blockchain[12]和Coinbase[13]等。 </p>
<p>数字货币产业链<br>桌面钱包。桌面钱包可以分为全节点钱包和轻钱包，全节点钱包（如bitcoin-core钱包）同步所有的区块链数据（当前在50GB以上），完全去中心化；轻钱包（如MultiBit）只有简化支付验证功能（SPV），只维护与自己相关的区块链数据，使用起来更加轻便。 </p>
<p>数字货币产业链<br>硬件钱包。硬件钱包是专门用于存储私钥和进行支付的硬件设备，通常为存储大量的比特币而设计，比如Trezor、KeepKey等。 </p>
<p>数字货币产业链<br>他们接受比特币的过程绝大多数是通过比特币支付商来完成的。支付商将消费者支付的比特币转化为商家接受的法定货币，打入商家的相关账户，同时收取一定的手续费。对于传统行业的商家来讲，这种模式可以避免比特币行情波动带来的影响 </p>
<p>数字货币产业链<br>比特币系统本质上是分布式账本，对普通用户来讲查阅起来并不容易。因此为用户提供可靠便捷的数据服务也是比特币产业的重要一环，目前国外的Blockchain.info和国内的Qukuai.com是这方面较为领先的公司。 </p>
<p>互联网金融<br>金融科技主要是指互联网企业或高科技公司利用云计算、大数据、移动互联等新兴技术开展的低门槛金融服务 </p>
<p>互联网金融<br>互联网金融是一个谱系概念，涵盖从传统银行、证券、保险、交易所等金融中介和市场，到瓦尔拉斯一般均衡对应的无金融中介或市场之间的所有金融交易和组织形式[2]。 </p>
<p>互联网金融<br>互联网给金融业带来的变化是形式与手段的变化，而不是内涵或本质的变化。互联网金融并不会改变金融的本质。比如电子商务与传统生意间的关系：电子商务没有改变交易的本质，但通过打破信息不对称，提升了交易效率，降低了交易成本。 </p>
<p>互联网金融<br>联网金融是新技术条件下金融手段的演化，它并不会改变金融服务的内涵。首先，金融的核心功能不变。互联网金融与传统金融一样，都是在不确定的环境中进行资源的时间和空间配置，以服务实体经济。第二，互联网金融不会改变股权、债权、保险、信托等金融契约的内涵。第三，互联网金融不会改变金融风险、外部性等概念的内涵。风险指的仍是未来遭受损失的可能性，市场风险、信用风险、流动性风险、操作风险、声誉风险和法律合规风险等概念及其分析框架依然适用[4]。 </p>
<p>互联网金融<br>实际情况是，以现有的技术水平，还不足以支持互联网金融的进一步发展，我们需要依赖技术本身的发展与成熟。 </p>
<p>互联网金融<br>现实中之所以存在金融中介和市场，主要是由于信息不对称和交易成本等摩擦因素造成的。但随着互联网的发展，信息不对称的问题将大幅减少，交易成本将显著降低，互联网金融将逐渐逼近与瓦尔拉斯一般均衡相对应的无金融中介或市场情形。这是金融演变的内在逻辑[6]。 </p>
<p>互联网金融<br>所谓信息，就是传播中的知识差，这个差别包括信息的完整度和时间差[7]。造成信息不对称的原因主要有两种，一个是信息的传播渠道，另一个是个体间处理信息能力的不同。个体处理信息能力的不同是一种客观存在，我们存而不论。而信息传播渠道的进步（比如互联网的普及）则一直在降低信息不对称的程度。 </p>
<p>互联网金融<br>金融的本质在于资金的融通。然而，在金融市场，信息不对称是一个普遍的特征。信息不对称存在于传统金融业的方方面面，比如中央银行和商业银行之间的信息不对称，商业银行和企业之间的信息不对称，金融服务的参与各方之间的信息不对称等。常见的情况是信息不对称导致逆向选择[8]和道德风险，比如金融机构利用自身信息优势违规经营，或者企业骗贷、银行惜贷等。信息不对称还可能导致金融秩序混乱和货币市场的无效或低效运行，加大金融风险。 </p>
<p>互联网金融<br>信息是否对称直接制约市场的效率，应该说，互联网金融无法彻底解决信息不对称的问题，但是，它可以降低信息不对称的程度。互联网的核心精神是开放、共享、去中心化，而目标则是信息的高效流通。互联网金融最根本的意义是改善传统金融中信息不对称的问题。 </p>
<p>互联网金融<br>我们乐观地估计，互联网金融还需要20年才能成形，主要基于两点考虑。第一，互联网金融的发展速度主要取决于互联网技术的发展速度，而不是金融自身的发展速度。我们预计，20年后，互联网技术将在目前的基础上进一步大幅度降低金融活动中的交易成本，并解决信息不对称的问题。第二，20年后，伴随着互联网成长起来的这一代人将成为社会主流，他们的互联网使用习惯将极大地影响金融交易和组织形式。” </p>
<p>互联网金融<br>当前的经济环境下，还有很多打着互联网金融旗号的公司把民间灰色金融的问题移到了线上，而且波及了更多的人群（强大的渠道优势）。原本线上平台能够降低成本，就是因为减少了一些监管、托管和风控成本，现在由于环境的复杂化，各种监管的介入导致成本与传统方式几乎无异了。 </p>
<p>互联网金融<br>区块链能帮助金融行业有效地提升效率和降低风险。借助区块链对金融行业内部应用场景进行改造能带来诸多好处，概括而言主要包括两个方面[9]：一是降低成本和提升效率；二是降低风险。 </p>
<p>互联网金融<br>降低成本和提升效率。具体体现在以下几个方面：①减少多方沟通成本，譬如证券交易市场往往需要中央结算系统、证券公司、交易所和银行等多方参与和协调，成本过高，而区块链可以通过多重签名等技术实现一条龙服务，且信息可以共享，提升整个业务的协作效率；②减少人工劳动，提高自动化程度；③更快的结算周期，区块链交易被确认的过程就是清算、结算和审计的过程；④保存监管记录和审计痕迹，为监管、审计等提供便利。根据Santander InnoVentures的报告估计，到2020年，区块链可减少基础设施成本150亿~200亿美元。 </p>
<p>互联网金融<br>降低风险。具体体现在以下几个方面：①由于交易确认即完成清算和结算，因此大大降低了交易对手风险；②区块链将交易过程数字化，且进行完整记录，能有效控制欺诈、手工输入错误等操作风险；③由于区块链的分布式网络和共识机制的存在，也减少了金融企业受黑客攻击等系统风险。 </p>
<p>互联网金融<br>当然，我们还应该看到，即使在大家普遍认为区块链最能够发挥核心作用的金融领域，区块链也绝非万能的，它能解决的仅仅是底层交易的成本与效率问题。比如，区块链不能消除金融领域的固有风险。不过，基于区块链所产生的信用记录数据，结合大数据、人工智能等技术在金融领域的深入发展，将能有效提高风险定价与风险管理效率。 </p>
<p>互联网金融<br>目前区块链技术应用于金融领域的核心阻碍，在于基础设施不够成熟。也就是说，就当前而言，它给金融业带来的实际价值还没有那么大。但它已经给金融业的未来提供了一个巨大的想象空间。未来区块链技术的演进和互联网金融的进一步发展，将使我们有能力从本质上提升金融业的效率，创造新的价值连接方式和商业模式，这不仅仅是改造或替代现有的系统，而是一个更为宏大的未来。 </p>
<p>物联网与共享经济<br>从1995年互联网开始商业化运作，到今天已经过去了20年的时间。在这20年中，互联网给全世界带来了翻天覆地的变化。然而，在我看来，互联网带给人类社会的改变才刚刚开始，这估计会令不少人感到惊讶。物联网，这个在商业界备受关注而对于公众来说略显陌生的词汇，会将互联网的广度和深度向更高的层级推进，人类社会与数字世界将互相融合甚至难以区分。 </p>
<p>物联网与共享经济<br>物联网的定义包含了两层意思：其一，物联网是在互联网基础上进行延伸和扩展的网络，其核心和基础仍然是互联网；其二，该网络的用户端延伸和扩展到了任何物品与物品之间，可进行信息交换和通信，也就是物物相连。物联网通过智能感知、识别技术与普适计算等通信感知技术，广泛应用于网络的融合中，也因此被称为继计算机、互联网之后世界信息产业发展的第三次浪潮。 </p>
<p>物联网与共享经济<br>在传统的经济模式下，租赁行业的经营范围和经营模式都是比较单一的，如果想获得某个物品的使用权，绝大多数情况下要事先获得它的所有权。而共享经济的实质则是将人们进行交易的重心由取得物品的所有权向取得其使用权转移。物品使用权的灵活转移可以更充分地提高物品的利用效率，实现生产要素的社会化，促进经济更高质量地发展。 </p>
<p>物联网与共享经济<br>2013年3月9日，《经济学人》杂志在其封面文章第一次详细描述了“共享经济”[4]的场景，如今，出行住宿用Airbnb、用车用Uber，一个共享经济的时代正在来临，并且将重塑现在及未来的商业格局。 </p>
<p>物联网与共享经济<br>共享经济（Sharing Economy）是一种点对点的分享产品或者服务的使用权的经济模式 </p>
<p>物联网与共享经济<br>共享经济的实质是由所有权向使用权的转变。这一转变是经济效率提升的内在要求，而技术的发展水平则限制着共享经济能达到的高度。在现有的互联网条件下，共享经济的爆发仅仅是个开始，物联网的发展将成为拓展共享经济边界的原始技术驱动力，将使分享变得更加可靠、经济、便捷。甚至，杰里米·里夫金（Jeremy Rifkin）预言，物联网与共享经济的发展将导致一个零边际成本社会的诞生，我们熟知的资本主义社会将不复存在[5]。 </p>
<p>物联网与共享经济<br>然而，在物联网与共享经济的时代，各种产品都接入一个庞大的智能网络，交易的主要目的是产品使用权的流转，甚至网络中的每一个节点、每一个产品都可以同时承担交易对象和交易发起者的角色。因此，交易数量会呈几何级数增加。举个简单的例子，如果购买一辆汽车（取得所有权），那么在用它代步的这段时间里，交易一次就够了，而如果仅仅是获得流转中的使用权，那么我们需要每使用一次就进行一次交易。因此，物联网中会产生天文数字的交易频率和交易数量，相关的清结算系统要分秒不停地顺畅运转，这无疑会对相关的基础设施提出极大的挑战。这将是一个复杂的网络，复杂到任何一个中心化的机构都无法承担这样的任务。 </p>
<p>物联网与共享经济<br>互联网本身就是一个去中心化的网络，在物联网时代，较之现在，接入网络的节点数量会出现极大的增长，因此，未来的物联网一定是个自组织、自调节的系统。在这样的系统中进行信息和价值的交换，必然需要可靠的去中心化点对点价值传输网络。 </p>
<p>物联网与共享经济<br>区块链技术可以通过可靠的数学加密算法保护用户的隐私。区块链将使设备实现自我管理和维护，使整个系统变成一个去中心化自组织的体系。在这个体系中，可以实现无需信任的、点对点的价值传输，可以实现安全的分布式数据分享，进而构造出一个健壮且可扩展的物联网。 </p>
<p>物联网与共享经济<br>区块链技术实现去中心化的物联网。ADEPT平台由三个要素组成：区块链（智能合约）、Telehash（P2P信息发送）和BitTorrent（文件分享）。通过该平台 </p>
<p>新一代基础设施<br>基础设施要解决的核心问题是建立标准问题。在互联网早期，如果没有ISO、IEEE、W3C等这些组织对于标准建立的推动，大家的协议将很难统一，互联网也不会在全球迅速发展起来。而未来区块链的标准将会类似于互联网，它不是一个协议，而是一组协议，并且持续不断地进行丰富及改进。 </p>
<p>新一代基础设施<br>未来的价值互联网不可能是“某一条”或“某一种”区块链可以涵盖的，它必然是不同功能、不同特色的很多区块链共同形成的一个生态体系。 </p>
<p>新一代基础设施<br>谈到区块链基础设施的具体内容，我认为主要分两类：一类是区块链的研发与构建，这里的区块链是指适用于不同目的或不同行业的各种类型的区块链；另一类是区块链间的连接设施，这些设施可以实现不同区块链之间的互联互通，让价值可以自由流动 </p>
<p>本章结语<br>区块链+”是“互联网+”的升级版，它基于“互联网+”，正在试图进入各个行业，并将对未来经济产生巨大的影响。在我看来，“区块链+”的实质是在“互联网+”的基础上，进一步打破信息不对称，让市场交易的去中介化成为可能，进而带来交易效率的提升及社会成本的下降，并为市场经济中的各个行业与领域带来深刻的变革。 </p>
<p>第3章 区块链的应用场景<br>比特币采用的共识机制为工作量证明（POW），这也是第一个应用于区块链的共识机制。比特币区块链大约每10分钟生成一个新区块，同时生成新区块的节点获得比特币奖励，这也是比特币的发行过程。系统给予生成新区块的奖励每4年减半，最早为50个比特币/区块，目前为25个比特币/区块，在2016年7月即将再次减半为12.5个比特币/区块。通过这种方式，比特币的总量会在2140年达到2100万个的上限[1]。目前超过1700万个比特币已经产出。 </p>
<p>第3章 区块链的应用场景<br>犯罪的是人，而不是工具。应该看到，比特币只是一项新技术，本身不存在善恶。怎样使用新技术取决于人的选择，如果因为比特币被犯罪分子利用就反对甚至禁止比特币，那无异于因噎废食。 </p>
<p>第3章 区块链的应用场景<br>比特币是一个仍在发展过程中的新生事物，自然不是尽善尽美的。比如比特币目前每个区块的大小为1M，这就意味着，在当前的架构下，比特币系统每秒能承载的交易数量最大只有7笔。尽管人们对比特币应该承担的角色的定位并不相同，但无论它承担什么样的角色，作为一个结算网络、货币系统或是其他，一秒最多承载7笔交易都是不足的。 </p>
<p>第3章 区块链的应用场景<br>因此，对于比特币扩容的问题，社区进行了旷日持久的争论。直到今天，我们也不能说得到了大家都满意的结果。这其实暴露了两个方面的问题：一个是在比特币这样一个去中心化的系统中，避免分裂很重要，达成一致又很难；另一个是比特币在开发层面上，很难说是去中心化的。Core小组的技术实力毫无疑问是最强的，绝大部分节点使用Core版本的比特币客户端。但是权力总需要制衡，我们也希望看到更多有实力的开发组的出现。 </p>
<p>第3章 区块链的应用场景<br>基于工作量证明机制的竞争币主要是通过缩短交易确认时间使用户获得更好的体验，用更加复杂的算法实现更好的匿名性等。 </p>
<p>第3章 区块链的应用场景<br>简而言之，权益证明不要求节点进行一定量的计算工作，而要求节点拥有一定数量加密货币的所有权，才能参与记账的竞争。 </p>
<p>第3章 区块链的应用场景<br>点点币本身是工作量证明和权益证明相结合的。后续的很多竞争币都效仿了权益证明机制。 </p>
<p>第3章 区块链的应用场景<br>以太坊前期采用工作量证明机制，后期计划采用权益证明机制。 </p>
<p>众筹<br>众筹（Crowdfunding）是这样一种实践，它通过向很多人募集资金的方式来为一个项目或者企业提供支持。现在，众筹大多是通过互联网中介来进行的，是传统金融系统之外的一种替代金融形式。众筹有3种类型的参与者：项目发起人、项目投资人和众筹平台[1]。 </p>
<p>众筹<br>笼统地讲，众筹可以分为回报型众筹（Rewards Crowdfunding）和股权众筹（Equity Crowdfunding） </p>
<p>众筹<br>在众筹过程中，资助者需要确认他们的钱投到了项目发起者所说的目标上，而项目发起者需要确保所筹资金到账。众筹平台是这个关系的中间人：它连接两者，促进两者建立关系，但实际上不承担更多的受信责任，并不能保证资助者的资金被合理的使用。不管是项目发起者，还是众筹平台本身，他们的行为都无法做到彻底的公开透明。众筹平台能够生存的主要原因在于人们的信任 </p>
<p>众筹<br>区块链作为一种技术，不可能消灭人类的失信行为，却可以通过本身公开透明的特性，降低众筹过程中以及后续资金使用过程中的信息不对称水平，降低人们的信任成本。由于区块链可编程的特点，未来还可以在众筹过程中内置智能合约，这样就能真正做到资金的专款专用，让投资人没有后顾之忧。 </p>
<p>众筹<br>在区块链上可以发行货币，在不需要中央权威的情况下确定货币的所有权，类似地，区块链还可以承载任意类型的数字资产。因此，根据每个人支付的资金的多少来发行相应的代币[5]是在区块链上实现众筹的方式之一。理论上代币可以对应任何众筹的标的，可以是某个活动的入场凭证，也可以是未来某款产品或服务的使用权，甚至可以是一个定制版的“谢谢”。当然，这种代币最常见的形式还是作为投资某公司或产品，并获得收益的凭证。 </p>
<p>清算、结算与审计<br>区块链技术可以带来的好处 （1）增加透明度，降低信任成本 </p>
<p>清算、结算与审计<br>全球最大的会计师事务所之一德勤已经与5家创业公司合作建立了20种可行的区块链原型，这5家创业公司包括BlockCypher、Bloq、ConsenSys、Loyyal和Stellar。其中的4个原型在Consensus 2016区块链会议上进行实时演示。在银行业类别中，BlockCypher和ConsenSys两家创业公司正在帮助德勤在区块链上建立“数字银行”，虽然银行不会在区块链上从头开始建设，但是它们已经构建了不同的服务，Bloq致力于帮助德勤推出区块链保险产品，其余两家则专注于奖励等特殊使用场景。 </p>
<p>清算、结算与审计<br>2）过程自动化，较少中间环节 </p>
<p>清算、结算与审计<br>3）分布式账本，防御单点故障 </p>
<p>清算、结算与审计<br>（4）满足监管和审计的要求 </p>
<p>智能合约<br>根据区块链可编程的特点，人们可以将合同变成代码的形式放到区块链上，并在约定的条件下自动执行，这就是所谓的智能合约。这是一个宽泛的定义，然而却没有更精确的定义，越来越多的人在谈论智能合约，但这个术语的精确概念还要在进一步的讨论和实践中才能更加明确 </p>
<p>智能合约<br>智能合约是一段涉及资产与交易的代码，只有将它放到区块链上，才能有效防止“盗版”和“篡改”，因此，在区块链出现以前，智能合约没有大的发展，随着区块链技术的发展成熟，智能合约将大有用武之地。 </p>
<p>智能合约<br>智能合约是一种新的参与者之间达成共识的方式。它的执行不依赖任何组织和个人，它是自我执行的，违约甚至不可能发生。智能合约将成为全球经济的基本构建，任何人都可以使用这种方式参与经济活动，而不需要事前审查和承担高昂的预付成本。在传统的合同制订中，人们必须选择信任的人和机构，而智能合约则从许多经济交易中，移除了对第三方信任的必要。 </p>
<p>版权与许可<br>自互联网诞生以来，关于版权保护的相关争论就是经久不息的热点。一方面，我们看到，由于平等、公开、分享、协作的特点，互联网突破了地域的限制，极大地促进了知识的传播。人们从中得到的益处是不可估算的。另一方面，版权保护一直是互联网的痛点之一，尽管各国政府都在采取不同的措施，尽量完善互联网上的版权保护机制，但是盗版依然每时每刻都在发生，甚至一个作品被盗版的数量都可以成为它优秀程度的佐证，比如，现在大热的美剧《权力的游戏》就一直稳坐盗版播放榜单的第一位。 在互联网的环境中出生和成长的年轻人，只要他们想，几乎可以从互联网上免费获得任何想要的东西。因此总是有人不厌其烦地说，盗版之所以盛行，是因为人们天生不愿意合法地为互联网上的信息付费，哪怕是品质很[…] </p>
<p>版权与许可<br>区块链可以提供更好的解决方案，区块链不仅可以记录过往和现在发生的交易，如果愿意的话，它还可以用来登记和转移版权注册，无论是数字的还是实体的作品。 </p>
<p>版权与许可<br>（1）突破地域限制 </p>
<p>版权与许可<br>（2）更低的成本 </p>
<p>版权与许可<br>（3）更灵活的许可条件 </p>
<p>版权与许可<br>当知识产权登记的成本接近零时，则有可能诞生一个空前庞大的微知识产权交易市场。信息有价值，价值有归属，在区块链提供版权证明的大背景下，真的有可能实现盗版销声匿迹、天下无贼的理想。 </p>
<p>版权与许可<br>法律总是滞后于技术的发展，但是法律也总是会适应技术的发展，我们相信，在不久的将来，区块链上的数据指纹会和生物指纹一样，具有同等的法律效力。 </p>
<p>公证与记录<br>因此，公证[1]服务——为一个文件在特定时间点的存在提供公开的“存在性证明”——是区块链应用迅速发展的领域之一。区块链公证服务可以为任何文件生成不可改变的、准确的证明，证明其存在性和完整性 </p>
<p>公证与记录<br>区块链婚姻登记作为区块链公共登记的一个尝试，如果以后能得到推广和认可，至少能带来以下好处：更加透明、公平、自由，一些隐瞒和重婚的现象将无所遁形，使用智能合约还可以对婚姻生活中的房产、子女教育等诸多事宜做更多有创造性的约定。 </p>
<p>更多<br>在数据安全方面，甲骨文（Oracle）的高管Subramanian Iyer表示：各大公司通常会通过建立防火墙的方式来保护数据安全。但同时，这意味着，数据对于那些能够找到入口进入防火墙内的人来说，相当脆弱。然而，若使用区块链技术，除非所有的参与者达成一致，否则数据一旦被写入区块链就很难再被更改。这种方式完全颠覆了传统的防火墙模式，几乎可以将对数据动手脚的概率降低为零——从这个角度看，区块链对于不管是哪一个行业的数据安全来说，都有不可估量的价值[6]。 </p>
<p>更多<br>使用区块链技术，医院、医生、患者、保险公司等等相关各方都可以成为整个链条的一部分，从而降低人们之间的信任成本，减少医患纠纷和欺诈行为。将数据记录在区块链上，并使用相关的数字签名技术，只有当获得相关各方的许可的情况下，每个人的健康信息和医疗数据才能够被读取。这样，可以更好地规范患者健康数据的管理。 </p>
<p>更多<br>关于区块链的应用场景，我们的列举必然是不完全的。不过最重要的是，我们需要看到区块链未来有无限的可能。汇集更多人的聪明才智，才能使区块链得到更快的发展。新时代的大幕已经缓缓拉开，期待着更多的角色走上前台。人们有理由期待在区块链技术范式下，又一次“大航海时代”的来临，人类这次也许将收获更多。 </p>
<p>第4章 区块链技术原理<br>比特币区块链大量采用了现有的技术。公钥密码学、P2P网络、时间戳服务器、工作量证明，这些技术无一不是人类智慧的结晶。比特币正是站在这些巨人的肩膀上，才得以发展壮大。要了解区块链的技术细节，就必须深入理解这些技术在比特币区块链中是如何工作的。 </p>
<p>密码学基础<br>而对于比特币加密系统使用的哈希函数，它需要额外具备以下的性质： 1）免碰撞，即不会出现输入x≠y但是H（x）=H（y）的情况，也就是强抗冲突性。 2）隐匿性，也就是说，对于一个给定的输出结果H（x），想要逆推出输入x，在计算上是不可能的。 3）不存在比穷举更好的方法，以使哈希结果H（x）落在特定的范围。 </p>
<p>密码学基础<br>密码学伴随着密码分析学的发展而发展。按算法思想的革新可划分为3大阶段：古典密码学、现代密码学和公钥密码学 </p>
<p>密码学基础<br>密码学算法的安全性被攻破有两个可能：一是算法本身的漏洞，不需要密钥即可以破解算法；二是在可接受的时间范围内暴力破解 </p>
<p>密码学基础<br>对称加密有一个最大的弱点：甲方必须把密钥告诉乙方，否则乙方无法解密。而保存和传递密钥，就成了最头疼的问题。 </p>
<p>密码学基础<br>人们认识到，加密和解密可以使用不同的规则，只要这两种规则之间存在某种对应关系即可，这样就避免了直接传递密钥。基于这种公钥机制的思想，开始出现了一系列非对称加密算法。 </p>
<p>密码学基础<br>非对称加密需要两个（一对）密钥：公开密钥（Publickey）和私有密钥（Privatekey），用公钥对数据进行加密后，只有对应的私钥才能解密；反之，如果私钥用于加密，则只有对应的公钥才能解密。通信双方无须交换密钥，就可以建立保密通信。 </p>
<p>密码学基础<br>哈希函数（Hash Function）也称为散列函数，是能计算出一个数字消息所对应的、长度固定的字符串（又称消息摘要）的算法 </p>
<p>区块链组成<br>区块链数据里最基本也是重要的几个概念是地址、交易、区块、网络。比特币用地址来标识一笔交易的支出方和接收方。所有的交易最终需要被记到统一的账本上，而这个账本是通过区块确认并完成的。每一个新区块的产生，都会被打上时间戳，最终生成按照时间前后排列并加以记录的电子交易证明。每个独立节点之间又通过比特币网络来建立联系，这样就组成了一个去中心化、分布式的电子交易记录时间戳服务器系统。 </p>
<p>区块链组成<br>比特币通过构造这个分布式时间戳服务器来解决双重支付问题。中本聪在其白皮书中曾提到：只要诚实的节点所控制的计算能力的总和，大于有合作关系的（Cooperating）攻击者的计算能力的总和，比特币系统就是安全的[1]。 </p>
<p>区块链组成<br>在比特币体系里，经常提到地址，这多少让人有些费解，公钥算法用到的是私钥与公钥，跟地址有什么关系？椭圆曲线签名算法里的私钥由32字节随机数组成，通过私钥可以算出公钥，公钥经过一系列哈希算法及编码算法就得到了比特币中的地址。因此地址其实是公钥的另一种表现形式，可以理解为公钥的摘要。 </p>
<p>区块链组成<br>交易的运作图如下。 </p>
<p>区块链组成<br>脚本机制对于区块链来说非常重要，它类似于区块链技术提供的一个扩展接口，任何人都可以基于这个接口去开发基于区块链技术的应用，比如智能合约的功能。脚本机制也让区块链技术作为一项底层协议成为可能。未来很多基于区块链的颠覆性应用，都可能是通过区块链的脚本语言来完成的。 </p>
<p>区块链组成<br>在比特币网络中，交易和区块信息的传播是通过洪水算法（Flooding Algorithm）进行的。简单地说，就是每一个收到信息的节点，向与它相连的所有节点推送该信息。下一个收到信息的节点继续这个过程，信息很快就会像洪水一样覆盖全网络。可见，传播速度是呈指数增长的。通常在一两秒内，交易或者区块的信息就可以传遍全网。 </p>
<p>区块链组成<br>节点始终都将最长的链条作为正确的链条，在它的基础上持续工作并延长它。如果有两个节点同时广播不同的基于上一个区块的新区块，那么其他节点在接收到该区块的时间先后上将存在差别。在此情形下，它们将在率先收到的区块基础上进行工作，但也会保留另外一个链条，以防后者变成最长的链条。该僵局的打破要等到下一个区块（工作量证明）被发现，当其中的一条链条被证实为是较长的一条时，在另一条分支链条上工作的（挖矿）节点将转换阵营，开始在较长的链条上工作。 </p>
<p>区块链组成<br>所谓“新交易的广播”，实际上不需要抵达网络中的全部节点，只要交易信息能够抵达足够多的节点，它们将很快被整合进一个新的区块中。而区块的广播对被丢弃的信息进行容错处理。如果一个节点没有收到某特定区块，那么该节点将会发现自己缺失了该区块，就会向较长链的节点发出下载该缺失区块的请求。 </p>
<p>共识算法<br>工作量证明需要有一个目标值。比特币工作量证明的目标值（Target）的计算公式如下： 目标值=最大目标值/难度值 其中，最大目标值为一个恒定值：0x00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF </p>
<p>共识算法<br>新共识算法的发明常常是源于对工作量证明能源消耗的优化及对专业矿机挖矿的抵制，很多人都在寻找任意节点（通过GPU或者是CPU，也就是一台计算机）都可以参与整个网络挖矿的方法。以太坊发明了自己的挖矿算法ethash来抵制专业芯片的矿机，同时宣称将会以POW+POS的机制来运行整个区块链网络。 另外，大量的私有链都尝试采用或发明了不同的共识算法。有限的去中心化，使得我们可以采用更为高效且低成本的共识算法。而类似于比特币区块链这样的公有链，由于需要达成所有节点完全平等、自由加入等特性的完全去中心化，相应的一定规模的资源消耗几乎是必然的 </p>
<p>共识算法<br>要想整个P2P网络维持一份相同的数据，同时保证每个参与者的公平性，整个体系的所有参与者必须要有统一的协议，也就是我们这里要讲的共识算法。比特币所有的节点都遵循统一的协议规范。协议规范（共识算法）由相关的共识规则组成，这些规则可以划分为两个大的核心：工作量证明与最长链机制。所有规则（共识）的最终体现就是比特币的最长链。共识算法的目的就是保证比特币不停地在最长链条上运转，从而保证整个记账系统的一致性和可靠性。 </p>
<p>共识算法<br>工作量证明（POW）可简单地理解为一份证明，用来确认你做过一定量的工作。监测工作的整个过程通常是极为低效的，而通过对工作的结果进行认证来证明完成了相应的工作量，则是一种非常高效的方式。比如现实生活中的毕业证、驾驶证等，也是通过检验结果的方式（通过相关的考试）取得证明。 </p>
<p>共识算法<br>哈希现金[3]是一种工作量证明机制，它是亚当·贝克（Adam Back）在1997年发明的，用于抵抗邮件的拒绝服务攻击及垃圾邮件网关滥用。在比特币之前，哈希现金被用于垃圾邮件的过滤，也被微软用于Hotmail/Exchange/Outlook等产品中（微软使用一种与哈希现金不兼容的格式，并将之命名为电子邮戳）。 </p>
<p>共识算法<br>工作量证明系统的主要特征是客户端需要做一定难度的工作得出一个结果，验证方却很容易通过结果来检查客户端是不是做了相应的工作。这种方案的一个核心特征是不对称性：工作对于请求方是适中的，对于验证方则是易于验证的。它与验证码不同，验证码的设计出发点是易于被人类解决而不易被计算机解决[4]。 </p>
<p>共识算法<br>比特币网络中使用的工作量证明函数正是前文提及的SHA-256。已经讲过区块的数据结构，但并未具体描述区块的产生过程。区块其实就是在工作量证明环节产生的。矿工通过不停地构造区块数据，检验每次计算出的结果是不是满足工作量，从而判断该区块是不是符合网络难度。区块头即为比特币的工作量证明的输入数据。 </p>
<p>共识算法<br>难度值是矿工们挖矿的重要参考指标，它决定了矿工大约需要经过多少次哈希运算才能产生一个合法的区块。比特币的区块大约每10分钟生成一个，如果要在不同的全网算力条件下，新区块的产生都基本保持这个速率，难度值必须根据全网算力的变化进行调整。简单地说，难度值被设定在无论挖矿能力如何，新区块产生速率都保持在10分钟一个。 </p>
<p>共识算法<br>目标值的大小与难度值成反比。比特币工作量证明的达成就是矿工计算出来的区块哈希值必须小于目标值。 </p>
<p>共识算法<br>比特币的工作量证明，就是我们俗称“挖矿”所做的主要工作。理解工作量证明机制，将为我们进一步理解比特币区块链的共识机制奠定基础。 </p>
<p>共识算法<br>计算结果表明，不管攻击者算力在整个网络的占比是多少，随着区块链里区块确认数增加，发生双重支付的概率就越来越低。只有当你的算力占比比较高的时候才有成功的可能，而这个其实又可以通过增加确认数来避免。如果支付方与接收方调整相应的参数作为交易的条件，比如规定N个确认才算交易完成，那么区块链的双花问题在这个体系下变得异常困难 </p>
<p>共识算法<br>历史上的诸多事件证明，除了共识算法，社区成员的理性选择，也同样是维护整个区块链体系安全的保障。 </p>
<p>侧链技术<br>侧链技术的核心在于与主链之间建立起桥梁。这一技术又被形象地称为楔入，按楔入的实现方式，可将其划分为多种类型，这里主要了解双向楔入和联合楔入<br>所有摘录来自<br>张健. “区块链：定义未来金融与经济新格局.” iBooks.<br>此材料受版权保护。 </p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="http://i1.piimg.com/567571/473944d51f13444e.png" alt=""></p>
<p><a href="http://www.steven7.top/">Steven`s Notes</a> by <a href="http://www.steven7.top/about.html">Steven</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.  </p>
<p>由<a href="http://www.steven7.top/about.html">裴士超</a>创作并维护的<a href="http://www.steven7.top">斯蒂芬</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me" target="_blank" rel="external">Steven`s Notes</a>博客（ <a href="http://www.steven7.top">http://www.steven7.top</a> ），版权所有，侵权必究。</p>
<hr>
<p>本文永久链接：<a href="http://www.steven7.top/2017/01/17/2017-3.html">http://www.steven7.top/2017/01/17/2017-3.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[快速搭建属于自己的wiki]]></title>
      <url>http://www.steven7.top/2017/01/16/2017-2.html</url>
      <content type="html"><![CDATA[<p><img src="http://p1.bpimg.com/1949/e4a675db979e09ad.jpg" alt="Markdown"></p>
<a id="more"></a>
<p>本文参考博文如下：</p>
<p><a href="http://www.jianshu.com/p/78e9e1b8553a#" target="_blank" rel="external">如何用 ReadtheDocs、Sphinx 快速搭建写书环境</a></p>
<p><a href="http://www.cnblogs.com/youxin/p/3594161.html" target="_blank" rel="external">文档整体解决方案(readthedocs、github 、sphinx)使用</a></p>
<p>今天闲来无事，前几天刚好看到了<em>geekplus</em>的wiki，有点小心动，自己也想有一个类似于那样的wiki。</p>
<p>然后今天开始探索了一下下。就如上面引用链接中所提到的工具一样，我探索到的结果就是使用sphinx搭建自己的wiki，只不过readthedocs这个主题比较漂亮罢了，单独拿出来说一下。</p>
<p>一下操作步骤均为windows操作环境</p>
<h2 id="安装-Sphinx"><a href="#安装-Sphinx" class="headerlink" title="安装 Sphinx"></a>安装 Sphinx</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install sphinx</div></pre></td></tr></table></figure>
<h2 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">md wiki </div><div class="line">sphinx-quickstart</div></pre></td></tr></table></figure>
<p>输入<em>sphinx-quickstart</em>命令之后，会有很多的操作提示，基本上按回车就好了，但是具体的项自己看着办吧</p>
<h3 id="配置（conf-py）"><a href="#配置（conf-py）" class="headerlink" title="配置（conf.py）"></a>配置（conf.py）</h3><p>如果没有什么特殊需要，我觉得 Sphinx 没啥好配的，改个主题就好了，个人极其喜欢ReadtheDoc的主题。很简单，把 conf.py 里面的这句：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">html_theme = &apos;alabaster&apos;</div></pre></td></tr></table></figure>
<p>换成</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">html_theme = &apos;sphinx_rtd_theme&apos;</div></pre></td></tr></table></figure>
<h3 id="将-Sphnix-生成的文档和配置-push-到远程-github"><a href="#将-Sphnix-生成的文档和配置-push-到远程-github" class="headerlink" title="将 Sphnix 生成的文档和配置 push 到远程 github"></a>将 Sphnix 生成的文档和配置 push 到远程 github</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">➜  BookData git init</div><div class="line">➜  BookData git add .</div><div class="line">➜  BookData git commit -m &quot;sphinx start&quot;</div><div class="line">➜  BookData git remote add origin https://github.com/[yourusename]/[yourrepository].git</div><div class="line">➜  BookData git push origin master</div></pre></td></tr></table></figure>
<p>注意：[yourusename]/[yourrepository] 换成你的 github 名和仓库名。</p>
<h2 id="导入到-ReadtheDocs"><a href="#导入到-ReadtheDocs" class="headerlink" title="导入到 ReadtheDocs"></a>导入到 ReadtheDocs</h2><ul>
<li>GitHub 里选择仓库，然后依次点击 Setting =&gt; Webhooks &amp; Service =&gt; Add service =&gt; ReadTheDocs,激活这个选项。</li>
<li>到 ReadtheDocs import 这个仓库，导入成功后，点击阅读文档，便可看到 Web 效果了。</li>
</ul>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>基本上就可以看了，具体的wiki里面咋写东西之类的，我还没有搞。</p>
<p>但是感觉这个也好麻烦啊，还是感觉现在的写博客的方式比较简单，瞬间三分钟的热情就木有了。<img src="http://p1.bqimg.com/1949/0c3db4e866a70f01.png" alt="Markdown"></p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="http://i1.piimg.com/567571/473944d51f13444e.png" alt=""></p>
<p><a href="http://www.steven7.top/">Steven`s Notes</a> by <a href="http://www.steven7.top/about.html">Steven</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.  </p>
<p>由<a href="http://www.steven7.top/about.html">裴士超</a>创作并维护的<a href="http://www.steven7.top">斯蒂芬</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me" target="_blank" rel="external">Steven`s Notes</a>博客（ <a href="http://www.steven7.top">http://www.steven7.top</a> ），版权所有，侵权必究。</p>
<hr>
<p>本文永久链接：<a href="http://www.steven7.top/2017/01/16/2017-2.html">http://www.steven7.top/2017/01/16/2017-2.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[回首2016，展望2017]]></title>
      <url>http://www.steven7.top/2017/01/15/2017-1.html</url>
      <content type="html"><![CDATA[<p><img src="http://i1.piimg.com/1949/cded92faa38cd4e0.jpg" alt="Markdown"></p>
<a id="more"></a>
<p>2016年过去的飞快，实在是没什么感觉。2016年经历了好多，开年的实习，4月份的毕业旅行，5月份的毕设，6月份的本科毕业，7月份的练车，9月份的研究生入学，然后就是紧接着的研究生学习阶段，然后就莫名其妙的一年过去了。这一年总感觉有些不甘和些许的疲倦。</p>
<p>毕业的事情要说的实在是太多太多。但是又不知道从何说起。毕业的那几波散伙饭，以及那几场宿醉，总感觉还是不够，还有很多的话没说，还有很多的事没做。</p>
<p>毕业之后，2016年仿佛就已经过了大半。但是那时还没啥感觉，就觉得时间还有很长，想做的事还有的是时间，想做的事还有的是机会。自从研究生入学以来，开始看看感觉，tmd的以前根本就是在扯皮，想做的事tm的根本没有时间，也根本没有啥机会。每天重复着上不完的课，做不完的作业，以及聊着扯不完的蛋。每天的目标仿佛都是好好生活，好好工作。但是实际的效果往往都是：今天到底干了些啥子。真的要说仔细想一想研究生这半年你到底干了些啥，我是真的说不出个一二三。上上课做做作业扯扯皮，也就是这么多吧。</p>
<p>暂且不说研究生生活到底是种怎么的体验，我感觉我tmd的过了个大五，还是那种书呆子般生活的大五，可能比起我大学4年来学的都要累，学的都要苦。没有市中生活的潇洒，没有市中生活的那么放纵。更多的就是早起图书馆上自习，晚上回来嗨一嗨继续第二天这种枯燥无味的生活。习惯成自然，慢慢的也就适应了，没感觉有啥不一样的。</p>
<p>研究生这半年下来，让我懂得了2件事吧。</p>
<p>一是比你厉害的人比你还努力，你还有啥理由不好好干。</p>
<p>二是好人真的能带来好运吧。</p>
<p>第一个道理总结出来的原因是因为真的在这个地方比我厉害的人太多太多了，总感觉我和他们之间的这种差距真的不是一朝一夕可以弥补的。还有他们那种对学习的认真态度，我感觉我已经在尽力的模仿了，还是模仿不来。</p>
<p>第二个道理我纠结了半天我也不知道该起啥名字比较好。就这样吧！这样我就想点名煌神了。研究生这半年以来最最崇拜的吧。</p>
<p>总感觉煌神应该是在被什么眷顾着，一切的事情在煌神的面前总是那么的顺其自然。学习努力导致学习成绩好。做事坚持导致事后必有果。做事认真导致结果还挺让人满意的。真的煌神的成果在我这总是能对应到想要的原因上面。煌神太屌了。</p>
<p>说了很多，该吃午饭了。2016年就这样过去了。2017我来了。希望给我带来一些好运吧。</p>
<p>说一说我2017的心愿单吧。</p>
<p>去一次蹦极，虽然我恐高，但是我真的想体验那种要死不死的感觉。</p>
<p>见一次老同学，去一下长沙见见雷哥和小杰。去一下上海？（暂定吧）。想去一次韩国（虽然韩语和日语是我最讨厌的语种），但是这是我答应吕毅的哩，暂且计划着吧。</p>
<p>旅游，去一次西藏或者内蒙吧，我想感受一下大草原。把心放空。去一下青岛或者北戴河。我想感受大海。想一想就挺美的哈</p>
<p>去找个妹子吧，总是当电灯泡总是不太好。</p>
<p>好好上课吧，不要再上课玩耍，考前复习了。</p>
<p>最后，感觉2017给爸妈2017吧，的确一直在索取没怎么付出过，一个月攒一点钱，最后年关的时候给爸妈打过去，也算是一点心意吧。</p>
<p>对自己好一点，2017健健身，买点好衣服，把自己搞得帅一点。(｡･∀･)ﾉﾞ嗨说多了都是泪</p>
<p>2017，^(*￣(oo)￣)^祝大家开开心心每一天撒</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="http://i1.piimg.com/567571/473944d51f13444e.png" alt=""></p>
<p><a href="http://www.steven7.top/">Steven`s Notes</a> by <a href="http://www.steven7.top/about.html">Steven</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.  </p>
<p>由<a href="http://www.steven7.top/about.html">裴士超</a>创作并维护的<a href="http://www.steven7.top">斯蒂芬</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me" target="_blank" rel="external">Steven`s Notes</a>博客（ <a href="http://www.steven7.top">http://www.steven7.top</a> ），版权所有，侵权必究。</p>
<hr>
<p>本文永久链接：<a href="http://www.steven7.top/2017/01/15/2017-1.html">http://www.steven7.top/2017/01/15/2017-1.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[雁栖湖国科大羽毛球记事]]></title>
      <url>http://www.steven7.top/2016/09/11/%E9%9B%81%E6%A0%96%E6%B9%96%E5%9B%BD%E7%A7%91%E5%A4%A7%E7%BE%BD%E6%AF%9B%E7%90%83%E8%AE%B0%E4%BA%8B.html</url>
      <content type="html"><![CDATA[<p><img src="http://i4.buimg.com/567571/78f44e2866932549.png" alt=""></p>
<a id="more"></a>
<p>昨天下过雨，夜里的雷轰轰的一直响个没完。但是好像并不能影响我这只倒头就睡的单身狗。昨天晚上约好了的明早要一起打球。所以我呼噜呼噜的就睡觉了….(～﹃～)~zZ</p>
<p>天亮了,闹钟还没响…我被吓醒了，我以为时间早就过去了..赶快起身打开手机，看了下时间。发现6：45。突然心放下了…不能约好的时间放人鸽子吧！！然后就又眯了一会会儿。7：00起身洗漱上厕所之类的。在她们楼底下等着果然等到了。</p>
<p>我们先去吃饭，然而羽毛球拍我并没有拿着…因为老大还没有醒….拿别人的球拍总感觉不是那么自然。我还借了好几次。心想这次最后一次吧…..我想着吃饭回来老大应该醒了==我就可以拿球拍了。然而发现老大还没醒，我敲了敲门，心想只能先斩后奏了…实在是我的错。但是我不想错过约好的局。于是，还是拿了球拍下去了。</p>
<p>果然，就如昨天想的那样我们约好的打羽毛球今天还是打了。</p>
<p>今天打得挺开心…我们一直都是血虐对面，一直占据优势。感觉我们的混双组合稳了。打下去对面组合之后，户长大人换上场了，可能还是长时间没打，比较生疏，很多球跑掉了。再接一个高远球的时候，突然崴到了脚。就开始了今天的医院之旅。</p>
<p>不是说胖纸一般运气都不会差哟！经过校医务室的敷冰深谈，然后到怀柔医院的拍片之旅，了解了关于她们的更多…户长大人的脚也算是有了个答复。幸运的是木有事。还好一天的忙碌没有白费。不过，苦命了户长大人的钱包，CT竟然要700多。简直吓死宝宝了。今天好好休息，就是对所有忙碌的人最好的嘱托吧。:-D</p>
<p>聪聪这个名字，大学同学-叶聪聪、研究生同学-黄聪聪。<code>Best wishes to you</code></p>
<p>户长大人的脚早儿康复…..还想着约聪聪和你一起打球呐:-D</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="http://i1.piimg.com/567571/473944d51f13444e.png" alt=""></p>
<p><a href="http://www.steven7.top/">Steven`s Notes</a> by <a href="http://www.steven7.top/about.html">Steven</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.  </p>
<p>由<a href="http://www.steven7.top/about.html">裴士超</a>创作并维护的<a href="http://www.steven7.top">斯蒂芬</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me" target="_blank" rel="external">Steven`s Notes</a>博客（ <a href="http://www.steven7.top">http://www.steven7.top</a> ），版权所有，侵权必究。</p>
<hr>
<p>本文永久链接：<a href="http://www.steven7.top/2016/09/11/雁栖湖国科大羽毛球记事.html">http://www.steven7.top/2016/09/11/雁栖湖国科大羽毛球记事.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[对于计算机开机过程的一些看法]]></title>
      <url>http://www.steven7.top/2016/09/08/%E5%AF%B9%E4%BA%8E%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BC%80%E6%9C%BA%E8%BF%87%E7%A8%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9C%8B%E6%B3%95.html</url>
      <content type="html"><![CDATA[<p><img src="http://i1.piimg.com/567571/76e4a9900a7717ae.png" alt=""></p>
<a id="more"></a>
<p>对于大多数学计算机或者是非科班出身的童鞋，大多对于计算机的开机过程大致只了解到按下计算机电源开关的程度。我们对于计算机到底是如何开启的，如何<code>boot</code>的，了解的并不是很多。今天我就这些问题做一些小小的探讨。说的不对或者不好的地方尽情拍砖…</p>
<h4 id="系统引导"><a href="#系统引导" class="headerlink" title="系统引导"></a>系统引导</h4><p>其实对于操作系统我们有太多的未知。只能说前人实在是太腻害了。我们从按下计算机开关的那一刻开始慢慢的捋一捋思绪。</p>
<p>首先借鉴<a href="http://www.ruanyifeng.com/blog/2013/02/booting.html" target="_blank" rel="external">阮一峰的网络日志</a>中的一个问题：<code>boot</code>怎么理解？</p>
<p><code>boot</code>原本为靴子的意思。启动和靴子的关系是什么呐…这就扯到一门谚语了：</p>
<blockquote>
<p><code>&quot;pull oneself up by one&#39;s bootstraps&quot;</code></p>
</blockquote>
<p>中文解释为：拽着鞋带把自己提起来。有点常识的童鞋都知道这是不可能的。这和计算机的启动过程其实有相似的地方：必须首先运行程序才可以启动计算机，但是计算机不启动就无法运行程序。好矛盾..好纠结是不是…</p>
<p>上述烧脑问题解答：操作系统是由进程叠加而成的。然而进程是由进程创建而来。进程由进程创建而来..而来..来…所以万事必有一个根才可以。否则就陷入了无限循环的哲学问题了。所以，对于进程来说，规定了进程0为所有进程的上帝。进程0创建了进程1，进而一而再再而三的创建其他进程。所以，对于计算机启动而言也一定有相同的体系。首先我们必须要硬性规定一个起始程序。目前，我们通过探讨已经知道必须首先启动一个程序了。然而我们怎么启动这个程序那？想要启动一个程序，首先必须将这个程序装入内存吧…我们怎么才能把这个起始程序装入内存呐..这就回到了问题的关键–系统引导。</p>
<p>我们把：从用户按下计算机电源开关开始，到操作系统运行起来这段时间被称为“系统引导”。由上文可知，其实引导过程对于操作系统来说是至关重要的一环。因为木有引导，操作系统无法运行。</p>
<p>那么问题又来了：当我们按下计算机电源开关之后，到底是谁在工作那？这里我们又要贯穿一下计算机硬件相关的知识了==（<a href="http://www.cnblogs.com/BoyXiao/archive/2010/11/20/1882716.html" target="_blank" rel="external">寄存器相关</a>）。</p>
<p><strong>CS 寄存器 和 IP 寄存器：</strong></p>
<p>CS:IP 两个寄存器指示了 CPU 当前将要读取的指令的地址，其中  CS  为代码段寄存器，而   IP  为指令指针寄存器 。</p>
<p>那么问题又来了：什么叫做指示了 CPU 当前将要读取的指令呢？在 8086  CPU 中，为什么  CPU  会自动的执行指令呢？</p>
<p>这些指令肯定是存放在内存中的，但是  CPU  怎么知道这些指令存放在内存的那个位置呢？</p>
<p>比如，我有下面的两条指令要执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">MOV AX,1234H</div><div class="line">MOV BX,AX</div></pre></td></tr></table></figure>
<p>而假设这两条指令在内存中存放为：</p>
<p><img src="http://i4.buimg.com/567571/47976157fd6ff294.png" alt=""></p>
<p>很显然， 1000H:0000H 指向的是  MOV  AX，1234H  的首地址，如果 CPU 要读取到我的指令的话，很显然，必须要知道地址  1000H:0000H ，然后  CPU  就可以根据这个首地址，将汇编指令<strong>MOV  AX，1234H</strong>  所对应的机器码读入到  CPU  的指令寄存器中，最后便可以在  CPU  中进行处理了。</p>
<p>但关键是   CPU  如何知道我的  1000H:0000H  这个首地址？其实这就需要使用到  CS:IP  这个寄存器组了 。当我们运行一个可执行文件时，很明显，我们需要另外一个程序来将这个可执行文件加载到内存当中，关于这个加载可执行文件的程序，我们在这里不管他，点一下即可，一般是通过操作系统的外壳程序（也就是传说中的  Shell  程序），Shell  将可执行文件加载到内存中以后，就会设置  CPU  中的两个寄存器，即设置  CS:IP  两个寄存器指向可执行文件的起始地址，此后  CPU  便从这个起始地址开始读取内存中的指令，并且执行，比如我们在写汇编程序时，通常会使用  START  标记，其实这个标记就是用来标记起始地址的，当将一个汇编程序编译，连接成可执行文件以后，再通过操作系统的  Shell  程序将可执行文件加载到内存中以后，这个  START  所标记处的地址就是整个可执行文件的起始地址了 。</p>
<p><strong>也就是说，当一个可执行文件加载到内存中以后，CS:IP  两个寄存器便指向了这个可执行文件的起始地址，然后CPU  就可以从这个起始地址开始往下读取指令，当读取完指令后，CS:IP  将会自动的改变，基本上是改变  IP ，从而指向下一条要读取的指令，这样就可以执行这个可执行文件了 。</strong></p>
<p><strong>最后再对  CS:IP  总结一下：</strong></p>
<ol>
<li>你想让  CPU  执行哪行指令，你就让  CS:IP  指向保存有指令的那块内存即可。</li>
<li>任何时候，CS:IP  指向的地址中的内容都是  CPU  当前执行的指令。</li>
</ol>
<p>通过上述了解CS 和 IP 寄存器之后，我们就可以探索下面的问题了。</p>
<p>在用户按下计算机电源开关之后，CPU会自动的将其CS寄存器设定为0xFFFF，将其IP寄存器设定为0x0000。由于CS:IP指出了下一条指令的地址，因此CPU会跳到0xFFFF:0x0000处进行执行。为什么是这个地址而不是其它地址呢？这其实是一个很巧妙的设计。</p>
<p>我们接下来以8086为例，8086是16位的CPU，但是却有20根地址线。也就是说可以寻址2的20次幂=1M内存空间。（2的10次幂=1K，2的32次幂=4G，2的30次幂=1G）这段内存空间由RAM、ROM组成。ROM是随机自读存储器，里面的程序是在计算机出厂的时候直接烧死在里面的。<strong>它保存着计算机最重要的基本输入输出的程序、开机后自检程序和系统自启动程序，它可从CMOS中读写系统设置的具体信息。</strong>其主要功能是为计算机提供最底层的、最直接的硬件设置和控制。被称为BIOS（”Basic Input Output System”-基本输入输出系统）。 不同的硬件厂商这段程序也会随着机型的不同而不同。</p>
<p>正是因为这个原因：有可能A厂出产的计算机所带的这段程序的大小为1K，而B厂出产的这段程序的大小为2K。</p>
<p>如果将这段程序放在0x0000处，那么用户写的程序就可能从0x0400处开始也可能从 0x0800处开始，非常不统一。故而，将此段程序放在1M内存的顶部，那么用户写的程序就都可以从0x0000处开始了。</p>
<p>但将BIOS这段程序放在1M内存的顶部，如果这段程序大小为1K，那么应当从0xFFC00开始放。如果这段程序的大小为2K，那么应当从0xFF800开始放，对于CPU而言，到底是应当从0xFFC00开始执行还是应当从0xFF800开始执行呢？为了解决这个问题，8086规定，CPU均从0xFFFF0处开始执行，而在0xFFFF0处，放一条无条件转移指令JMP。如果A厂的BIOS是从0xFFC00开始放的，那么这条转移指令就跳转到0xFFC00处开始执行。如果B厂的BIOS是从0xFF800开始放的，那么这条转移指令就跳转到0xFF800处开始执行，各个厂家可以跟据自己所生产的BIOS程序的大小，来决定此转移指令具体跳转到的位置。</p>
<p>　这里有一点需要清楚的是，通常认为，内存编址是连续的，不会出现空洞，其实完全不是这样。比如，假设BIOS的编址是从 0xF0000开始，而RAM，即通常讲的内存编址是从0x00000开始，那么，如果用户只安装了32K内存，那么内存的编址范围就是 0x00000~0x07FFF，那么从0x08000至0xEFFFF处就没有安装内存，这就是一个内存空洞。</p>
<p>当CPU执行了放在0xFFFF0处的第一条指令后，就跳转到BIOS程序内部去执行了，下面就来看看BIOS都做了些什么。</p>
<p>BIOS的工作相当简单，主要的工作就是执行主机自检（POST）。</p>
<p>如果硬件出现问题，主板会发出不同含义的蜂鸣，启动中止。如果没有问题，屏幕就会显示CPU、内存、硬盘灯信息。</p>
<p>自检完成后，然后查找操作系统存在在哪个磁盘上，将操作系统载入。BIOS需要有一个外部存储设备的排序，排在前面的设备就是优先转交控制权的设备。这种排序叫做“启动顺序”。BIOS在查找各磁盘的操作系统时，主要是查找磁盘上的第一个扇区（0面0磁道1扇区），每个扇区是512字节，如果这是一个引导扇区，那么就将它载入0x7C00的内存地址 上，然后跳转到此地址上执行。如果此不是一个引导扇区，就继续查找下一个磁盘，看其上面是否存在引导扇区。如果所有的磁盘上都不存在引导扇区，则在屏幕上 打印出一条出错信息。（如果这512个字节的最后两个字节是0x55和0xAA，表明这个设备可以用于启动；如果不是，表明设备不能用于启动，控制权于是被转交给”启动顺序”中的下一个设备。）</p>
<p>这时，计算机的控制权就要转交给硬盘的某个分区了，这里又分成三种情况。</p>
<table>
<thead>
<tr>
<th>情况分类</th>
<th>情况分析</th>
</tr>
</thead>
<tbody>
<tr>
<td>卷引导记录</td>
<td>四个主分区里面，只有一个是激活的。计算机会读取激活分区的第一个扇区，叫做”卷引导记录”。”卷引导记录”的主要作用是，告诉计算机，操作系统在这个分区里的位置。然后，计算机就会加载操作系统了。</td>
</tr>
<tr>
<td>扩展分区和逻辑分区</td>
<td>计算机先读取扩展分区的第一个扇区，叫做”扩展引导记录”。它里面也包含一张64字节的分区表，但是最多只有两项（也就是两个逻辑分区）。计算机接着读取第二个逻辑分区的第一个扇区，再从里面的分区表中找到第三个逻辑分区的位置，以此类推，直到某个逻辑分区的分区表只包含它自身为止（即只有一个分区项）。因此，扩展分区可以包含无数个逻辑分区。&lt;很少用这种方式&gt;</td>
</tr>
<tr>
<td>启动管理器</td>
<td>计算机读取”主引导记录”前面446字节的机器码之后，不再把控制权转交给某一个分区，而是运行事先安装的<a href="http://en.wikipedia.org/wiki/Boot_loader#Modern_boot_loaders" target="_blank" rel="external">“启动管理器”</a>（boot loader），由用户选择启动哪一个操作系统。Linux环境中，目前最流行的启动管理器是<a href="http://en.wikipedia.org/wiki/GNU_GRUB" target="_blank" rel="external">Grub</a></td>
</tr>
</tbody>
</table>
<p>　引导扇区只有一扇区即512字节大，因此它的主要目的是把操作系统的内核读进内存，然后跳转到操作系统内核处开始执行。从编写操作系统角度来说，前面的CPU上电及BIOS的工作都不是操作系统能控制的，而从引导扇区开始，就完完全全可由操作系统来控制了，因此，编写引导扇区也是编写操作系统必要的工作之一。从BIOS跳入引导扇区后，计算机系统引导工作就算完成，怎样把操作系统内核读进内存，然后再安排一条跳转指令跳到内核处执行就是操作系统开发人员的工作了。</p>
<hr>
<p>512字节的主引导记录：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">　　（1） 第1-446字节：调用操作系统的机器码。</div><div class="line">　　（2） 第447-510字节：分区表（Partition table）。</div><div class="line">　　（3） 第511-512字节：主引导记录签名（0x55和0xAA）。</div></pre></td></tr></table></figure>
<p>硬盘分区有很多好处。考虑到每个区可以安装不同的操作系统，”主引导记录”因此必须知道将控制权转交给哪个区。<br>分区表的长度只有64个字节，里面又分成四项，每项16个字节。所以，一个硬盘最多只能分四个一级分区，又叫做”主分区”。<br>每个主分区的16个字节，由6个部分组成：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">　  （1） 第1个字节：如果为0x80，就表示该主分区是激活分区，控制权要转交给这个分区。四个主分区里面只能有一个是激活的。</div><div class="line">　　（2） 第2-4个字节：主分区第一个扇区的物理位置（柱面、磁头、扇区号等等）。</div><div class="line">　　（3） 第5个字节：主分区类型。</div><div class="line">　　（4） 第6-8个字节：主分区最后一个扇区的物理位置。</div><div class="line">　　（5） 第9-12字节：该主分区第一个扇区的逻辑地址。</div><div class="line">　　（6） 第13-16字节：主分区的扇区总数。</div></pre></td></tr></table></figure>
<p>最后的四个字节（”主分区的扇区总数”），决定了这个主分区的长度。也就是说，一个主分区的扇区总数最多不超过2的32次方。<br>如果每个扇区为512个字节，就意味着单个分区最大不超过2TB。再考虑到扇区的逻辑地址也是32位，所以单个硬盘可利用的空间最大也不超过2TB。如果想使用更大的硬盘，只有2个方法：一是提高每个扇区的字节数，二是增加扇区总数。</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="http://i1.piimg.com/567571/473944d51f13444e.png" alt=""></p>
<p><a href="http://www.steven7.top/">Steven`s Notes</a> by <a href="http://www.steven7.top/about.html">Steven</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.  </p>
<p>由<a href="http://www.steven7.top/about.html">裴士超</a>创作并维护的<a href="http://www.steven7.top">斯蒂芬</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me" target="_blank" rel="external">Steven`s Notes</a>博客（ <a href="http://www.steven7.top">http://www.steven7.top</a> ），版权所有，侵权必究。</p>
<hr>
<p>本文永久链接：<a href="http://www.steven7.top/2016/09/08/对于计算机开机过程的一些看法.html">http://www.steven7.top/2016/09/08/对于计算机开机过程的一些看法.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[printf函数实现]]></title>
      <url>http://www.steven7.top/2016/09/06/printf%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0.html</url>
      <content type="html"><![CDATA[<p><img src="http://i4.buimg.com/567571/eae0cc18aa7647f4.png" alt=""></p>
<a id="more"></a>
<p>同样也是操作系统的课堂上面，老师说让写一下如何实现<code>printf</code>函数。所以想了解一下<code>printf</code>函数的实现原理。首先，在<code>The C Programming Language</code>第7章7.3小节：变长参数表中，作者以实现<code>printf</code>的一个最简单版本为例，介绍了如何以可移植的方式编写可处理变长参数表的函数。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">minprintf</span><span class="params">(<span class="keyword">char</span> *fmt,...)</span></span>&#123;</div><div class="line">va_list ap;</div><div class="line"><span class="keyword">char</span> *p,*sval;</div><div class="line"><span class="keyword">int</span> ival;</div><div class="line"><span class="keyword">double</span> dval;</div><div class="line"></div><div class="line">va_start(ap,fmt);</div><div class="line"><span class="keyword">for</span>(p=fmt;*p;p++)&#123;</div><div class="line">        <span class="keyword">if</span>(*p != <span class="string">'%'</span>)&#123;</div><div class="line">            <span class="built_in">putchar</span>(*p);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">switch</span>(*++p)&#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'d'</span>:</div><div class="line">        ival = va_arg(ap,<span class="keyword">int</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,ival);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'f'</span>:</div><div class="line">        dval = va_arg(ap,<span class="keyword">double</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%f"</span>,dval);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'s'</span>:</div><div class="line">        <span class="keyword">for</span>(sval = va_arg(ap,<span class="keyword">char</span> *);*sval;sval++)</div><div class="line">            <span class="built_in">putchar</span>(*sval);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">        <span class="built_in">putchar</span>(*p);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    va_end(ap);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于重点在于如何处理参数，所以<code>minprintf</code>重点在于处理字符串和参数。</p>
<p>通过查询<code>Linux</code>  <code>C</code> <code>API</code>参考手册可以得知：</p>
<p><code>printf</code>：格式化输出数据</p>
<p>表头文件：<code>#include&lt;stdio.h&gt;</code></p>
<p>定义函数：<code>int printf(const char *format,...);</code></p>
<p>省略号表示参数表中参数的数量和类型都是可变的。省略号只能出现在参数表的尾部。因为<code>minprintf</code>函数不需要像<code>printf</code>函数一样返回实际输出的字符数。因此，我们将它声明为以下形式：</p>
<p><code>void minprintf(const char *format,...);</code></p>
<p>编写<code>minprintf</code>函数的关键在于如何处理一个甚至连名字都不知道的参数表。</p>
<p>可喜的是，标准头文件<code>&lt;stdarg.h&gt;</code>中包含一组宏定义，C语言用宏来处理这些可变的参数。它们定义了如何遍历参数列表。这些宏看起来炒鸡复杂。</p>
<p>其原理：根据参数入栈的特点从最靠近第一个可变参数的固定参数开始，依次获取每个可变参数的地址。</p>
<p><a href="http://blog.csdn.net/holandstone/article/details/6947119" target="_blank" rel="external">stdarg.h详解</a>                     </p>
<p>本文概要总结其实现原理：</p>
<p>下面以函数<code>fun()</code>为例进行讲解：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span></div><div class="line"> &#123;</div><div class="line">       <span class="keyword">int</span> d;</div><div class="line">       ...</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>正常情况下C语言的函数参数的入栈规则为<code>_stdcall</code>,它是由右至左的，即函数的最右端的参数最先入栈。即入栈的顺序为：<code>c-b-a-d</code></p>
<p>其栈结构如下：</p>
<p>​    <code>0x1ffc--&gt;d</code></p>
<pre><code>`0x2000--&gt;a`

`0x2004--&gt;b`

`0x2008--&gt;c`
</code></pre><p>对于32位的系统最小的栈单元为<code>sizeof(int)</code>。函数的每个参数都至少占一个栈单元。因此，函数的所有参数都是存储在线性连续的栈空间中的，基于这种存储结构，这样就可以从可变参数函数中必须有的第一个普通参数来寻址后续的所有可变参数的类型及其值。</p>
<p>对于固定参数列表的函数，我们可以直接通过&amp;a得到a的地址。并且通过函数原型声明得到a的数据类型。</p>
<p>然而，对于变长参数列表的函数，我们无法采用上述方法。按照C标准可知，</p>
<blockquote>
<p>支持变长参数的函数在函数原型声明中，必须有至少一个最左固定参数。</p>
</blockquote>
<p>我们便可以通过其中的固定参数的地址。但是无论函数到底有多少个参数、以及每个参数到底是什么类型的，它们都和固定参数的传参过程是一致的，都是栈操作。如此，我们就可以推导出其他变长参数的位置。</p>
<p>因为栈的延伸方向为从高地址到低地址，栈底占据着最高的内存地址，先入栈的参数，地理位置最高。所以对于可变参数列表的函数 <code>void var_args_func(const char * fmt, ... )</code> 来说可以得到结论：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">first_vararg.addr = fmt.addr + x_sizeof(fmt); <span class="comment">// x_sizeof !=sizeof</span></div><div class="line"></div><div class="line">second_vararg.addr = first_vararg.addr + x_sizeof(first_vararg);</div><div class="line"></div><div class="line">......</div></pre></td></tr></table></figure>
<p>上述结论得出的如此的简单粗暴。根据这一结论实现以下算法：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">var_args_func</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * fmt, ...)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span>    *ap;</div><div class="line"></div><div class="line">    ap = ((<span class="keyword">char</span>*)&amp;fmt) + <span class="keyword">sizeof</span>(fmt);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *(<span class="keyword">int</span>*)ap);</div><div class="line"></div><div class="line">    ap =  ap + <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *(<span class="keyword">int</span>*)ap);</div><div class="line"></div><div class="line">    ap =  ap + <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, *((<span class="keyword">char</span>**)ap));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    var_args_func(<span class="string">"%d %d %s\n"</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">"hello world"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>期望结果如图所示：</p>
<p><img src="http://i4.buimg.com/567571/c308e26957b9a8b6.png" alt=""></p>
<p>上图是我在<code>Code::Blocks</code>编译器的运行结果</p>
<p><a href="http://c.biancheng.net/cpp/html/1117.html" target="_blank" rel="external">VC6.0中文版下载（支持XP、Win7、Win8、Win10）</a></p>
<p><a href="https://sourceforge.net/projects/codeblocks/files/Binaries/16.01/Windows/codeblocks-16.01mingw_fortran-setup.exe/download" target="_blank" rel="external">Code::Blocks下载</a></p>
<p>通过上述讲解我们已经可以明白C语言是如何处理可变参数列表的了。接下来我们就来探讨一下如何实现简单的可变参数的C语言函数。</p>
<p>想要了解可变参数列表函数的实现首先需要分析的是<code>stdarg.h</code></p>
<p><code>stdarg.h</code>源代码</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">#define __va_rounded_size(TYPE)  \</div><div class="line">  (((sizeof (TYPE) + sizeof (int) - 1) / sizeof (int)) * sizeof (int))</div><div class="line"></div><div class="line">#if __GNUC__ &lt; 2</div><div class="line"></div><div class="line">#ifndef __sparc__</div><div class="line">#define va_start(AP, LASTARG)                                           \</div><div class="line"> (AP = ((char *) &amp;(LASTARG) + __va_rounded_size (LASTARG)))</div><div class="line">#else</div><div class="line">#define va_start(AP, LASTARG)                                           \</div><div class="line"> (__builtin_saveregs (),                                                \</div><div class="line">  AP = ((char *) &amp;(LASTARG) + __va_rounded_size (LASTARG)))</div><div class="line">#endif</div><div class="line"></div><div class="line">void va_end (va_list);          /* Defined in gnulib */</div><div class="line">#define va_end(AP)</div><div class="line"></div><div class="line">#define va_arg(AP, TYPE)                                                \</div><div class="line"> (AP += __va_rounded_size (TYPE),                                       \</div><div class="line">  *((TYPE *) (AP - __va_rounded_size (TYPE))))</div><div class="line"></div><div class="line">#else    /* __GNUC__ &gt;= 2 */</div><div class="line"></div><div class="line">#ifndef __sparc__</div><div class="line">#define va_start(AP, LASTARG)                         \</div><div class="line"> (AP = ((char *) __builtin_next_arg ()))</div><div class="line">#else</div><div class="line">#define va_start(AP, LASTARG)                    \</div><div class="line">  (__builtin_saveregs (), AP = ((char *) __builtin_next_arg ()))</div><div class="line">#endif</div><div class="line"></div><div class="line">void va_end (va_list);        /* Defined in libgcc.a */</div><div class="line">#define va_end(AP)</div><div class="line"></div><div class="line">#define va_arg(AP, TYPE)                        \</div><div class="line"> (AP = ((char *) (AP)) += __va_rounded_size (TYPE),            \</div><div class="line">  *((TYPE *) ((char *) (AP) - __va_rounded_size (TYPE))))</div><div class="line"></div><div class="line">#endif    /* __GNUC__ &gt;= 2 */</div><div class="line"></div><div class="line">#else    /* not __GNUC__ */</div><div class="line"></div><div class="line"></div><div class="line">typedef char *va_list;</div><div class="line"></div><div class="line">#define __vasz(x)        ((sizeof(x)+sizeof(int)-1) &amp; ~(sizeof(int) -1))</div><div class="line"></div><div class="line">#define va_start(ap, parmN)    ((ap) = (va_list)&amp;parmN + __vasz(parmN))</div><div class="line">#define va_arg(ap, type)      \</div><div class="line">  (*((type *)((va_list)((ap) = (void *)((va_list)(ap) + __vasz(type))) \</div><div class="line">                            - __vasz(type))))</div><div class="line">#define va_end(ap)</div><div class="line"></div><div class="line"></div><div class="line">#endif /* __GNUC__ */</div><div class="line"></div><div class="line">#endif /* _STDARG_H */</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>行号</th>
<th>解析</th>
</tr>
</thead>
<tbody>
<tr>
<td>8</td>
<td>使用<code>typedef</code>进行了一个声明：<code>typedef char *va_list;</code></td>
</tr>
<tr>
<td>14</td>
<td>定义了用于编译器的内存对齐宏</td>
</tr>
<tr>
<td>17</td>
<td>#<code>if __GNUC__ &lt; 2</code>，进行<code>GCC</code>的版本判断，看当前版本是否大于2</td>
</tr>
<tr>
<td>20</td>
<td>使得ap指向函数中的第一个无名参数的首地址的宏</td>
</tr>
<tr>
<td>31</td>
<td><code>va_arg</code>宏使得<code>ap</code>指向下一个参数，已经处理了内存对齐，其中参数的类型为<code>TYPE</code></td>
</tr>
<tr>
<td>48</td>
<td><code>va_end</code> 与<code>va_start</code>成对使用.</td>
</tr>
</tbody>
</table>
<p>由此可知，如果想要写一个简单的可变参数列表的函数需要用到以下宏：</p>
<p><code>void va_start( va_list arg_ptr, prev_param );</code><br><code>type va_arg( va_list arg_ptr, type );</code><br><code>void va_end( va_list arg_ptr );</code></p>
<p>通过开篇给出的例子可知使用可变参数的步骤应如下：</p>
<p>（1）首先在函数中定义一个<code>va_list</code> 变量</p>
<p>（2）然后使用<code>va_start</code>初始化该变量，该宏返回的结果是第一个无名参数的首地址（该宏的第二个参数为可变参数列表中的固定参数）</p>
<p>（3）使用<code>va_arg</code>依次获取可变参数列表中的可变参数。（该宏的第二个参数为想要返回参数的参数类型）</p>
<p>（4）最后使用<code>va_end</code>结束参数获取</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="http://i1.piimg.com/567571/473944d51f13444e.png" alt=""></p>
<p><a href="http://www.steven7.top/">Steven`s Notes</a> by <a href="http://www.steven7.top/about.html">Steven</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.  </p>
<p>由<a href="http://www.steven7.top/about.html">裴士超</a>创作并维护的<a href="http://www.steven7.top">斯蒂芬</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me" target="_blank" rel="external">Steven`s Notes</a>博客（ <a href="http://www.steven7.top">http://www.steven7.top</a> ），版权所有，侵权必究。</p>
<hr>
<p>本文永久链接：<a href="http://www.steven7.top/2016/09/06/printf函数实现.html">http://www.steven7.top/2016/09/06/printf函数实现.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[atoi函数实现]]></title>
      <url>http://www.steven7.top/2016/09/06/atoi-algorithm-implementation.html</url>
      <content type="html"><![CDATA[<p><img src="http://i1.piimg.com/567571/7117cd662881209d.png" alt=""></p>
<a id="more"></a>
<p>操作系统课上，老师提出了一个问题：</p>
<blockquote>
<p>当我们通过键盘输入10000的时候，我们是通过键盘打出字符‘1’、‘0’、‘0’、‘0’、‘0’的。然而系统可以将其识别为数字10000。似不似感觉炒鸡神奇。老师给我们提示了一个函数：<code>atoi</code></p>
</blockquote>
<p>通过查询C语言API得知<code>atoi()</code>函数如下：</p>
<p><code>atoi()</code>函数用来将字符串转换成整数<code>(int)</code>，其原型为：</p>
<p><code>int atoi (const char * str);</code></p>
<p>【函数说明】atoi() 函数会扫描参数 str 字符串，跳过前面的空白字符（例如空格，tab缩进等，可以通过 <a href="http://c.biancheng.net/cpp/html/120.html" target="_blank" rel="external">isspace()</a> 函数来检测），直到遇上数字或正负符号才开始做转换，而再遇到非数字或字符串结束时(‘\0’)才结束转换，并将结果返回。</p>
<p>【返回值】返回转换后的整型数；如果 str 不能转换成 int 或者 str 为空字符串，那么将返回 0。</p>
<p>温馨提示：</p>
<p>ANSI C 规范定义了 <a href="http://c.biancheng.net/cpp/html/124.html" target="_blank" rel="external">stof()</a>、<a href="http://c.biancheng.net/cpp/html/125.html" target="_blank" rel="external">atoi()</a>、<a href="http://c.biancheng.net/cpp/html/126.html" target="_blank" rel="external">atol()</a>、<a href="http://c.biancheng.net/cpp/html/128.html" target="_blank" rel="external">strtod()</a>、<a href="http://c.biancheng.net/cpp/html/129.html" target="_blank" rel="external">strtol()</a>、<a href="http://c.biancheng.net/cpp/html/130.html" target="_blank" rel="external">strtoul()</a> 共6个可以将字符串转换为数字的函数，大家可以对比学习。另外在 C99 / C++11 规范中又新增了5个函数，分别是 atoll()、strtof()、strtold()、strtoll()、strtoull()，在此不做介绍，请大家自行学习。</p>
<p>范例如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* atoi example */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>      <span class="comment">/* printf, fgets */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span>     <span class="comment">/* atoi */</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">int</span> i;</div><div class="line">  <span class="keyword">char</span> buffer[<span class="number">256</span>];</div><div class="line">  <span class="built_in">printf</span> (<span class="string">"Enter a number: "</span>);</div><div class="line">  fgets (buffer, <span class="number">256</span>, <span class="built_in">stdin</span>);</div><div class="line">  i = atoi (buffer);</div><div class="line">  <span class="built_in">printf</span> (<span class="string">"The value entered is %d. Its double is %d.\n"</span>,i,i*<span class="number">2</span>);</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Output:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Enter a number: 73</div><div class="line">The value entered is 73. Its double is 146.</div></pre></td></tr></table></figure>
<p>通过了解<code>atoi()</code>函数之后可以发现，要想实现<code>atoi()</code>函数要注意一下问题：</p>
<ul>
<li>跳过前面的空白字符</li>
<li>遇到数字或字符号要开始转换</li>
<li>再遇到非数字或字符串结束时结束转换</li>
<li>异常输入的情况输入0</li>
</ul>
<p>上述几点都是通过API提取出来的，包括了函数的开始条件以及结束条件。但是API中忽略了一个很重要的问题那就是没有考虑<strong><em>溢出</em></strong>的情况。</p>
<blockquote>
<p>注意：考虑溢出的情况，应该将输入数据与<code>int</code>值所能表示的最大值<code>INT_MAX</code>和最小值<code>INT_MIN</code>进行比较</p>
</blockquote>
<p><code>C</code>中<code>int</code>类型32位,范围是-2147483648到2147483647.</p>
<p>（1）最轻微的上溢是 <code>INT_MAX + 1</code> ：结果是 <code>INT_MIN</code>。<br>（2）最严重的上溢是 <code>INT_MAX + INT_MAX</code> ：结果是 -2。<br>（3）最轻微的下溢是 <code>INT_MIN - 1</code> ：结果是 <code>INT_MAX</code>。<br>（4）最严重的下溢是 <code>INT_MIN +INT_MIN</code> ：结果是 0。</p>
<p>atoi函数的实现如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INT_MAX ((int)0x7FFFFFFF)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INT_MIN ((int)0x80000000)</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">myatoi</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * str)</span></span>;</div><div class="line"><span class="keyword">bool</span> vaild = <span class="literal">true</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">myatoi</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * str)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">bool</span> minus = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> result = <span class="number">0</span>;</div><div class="line">    vaild = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">if</span>(str==<span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(*str==<span class="string">' '</span>)</div><div class="line">        str++;</div><div class="line">    <span class="keyword">if</span>(*str==<span class="string">'-'</span>)&#123;</div><div class="line">        minus = <span class="literal">true</span>;</div><div class="line">        str++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(*str==<span class="string">'+'</span>)&#123;</div><div class="line">        str++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(*str&lt;<span class="string">'0'</span>||*str&gt;<span class="string">'9'</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    vaild = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">while</span>(*str&gt;=<span class="string">'0'</span>&amp;&amp;*str&lt;=<span class="string">'9'</span>)&#123;</div><div class="line">        result = result*<span class="number">10</span>+(*str-<span class="string">'0'</span>);</div><div class="line">        <span class="keyword">if</span>((minus &amp;&amp; result&gt;INT_MAX+<span class="number">1L</span>L)|| (!minus &amp;&amp; result&gt;INT_MAX))&#123;</div><div class="line">            vaild = <span class="literal">false</span>;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span> ;</div><div class="line">        &#125;</div><div class="line">        str++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(minus)</div><div class="line">        result*=<span class="number">-1</span>;</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>)result;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i,j;</div><div class="line">    <span class="keyword">char</span> buffer[<span class="number">256</span>];</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"please input number: "</span>);</div><div class="line">    fgets(buffer,<span class="number">256</span>,<span class="built_in">stdin</span>);</div><div class="line">    i = atoi(buffer);</div><div class="line">    j = myatoi(buffer);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"The value entered is %d. Its double is %d.\n"</span>,i,i*<span class="number">2</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"The value entered is %d. Its double is %d.\n"</span>,j,j*<span class="number">2</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>output:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">please input number: 2147483647</div><div class="line">The value entered is 2147483647. Its double is -2.</div><div class="line">The value entered is 2147483647. Its double is -2.</div><div class="line">please input number: -2147483648</div><div class="line">The value entered is -2147483648. Its double is 0.</div><div class="line">The value entered is -2147483648. Its double is 0.</div><div class="line">please input number: 2147483648</div><div class="line">The value entered is -2147483648. Its double is 0.</div><div class="line">The value entered is 0. Its double is 0.</div><div class="line">please input number: -2147483649</div><div class="line">The value entered is 2147483647. Its double is -2.</div><div class="line">The value entered is 0. Its double is 0.</div></pre></td></tr></table></figure>
<blockquote>
<p>注意:C语言自带的<code>atoi()</code>函数没有考虑到数据溢出的情况。</p>
</blockquote>
<p> <code>if((minus &amp;&amp; result&gt;INT_MAX+1LL)|| (!minus &amp;&amp; result&gt;INT_MAX))</code></p>
<p>当输入的数据带负号时，并且结果的绝对值&gt;2147483648，说明已达到下溢；当输入的数据不带负号，并且结果的绝对值&gt;2147483647,说明已达到上溢。</p>
<p><a href="http://cpp.sh/" target="_blank" rel="external"><code>在线C++ shell</code></a></p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="http://i1.piimg.com/567571/473944d51f13444e.png" alt=""></p>
<p><a href="http://www.steven7.top/">Steven`s Notes</a> by <a href="http://www.steven7.top/about.html">Steven</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.  </p>
<p>由<a href="http://www.steven7.top/about.html">裴士超</a>创作并维护的<a href="http://www.steven7.top">斯蒂芬</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me" target="_blank" rel="external">Steven`s Notes</a>博客（ <a href="http://www.steven7.top">http://www.steven7.top</a> ），版权所有，侵权必究。</p>
<hr>
<p>本文永久链接：<a href="http://www.steven7.top/2016/09/06/atoi-algorithm-implementation.html">http://www.steven7.top/2016/09/06/atoi-algorithm-implementation.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[毕业回想-附赠蹭饭神器]]></title>
      <url>http://www.steven7.top/2016/08/23/graduatefromcsu.html</url>
      <content type="html"><![CDATA[<p><img src="http://i4.buimg.com/567571/8af70b8671fa2ae1.jpg" alt=""></p>
<a id="more"></a>
 <blockquote class="blockquote-center">唯美味与旧识，不可辜负</blockquote>

<p>毕业有段时间了，回想起毕业那段时间天天的喝酒聚餐，现在就有点小怀念了。</p>
<p>可能是要上学了吧。要接触新的同学新的环境，激起了过往。</p>
<p>前几天突然想记录一下同学们的去向，以免忘了，尴尬，或者说，去见一趟也好。</p>
<p>平常的联系也不过就是打游戏时开开黑或者在群里聊聊天。感觉接下来的离相见的日子还有挺久的吧。。</p>
<p>提起笔来想写点东西，然而写了开头就不知道怎么写下去了。。</p>
<p>这几日，随意翻了翻找了找，搞了一个毕业蹭饭地图。希望有用到的时候。</p>
<p><a href="http://www.steven7.top/software12-where/">左家垅男子职业学校软件1201班蹭饭地图演示</a></p>
<p><a href="http://www.steven7.top/software12-where/index.html">左家垅男子职业学校软件1201班蹭饭地图源码下载</a></p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="http://i1.piimg.com/567571/473944d51f13444e.png" alt=""></p>
<p><a href="http://www.steven7.top/">Steven`s Notes</a> by <a href="http://www.steven7.top/about.html">Steven</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.  </p>
<p>由<a href="http://www.steven7.top/about.html">裴士超</a>创作并维护的<a href="http://www.steven7.top">斯蒂芬</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me" target="_blank" rel="external">Steven`s Notes</a>博客（ <a href="http://www.steven7.top">http://www.steven7.top</a> ），版权所有，侵权必究。</p>
<hr>
<p>本文永久链接：<a href="http://www.steven7.top/2016/08/23/graduatefromcsu.html">http://www.steven7.top/2016/08/23/graduatefromcsu.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[GitHubHelp-SSH相关问题Error:Permission-denied(publickey)]]></title>
      <url>http://www.steven7.top/2016/08/19/peoblem-about-git.html</url>
      <content type="html"><![CDATA[<p><img src="http://i2.buimg.com/567571/b06ebb799f1e90bc.png" alt=""></p>
<a id="more"></a>
<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>我相信很多人都会和我一样，使用<code>github</code>的时候，总是会被各种各样的问题所困扰，实在是让人头痛不已啊 ╮(╯_╰)╭</p>
<p>下述内容翻译于<code>GItHub Help</code><a href="https://help.github.com/articles/error-permission-denied-publickey/" target="_blank" rel="external">官网</a>，各位看官可以选择自行查看，或选择继续阅读。（下述内容仅适用于<code>windows</code>用户，其他用户请转至官网）</p>
<h4 id="SSH相关问题"><a href="#SSH相关问题" class="headerlink" title="SSH相关问题"></a><code>SSH</code>相关问题</h4><h5 id="错误：权限被拒绝（公钥）-Error-Permission-denied-publickey"><a href="#错误：权限被拒绝（公钥）-Error-Permission-denied-publickey" class="headerlink" title="错误：权限被拒绝（公钥）-Error: Permission denied (publickey)"></a>错误：权限被拒绝（公钥）-<code>Error: Permission denied (publickey)</code></h5><p>该错误表示<strong><em>服务器拒绝连接</em></strong>，可能的情况有很多种，其中常见的例子说明如下：</p>
<ul>
<li><p>应该使用管理员权限使用<code>git</code></p>
<p><code>sudo git push</code></p>
</li>
<li><p>确保您连接到正确的服务器地址</p>
<p> 打字很辛苦，我们众所周知。请耐心书写。无论如何，你都没有办法连接到”<code>githib.com</code>“或者“<code>guthub.com</code>”的。在某些情况下，企业网络可能因为<code>DNS</code>解析记录等造成相关问题。</p>
<p> 为了确保你正在连接正确的<code>domain</code>，你可以尝试输入一下内容:</p>
<pre><code>$ ssh -vT git@github.com
OpenSSH_5.6p1, OpenSSL 0.9.8r 8 Feb 2011
debug1: Reading configuration data /Users/you/.ssh/config
debug1: Reading configuration data /etc/ssh_config
debug1: Applying options for *
debug1: Connecting to github.com [192.30.252.131] port 22.
</code></pre><p> 确保<code>IP</code>地址<code>192.30.252.131</code>以及端口<code>22</code>。除非你使用<a href="https://help.github.com/articles/using-ssh-over-the-https-port/" target="_blank" rel="external"><code>SSH over HTTPS</code></a>的方式覆盖了该设置。倘若如此：</p>
<hr>
<p> 有时候，防火墙拒绝<code>SSH</code>连接。你可以尝试使用<code>HTTPS</code>端口连接作为<code>SSH</code>连接的<code>clone</code>。大多数的防火墙允许这样，但是代理服务器可能会干扰。</p>
<p> 测试是否是<code>SSH over HTTPS</code>尝试一下输入：</p>
<pre><code>$ ssh -T -p 443 git@ssh.github.com
Hi username! You&apos;ve successfully authenticated, but GitHub does not
provide shell access.
</code></pre></li>
</ul>
<p>   如果测试成功，那太棒了。</p>
<p>   如果你能够通过<code>SSH</code>连接到<code>git@ssh.github.com</code>通过端口<code>443</code>，那么你可以强制所有<code>GitHub</code>连接通过该端口和服务器。</p>
<p>   更改<code>~/.ssh/config</code>文件：</p>
<pre><code>Host github.com
  Hostname ssh.github.com
  Port 443
</code></pre><p>  再次尝试：</p>
<pre><code>$ ssh -T git@github.com
Hi username! You&apos;ve successfully authenticated, but GitHub does not
provide shell access.
</code></pre><ul>
<li><p>总是使用<code>git</code>用户    </p>
<p> 任何连接，包括<code>remote URLs</code>，必须使用<code>git</code>用户，如果你尝试连接到你的<code>GitHub</code> 用户名，它将会失败。</p>
<pre><code>$ ssh -T billy.anyteen@github.com
Permission denied (publickey).
</code></pre><p> 如果你的连接失败，并且你正在使用你的<code>github</code> 用户名作为<code>remote URL</code>，你可以修改<code>remote URL</code>去使用<code>git</code>用户。</p>
<p> <code>git remote set-url</code>命令可以改变已经存在的远程资源库<code>URL</code>。</p>
<p> <code>git remote set-url</code>包括两个参数：</p>
<p> 现有的远程名：<code>origin/upstream</code></p>
<p> <code>URL</code>:<code>https://github.com/USERNAME/OTHERREPOSITORY.git/git@github.com:USERNAME/OTHERREPOSITORY.git</code></p>
<p> 转换<code>remote URLs</code>从<code>SSH</code>到<code>HTTPS</code>：</p>
<pre><code>$ git remote -v
origin  git@github.com:USERNAME/REPOSITORY.git (fetch)
origin  git@github.com:USERNAME/REPOSITORY.git (push)
$ git remote set-url origin https://github.com/USERNAME/OTHERREPOSITORY.git
$ git remote -v
# Verify new remote URL
origin  https://github.com/USERNAME/OTHERREPOSITORY.git (fetch)
origin  https://github.com/USERNAME/OTHERREPOSITORY.git (push)
</code></pre><p> 下一次你使用<code>git push</code>等操作时，会被询问到<code>GitHub</code>的用户名和密码。               </p>
<p> 如果你不想被询问密码，你可以执行以下命令：</p>
<pre><code>`git config --global credential.helper store`
</code></pre><p> 转换<code>remote URLs</code>从<code>HTTPS</code>到<code>SSH</code>：</p>
</li>
</ul>
<pre><code>$ git remote -v
origin  https://github.com/USERNAME/REPOSITORY.git (fetch)
origin  https://github.com/USERNAME/REPOSITORY.git (push)
$ git remote set-url origin git@github.com:USERNAME/OTHERREPOSITORY.git
$ git remote -v
# Verify new remote URL
origin  git@github.com:USERNAME/OTHERREPOSITORY.git (fetch)
origin  git@github.com:USERNAME/OTHERREPOSITORY.git (push)
</code></pre><ul>
<li><p>确保你有密钥</p>
<p> <a href="https://desktop.github.com/" target="_blank" rel="external"><code>GitHub for Windows</code></a>是最好的选择。你可以用于<code>clone</code>资源库而不需要密钥。并且它可以使用<code>GIt Bash</code>工具。（<code>github</code>实力推广一波，不是我的锅啊）</p>
<p>如果你使用的是<code>Git Bash</code>工具，验证如下：</p>
<pre><code># start the ssh-agent in the background
eval &quot;$(ssh-agent -s)&quot;
Agent pid 59566
</code></pre></li>
</ul>
<p>​    如果你使用的是<code>git for windows</code>工具，验证如下：</p>
<pre><code># start the ssh-agent in the background
eval $(ssh-agent -s)
Agent pid 59566
</code></pre><p>​    确保你拥有私钥并且已经加载到<code>SSH</code>中，验证如下：(<code>OpenSSH 6.7 or older</code>)</p>
<pre><code>$ ssh-add -l
2048 a0:dd:42:3c:5a:9d:e4:2a:21:52:4e:78:07:6e:c8:4d /Users/you/.ssh/id_rsa (RSA)
</code></pre><p>​    <code>OpenSSH 6.8 or newer</code></p>
<pre><code>$ ssh-add -l -E md5
2048 MD5:a0:dd:42:3c:5a:9d:e4:2a:21:52:4e:78:07:6e:c8:4d /Users/you/.ssh/id_rsa (RSA)
</code></pre><p>​    如果没有打印出相关信息，你需要去生成新的<code>SSH</code>钥匙。<a href="https://help.github.com/articles/generating-an-ssh-key/" target="_blank" rel="external">请戳我</a></p>
<p>​    检查是否存在已经存在的<code>SSH</code>密钥。<a href="https://help.github.com/articles/checking-for-existing-ssh-keys/" target="_blank" rel="external">戳我</a></p>
<p>​    生成<code>SSH</code>密钥并添加至<code>ssh-agent</code>。 <a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/" target="_blank" rel="external">戳我戳我</a></p>
<p>​    添加新的密钥到你的<code>GitHub</code>账户。 <a href="https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/" target="_blank" rel="external">戳我戳我戳我</a></p>
<p>​    上述情况翻译于<code>GitHub</code> 官网翻译文档</p>
<h4 id="Hexo主题相关问题解答："><a href="#Hexo主题相关问题解答：" class="headerlink" title="Hexo主题相关问题解答："></a><code>Hexo</code>主题相关问题解答：</h4><p><code>Hexo deploy</code>相关问题基本都可以从上面找到答案。如果上述方案无法解决，以下方案实在是无奈之举–纯属看各位看官的运气。</p>
<p><code>Hexo</code>主题配置：</p>
<pre><code>deploy:
  type: git 
  repo: git@github.com:peishichao/peishichao.github.io.git
  #repo: https://github.com/peishichao/peishichao.github.io.git
  branch: master
</code></pre><h4 id="hexo-deploy时重复输入用户名密码的问题"><a href="#hexo-deploy时重复输入用户名密码的问题" class="headerlink" title="hexo deploy时重复输入用户名密码的问题"></a><code>hexo deploy</code>时重复输入用户名密码的问题</h4><p>将资源库修改为<code>git@github.com:username/username.repository .git</code></p>
<h4 id="hexo-deploy突然执行失败，找不到原因"><a href="#hexo-deploy突然执行失败，找不到原因" class="headerlink" title="hexo deploy突然执行失败，找不到原因"></a><code>hexo deploy</code>突然执行失败，找不到原因</h4><p>尝试更改<code>git</code>版本，卸载高版本安装低版本</p>
<h4 id="hexo-deploy偶尔失常"><a href="#hexo-deploy偶尔失常" class="headerlink" title="hexo deploy偶尔失常"></a><code>hexo deploy</code>偶尔失常</h4><p>请过段时间尝试，我就是一个赤裸裸的例子，<code>hexo d</code>一直好好的，突然无法使用，各种报错，查询无数资料，才编写了这边文章，一直熬夜到凌晨2点都没有搞定，结果早晨一觉醒来一起变得那么的美好–:-D</p>
<p>==纠结原因可能是电脑，网络，vpn等各方面不知道的因素–与其纠结不如睡觉(～﹃～)~zZ</p>
<p>学会使用控制变量法找寻问题的关键，重启机器是最无奈也是最好的抉择==</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="http://i1.piimg.com/567571/473944d51f13444e.png" alt=""></p>
<p><a href="http://www.steven7.top/">Steven`s Notes</a> by <a href="http://www.steven7.top/about.html">Steven</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.  </p>
<p>由<a href="http://www.steven7.top/about.html">裴士超</a>创作并维护的<a href="http://www.steven7.top">斯蒂芬</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me" target="_blank" rel="external">Steven`s Notes</a>博客（ <a href="http://www.steven7.top">http://www.steven7.top</a> ），版权所有，侵权必究。</p>
<hr>
<p>本文永久链接：<a href="http://www.steven7.top/2016/08/19/peoblem-about-git.html">http://www.steven7.top/2016/08/19/peoblem-about-git.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo的奇淫技巧第三发：添加背景以及网站图标设置]]></title>
      <url>http://www.steven7.top/2016/08/16/hexoskillthree.html</url>
      <content type="html"><![CDATA[<p><img src="http://i4.buimg.com/567571/aecc6833cfb98a61.png" alt=""></p>
<a id="more"></a>
<p>闲来无事总想捣鼓捣鼓自己的这个小博客..的确是闲的蛋疼啊 ︿(￣︶￣)︿</p>
<p>先赠送给大家一个小技巧吧！</p>
<hr>
<p>我总是感觉显示文章摘要的时候，如果显示的全是文字总是感觉很<code>low</code>，所以，就像这篇文章一样你们进来的时候看到的效果一样，是不是瞬间感觉B格满满的呢:-D</p>
<p>对于<code>NexT</code>主题来讲，大家可以设置默认文章截取长度作为文章摘要参考：<a href="http://theme-next.iissnan.com/faqs.html" target="_blank" rel="external">NexT官方文档</a></p>
<p>但是还是建议大家使用<code>&lt;!-- more --&gt;</code>标签自己选择性截取比较有代表性。</p>
<p>文章摘要大图形式显示我就是使用的<code>&lt;!-- more --&gt;</code>标签，大家一定还会说，每次写文章去找一张图，我的尴尬症都要犯了==那懒人的福利又来了</p>
<p><code>&lt;img src=&quot;https://source.unsplash.com/random/1600x900&quot;&gt;</code></p>
<p>大家只需要将这个代码贴到<code>&lt;!-- more --&gt;</code>标签的前面就可以了，是不是很简单啊！</p>
<p><code>unsplash</code>可以随意生成绝美大图作为文章封面，瞬间B格满满滴–</p>
<p>滴滴滴，学长卡快上车–<code>unsplash</code><a href="https://source.unsplash.com/" target="_blank" rel="external">官网</a></p>
<hr>
<h4 id="添加网站背景"><a href="#添加网站背景" class="headerlink" title="添加网站背景"></a>添加网站背景</h4><p><code>Hexo NexT</code>的确留白很多，但是总是感觉空空荡荡的，话说一开始我的确是因为喜欢他这种简洁美才选择它的不是嘛！!<code>wtf</code>我真是一个花心的男纸==</p>
<p>我现在的确也还是很喜欢它这种简洁美，但是我还是想给它加上点色彩，所以就添加点背景试试咯。</p>
<ol>
<li><p>首先先找到自己喜欢的一张背景图片是关键、、我可是找了好久才找到一张自己喜欢的。如果各位看官喜欢我的背景的话，小弟就把它送给你们把！！拿去收好不送:-D(<a href="http://i4.buimg.com/567571/85118244e0cdca9b.png" target="_blank" rel="external">黑白齿轮</a>)</p>
</li>
<li><p>将自己的网站背景图片置于<code>Hexo/themes/next/source/images</code>下</p>
</li>
<li><p>修改以下文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Hexo/themes/next/source/css/_schemes/Pisces/index.styl</div><div class="line">1 line: modify background label</div><div class="line">body &#123; background:url(/images/background.png);&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>完成任务:-D</strong></p>
<p>效果图就跟我的博客长得一样咯 ！</p>
<h4 id="设置网站图标"><a href="#设置网站图标" class="headerlink" title="设置网站图标"></a>设置网站图标</h4><p>设置网站图标也是首先找到自己喜欢的网站图标，这个问题大家一定又是炒鸡纠结的啊哈哈–莫怨我仰天长笑 –因为我就是这么纠结的银/(ㄒoㄒ)/~~</p>
<ul>
<li>大家可以选择自己制作，推荐有<code>PS</code>功底的银尝试</li>
<li>选择制作好的，想我们这种懒蛋只有这个路数了。接住我的<a href="http://www.easyicon.net/" target="_blank" rel="external">天马流星拳</a>。大家可以在里面尽情的选择，在自由的大海里面徜徉辣-</li>
</ul>
<p>选择完成之后，大家只需要将这个<code>ico</code>文件放在<code>Hexo/source</code>文件夹下面即可</p>
<p>大家一定会问就这么简单！！！</p>
<p><del>柯南新一说：真相永远只有一个！！</del></p>
<blockquote>
<p>因为在<code>Hexo/themes/next/_config.yml</code>中，<code>NexT</code>主题已经提前为我们设置了网站图标<code>line 6</code>；</p>
</blockquote>
<p>对于其他主题的用户而言：<code>Hexo</code><a href="https://hexo.io/zh-cn/docs/helpers.html#favicon_tag" target="_blank" rel="external">官方文档</a>中有相应的指导：</p>
<blockquote>
<p>将<code>&lt;%- favicon_tag(path) %&gt;</code> 代码置于对应主题配置文件中即可。</p>
</blockquote>
<p>请其他主题用户自行尝试，本博主也木有试过哦==</p>
<p>问题相关解答：</p>
<table>
<thead>
<tr>
<th>问题描述</th>
<th>解答</th>
</tr>
</thead>
<tbody>
<tr>
<td>设置完网站图标之后不显示</td>
<td>请更换浏览器尝试</td>
</tr>
</tbody>
</table>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="http://i1.piimg.com/567571/473944d51f13444e.png" alt=""></p>
<p><a href="http://www.steven7.top/">Steven`s Notes</a> by <a href="http://www.steven7.top/about.html">Steven</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.  </p>
<p>由<a href="http://www.steven7.top/about.html">裴士超</a>创作并维护的<a href="http://www.steven7.top">斯蒂芬</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me" target="_blank" rel="external">Steven`s Notes</a>博客（ <a href="http://www.steven7.top">http://www.steven7.top</a> ），版权所有，侵权必究。</p>
<hr>
<p>本文永久链接：<a href="http://www.steven7.top/2016/08/16/hexoskillthree.html">http://www.steven7.top/2016/08/16/hexoskillthree.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[本博客的SEO优化（2）-让谷歌和百度尽快收录你]]></title>
      <url>http://www.steven7.top/2016/08/15/Hexo-Seo-2.html</url>
      <content type="html"><![CDATA[<p>前言</p>
<p>亲妈啊！！这真的是我这几天写博文遇到的最最最头痛的问题-让度娘和谷哥尽快的收了我啊/(ㄒoㄒ)/~~</p>
<p>窝也知道刚开始建的站不可能这么快收录的，然而我这不是心急如焚嘛！！<img src="http://i2.buimg.com/567571/b2c39f2227ba4a78.png" alt=""></p>
<p> <strong><u>接下来就来交大家脱坑吧==</u></strong></p>
<ul>
<li><a href="http://www.steven7.top/2016/08/14/%E5%9F%BA%E4%BA%8EHexoNexT%E7%9A%84SEO%E4%BC%98%E5%8C%96/#more">基于HexoNexT的SEO优化</a></li>
</ul>
<ul>
<li><p>首先想要被收录要提交你的网址给百度和谷歌</p>
<p>​（否则人家咋知道你的网址(ToT)/~~~）</p>
<p>​<a href="http://www.baidu.com/search/url_submit.htm" target="_blank" rel="external">百度引擎提交入口</a></p>
<p>​<a href="https://www.google.com/webmasters/tools/home?hl=zh-CN" target="_blank" rel="external">Google搜索引擎提交入口</a></p>
</li>
<li><p>接下来最好大家注册一下度娘和谷哥的站长服务，以便于你更好的管理自己的网站</p>
<p>​<a href="http://zhanzhang.baidu.com/" target="_blank" rel="external">百度站长平台欢迎您</a></p>
<p>​<a href="https://www.google.com/webmasters/tools/home?hl=zh-CN" target="_blank" rel="external">谷歌站长平台欢迎您</a></p>
</li>
</ul>
<h4 id="验证网站拥有权"><a href="#验证网站拥有权" class="headerlink" title="验证网站拥有权"></a>验证网站拥有权</h4><p>​    站长平台基本上都需要你去验证网站，添加并验证后，证明您是该域名的    所有者之后才可以进行相关操作。各位看官可以根据自己的需求选择特定的验证方式完成验证。</p>
<p><img src="http://i1.buimg.com/567571/8388041bf487bba5.png" alt=""></p>
<p>等待验证完成之后可以进行相关的网页抓取操作，以便于搜索引擎收录。</p>
<h4 id="robots测试"><a href="#robots测试" class="headerlink" title="robots测试"></a><code>robots</code>测试</h4><p>百度和谷歌都提供了类似的<code>robots</code><u>测试工具</u>便于我们测试<code>robots.txt</code>是否符合规范。</p>
<p><a href="http://zhanzhang.baidu.com/robots/" target="_blank" rel="external">百度<code>robots</code></a></p>
<p><a href="https://www.google.com/webmasters/tools" target="_blank" rel="external">谷歌<code>robots.txt</code>测试工具</a></p>
<p>百度<code>robots</code> 工具没有提示，只是提示检测更新。</p>
<p>谷歌<code>robots.txt</code>测试工具会提示你错误，请修改</p>
<h4 id="提交站点地图"><a href="#提交站点地图" class="headerlink" title="提交站点地图"></a>提交站点地图</h4><p>我们在<a href="http://www.steven7.top/2016/08/14/%E5%9F%BA%E4%BA%8EHexoNexT%E7%9A%84SEO%E4%BC%98%E5%8C%96/#more">上一节</a>中提到过创建<code>sitemap</code>的方法，现在我们来使用它。</p>
<p><code>sitemap.xml</code>适用于谷歌</p>
<p><code>baidusitemap.xml</code>毋庸置疑适用于百度</p>
<p><a href="https://www.google.com/webmasters/tools" target="_blank" rel="external">谷歌站点地图提交入口</a></p>
<p><a href="http://zhanzhang.baidu.com/linksubmit" target="_blank" rel="external">百度站点地图提交入口</a></p>
<p>其实<code>sitemap</code>只是一种提交网站链接给搜索引擎的一种方式。提交链接的方式还包括：主动推送、自动推送和手动推送。</p>
<p>当然手动推送不建议大家使用，因为太费事费脑。脑子是个好东西==</p>
<p>自动推送给百度的方式最为便捷，只需将自动推送的<code>JS</code>代码部署在每个页面的源代码中就可以了，当页面被浏览时，链接就会自动推送给百度。</p>
<p>提交完成之后，百度和谷歌都会反馈给你最后抓取时间和抓取<code>URL</code>数量。</p>
<h4 id="抓取方式"><a href="#抓取方式" class="headerlink" title="抓取方式"></a>抓取方式</h4><p><a href="https://www.google.com/webmasters/tools" target="_blank" rel="external">谷歌抓取方式</a></p>
<p><a href="http://zhanzhang.baidu.com/crawltools/" target="_blank" rel="external">百度抓取方式</a></p>
<p>每种抓取方式都分为<strong>桌面版</strong>还是<strong>移动版</strong>，以为我们博客类网站都选择桌面版抓取，点击抓取即可。不添加后缀，默认则是首页。</p>
<p>抓取完成之后则会给出相应的提示信息。抓取成功与否。</p>
<p>抓取完成之后根据提示完成相应的操作就可以了:-D</p>
<h4 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h4><p>基本上，这样结束之后，就可以等着被度娘和谷哥收录就可以了==就只能这样默默的等待了。不是嘛== &lt;(－︿－)&gt;</p>
<p>最后使用<code>site:your-site</code>验证你被收录了多少条吧==</p>
<p>度娘还是比较傲娇的===</p>
<p>虽然才两天的时间，你不收录我==但是谷哥已经收录4条了:-D</p>
<p><img src="http://i4.buimg.com/567571/c0f38a106e6b923c.png" alt=""></p>
<p><img src="http://i4.buimg.com/567571/0b6f489dd427e649.png" alt=""></p>
<hr>
<p>百度应用推荐：</p>
<p><a href="http://su.baidu.com/" target="_blank" rel="external">百度云加速，免费<code>CDN</code>服务，为您的网站全面加速</a></p>
<p><a href="http://ce.baidu.com/" target="_blank" rel="external">百度云观测，网站安全，观测一下，实时监测，问题报警</a></p>
<hr>
<p>以上应用没有任何利益相关，只是感觉不错推荐给大家 -</p>
<p>百度云加速倘若不会使用；请参照<a href="http://jingyan.baidu.com/article/676629974ba6c054d51b84ab.html" target="_blank" rel="external">百度云加速百度经验</a></p>
<p>说明问题如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">问题描述</th>
<th style="text-align:left">解决方案</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">谷歌无法访问</td>
<td style="text-align:left"><a href="http://www.0678life.com/" target="_blank" rel="external">天行浏览器</a>购买<code>vpn</code>炒鸡便宜</td>
</tr>
<tr>
<td style="text-align:center">百度云加速之后无法访问</td>
<td style="text-align:left">1.请在百度云加速中提交工单，请求百度专业人士解决2.<a href="http://www.ishuo.cn/show/1001052.html" target="_blank" rel="external">轻松设置百度云加速，让网站飞起来</a></td>
</tr>
<tr>
<td style="text-align:center">百度云加速之后蜘蛛无法抓取</td>
<td style="text-align:left">因为刚更换<code>DNS</code>服务器，蜘蛛可能还没有反应过来，发射弧</td>
</tr>
<tr>
<td style="text-align:center">百度或谷歌长时间无法抓取</td>
<td style="text-align:left">请切换<code>DNS</code>服务器</td>
</tr>
<tr>
<td style="text-align:center">百度云加速之后会导致<code>Https</code>无妨访问</td>
<td style="text-align:left">因为百度云（免费版）本身不支持，╮(╯▽╰)╭想用百度云加速木有办法啊啊啊！！除非把<code>DNS</code>切换回来。==专业版是支持的哟</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://tengj.top/2016/03/14/baidunoshouluresson/" target="_blank" rel="external">百度链接提交主动推送后不收录的原因</a></td>
<td style="text-align:left">所以希望大家还是主动推送和自动推送相结合</td>
</tr>
</tbody>
</table>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="http://i1.piimg.com/567571/473944d51f13444e.png" alt=""></p>
<p><a href="http://www.steven7.top/">Steven`s Notes</a> by <a href="http://www.steven7.top/about.html">Steven</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.  </p>
<p>由<a href="http://www.steven7.top/about.html">裴士超</a>创作并维护的<a href="http://www.steven7.top">斯蒂芬</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me" target="_blank" rel="external">Steven`s Notes</a>博客（ <a href="http://www.steven7.top">http://www.steven7.top</a> ），版权所有，侵权必究。</p>
<hr>
<p>本文永久链接：<a href="http://www.steven7.top/2016/08/15/Hexo-Seo-2.html">http://www.steven7.top/2016/08/15/Hexo-Seo-2.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo博客页面留白太多,代码看起来不方便]]></title>
      <url>http://www.steven7.top/2016/08/15/Hexo-page-leave-a-note.html</url>
      <content type="html"><![CDATA[<p>其实关于浏览器留白这个问题，每个人都有没个人的看法，有人感觉这块多了，那块少了..很难迎合大众。</p>
<p>关于设置浏览器留白这一部分，<a href="http://theme-next.iissnan.com/faqs.html" target="_blank" rel="external">Hexo NexT主题官方文档</a>给出以下解决方案：</p>
<p><img src="http://i2.piimg.com/567571/e4a3d80261be3ae4.png" alt=""></p>
<p>但是该方法不适用于<code>Pisces</code>这不就尴尬了../(ㄒoㄒ)/~~</p>
<p>本来用适用<code>pisces</code>不就是为了美观嘛—</p>
<p>然后我就顺藤摸瓜，找到了上面所提到的<code>Issue</code></p>
<p>里面刷刷刷列出了很多解决方法：</p>
<p><img src="http://i2.piimg.com/567571/9c0b05e12200d525.png" alt=""></p>
<p>好了，重点来了，最关键的被窝发现咯：</p>
<p>对于 <code>Pisces Scheme</code>，需要同时修改 <code>header</code> 的宽度、<code>.main-inner</code> 的宽度以及 <code>.content-wrap</code> 的宽度。例如，使用百分比（<code>Pisces</code> 的布局定义在 <code>source/css/_schemes/Picses/_layout.styl</code> 中）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">header&#123; width: 90%; &#125;</div><div class="line">.container .main-inner &#123; width: 90%; &#125;</div><div class="line">.content-wrap &#123; width: calc(100% - 260px); &#125;</div></pre></td></tr></table></figure>
<p><code>iissnan</code>表示：</p>
<hr>
<p>我并未对这个布局进行测试，自定义修改需要自己进行测试。另外，我觉得超过一定宽度后（一行内文字太多导致换行跨度太大），阅读体验都不怎么样。</p>
<hr>
<p>博主，自己设置的是<code>60%</code>的百分比，自我感觉观感体验最好:-D</p>
<p>当然，什么是最好，自己感受才知道不是嘛@-@</p>
<p>各位看官就自行调整吧==</p>
<p>我去吃早饭了︿(￣︶￣)︿</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="http://i1.piimg.com/567571/473944d51f13444e.png" alt=""></p>
<p><a href="http://www.steven7.top/">Steven`s Notes</a> by <a href="http://www.steven7.top/about.html">Steven</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.  </p>
<p>由<a href="http://www.steven7.top/about.html">裴士超</a>创作并维护的<a href="http://www.steven7.top">斯蒂芬</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me" target="_blank" rel="external">Steven`s Notes</a>博客（ <a href="http://www.steven7.top">http://www.steven7.top</a> ），版权所有，侵权必究。</p>
<hr>
<p>本文永久链接：<a href="http://www.steven7.top/2016/08/15/Hexo-page-leave-a-note.html">http://www.steven7.top/2016/08/15/Hexo-page-leave-a-note.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[基于HexoNexT的SEO优化]]></title>
      <url>http://www.steven7.top/2016/08/14/%E5%9F%BA%E4%BA%8EHexoNexT%E7%9A%84SEO%E4%BC%98%E5%8C%96.html</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本来建站没多久，刚开始接触，一开始使用的是<strong><em><a href="http://markdownpad.com/" target="_blank" rel="external">MarkdownPad 2</a></em></strong>进行博文编写的。谁料就在今天<a href="https://www.hrwhisper.me/" target="_blank" rel="external"><strong><em>hrwhisper</em></strong></a>在我的博文下面留言告诉我了<a href="http://www.typora.io/" target="_blank" rel="external"><strong><em>Typora</em></strong></a>这个美妙的东西。感觉<strong><em>Typora</em></strong>和<strong><em>markdown</em></strong>更配哟。</p>
<h3 id="正题"><a href="#正题" class="headerlink" title="正题"></a>正题</h3><p>建站初期，当然是想让搜索引擎可以尽快的收录我咯。所以我这几天疯狂的发博文，其实就是这个道理:-D。</p>
<p> 聊一聊我最近做的一些SEO优化吧！</p>
<ul>
<li>安装hexo的sitemap网站地图生成插件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-sitemap --save</div><div class="line">npm install hexo-generator-baidu-sitemap --save</div></pre></td></tr></table></figure>
<ul>
<li><p>在hexo站点根目录下的<code>_config.yml</code>中添加如下代码</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#sitemap网站地址</div><div class="line">sitemap:</div><div class="line">path: sitemap.xml</div></pre></td></tr></table></figure>
<p>此外，在<code>hexo</code>站点的<code>source</code>文件夹下创建<code>robots.txt</code>添加网络爬虫协议</p>
<p>参考如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># hexo robots.txt</div><div class="line">User-agent: *</div><div class="line">Allow: /</div><div class="line">Allow: /archives/</div><div class="line"></div><div class="line">Disallow: /vendors/</div><div class="line">Disallow: /js/</div><div class="line">Disallow: /css/</div><div class="line">Disallow: /fonts/</div><div class="line">Disallow: /vendors/</div><div class="line">Disallow: /fancybox/</div><div class="line"></div><div class="line">Sitemap: http://www.steven7.top/sitemap.xml</div><div class="line">Sitemap: http://www.steven7.top/baidusitemap.xml</div></pre></td></tr></table></figure>
<p><code>sitemap</code>网址请自行替换。</p>
</li>
<li><p>添加<code>nofollow</code>标签</p>
<p><code>nofollow</code>标签即告诉搜索引擎不要追踪此网页上的链接，减少垃圾链接分散网站权重。</p>
<p>所以我们要对非友情链接之外的出站链接添加<code>nofollow</code>标签，减少不必要的PR值输出。感兴趣的同学可以通过<a href="http://link.chinaz.com/" target="_blank" rel="external">chinaz站长工具友情链接检测进行查询</a>。</p>
<p>下面以<code>Hexo NexT</code>主题为例，进行修改指导</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">your-hexo-site\themes\next\layout\_partials\footer.swig</div><div class="line"></div><div class="line">line 12:add tag(rel="external nofollow")</div><div class="line"></div><div class="line">&#123;&#123; __('footer.powered', '<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"theme-link"</span> <span class="attr">href</span>=<span class="string">"http://hexo.io"</span> <span class="attr">rel</span>=<span class="string">"external nofollow"</span>&gt;</span>Hexo<span class="tag">&lt;/<span class="name">a</span>&gt;</span>') &#125;&#125;</div><div class="line"></div><div class="line">line 17:add tag(rel="external nofollow")</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"theme-link"</span> <span class="attr">href</span>=<span class="string">"https://github.com/iissnan/hexo-theme-next"</span> <span class="attr">rel</span>=<span class="string">"external nofollow"</span>&gt;</span></div><div class="line">--------------------------------------------------------------------------------------------</div><div class="line">your-hexo-site\themes\next\layout\_macro\sidebar.swig</div><div class="line"></div><div class="line">line 75:add tag(rel="external nofollow")</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; link &#125;&#125;"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">title</span>=<span class="string">"&#123;&#123; name &#125;&#125;"</span> <span class="attr">rel</span>=<span class="string">"external nofollow"</span>&gt;</span></div><div class="line"></div><div class="line">line 89:add tag(rel="external nofollow")</div><div class="line"></div><div class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://creativecommons.org/&#123;% if theme.creative_commons === 'zero' %&#125;publicdomain/zero/1.0&#123;% else %&#125;licenses/&#123;&#123; theme.creative_commons &#125;&#125;/4.0&#123;% endif %&#125;/"</span> <span class="attr">class</span>=<span class="string">"cc-opacity"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">rel</span>=<span class="string">"external nofollow"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>title</code>优化</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">your-hexo-site\themes\next\layout\index.swig</div><div class="line"></div><div class="line">line 5:add tag(&#123;&#123; theme.keywords &#125;&#125; &#123;&#123; config.title &#125;&#125;)</div><div class="line"></div><div class="line">&#123;% block title %&#125; &#123;&#123; theme.keywords &#125;&#125; &#123;&#123; config.title &#125;&#125; - &#123;&#123; theme.description &#125;&#125; &#123;% endblock %&#125;</div></pre></td></tr></table></figure>
<p>提示：</p>
<p><u>整个标题不要超过80字符，不要堆砌关键字</u></p>
</li>
<li><p>提交网站</p>
<p><a href="http://www.soshoulu.com/sousuotijiao/baidu/tijiao/" target="_blank" rel="external">百度入口</a></p>
<p><a href="http://info.so.360.cn/site_submit.html" target="_blank" rel="external">360入口</a></p>
<p>网站提交成功之后，可以通过各站长平台进行站点管理。</p>
</li>
<li><p><code>NexT</code>主题内置的<code>SEO</code>优化工具</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">your-hexo-site\themes\next\_config.yml</div><div class="line"></div><div class="line">line 22:</div><div class="line">cannoical: true</div><div class="line"></div><div class="line">line 333:</div><div class="line">baidu_push: ture</div></pre></td></tr></table></figure>
<p><code>cannoical</code>标签适用于解决由于网址形式不同内容相同而造成的内容重复问题。</p>
<p><code>baidu_push</code>标签将<code>url</code>自动推送到百度</p>
</li>
<li><p>小技巧</p>
<p><a href="http://kuangqi.me/tricks/append-a-copyright-info-after-every-post/" target="_blank" rel="external">为Hexo博客的每一篇文章自动追加版权信息</a></p>
<p>简要概括如下：</p>
<p><code>your-hexo-site\scripts</code>中创建<code>AddDeclare.js</code>脚本文件（文件名随意）</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">AddDeclare.js：</div><div class="line">var fs = require('fs');</div><div class="line">hexo.extend.filter.register('before_post_render', function(data)&#123;</div><div class="line">    if(data.copyright == false) return data;</div><div class="line">    var file_content = fs.readFileSync('tail.md');</div><div class="line">    if(file_content &amp;&amp; data.content.length &gt; 50) </div><div class="line">    &#123;</div><div class="line">        data.content += file_content;</div><div class="line">        var permalink = '\n本文永久链接：' + data.permalink;</div><div class="line">        data.content += permalink;</div><div class="line">    &#125;</div><div class="line">    return data;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><code>tail.md</code>为脚本信息文件，请诸君自己编写，将<code>tail.md</code>置于<code>Hexo</code>根目录下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">tail.md:</div><div class="line"></div><div class="line">版权声明</div><div class="line"></div><div class="line">Steven`s Notes by Steven is licensed under a Creative Commons BY-NC-ND 4.0 International License.  </div><div class="line"></div><div class="line">由裴士超创作并维护的斯蒂芬博客采用创作共用保留署名-非商业-禁止演绎4.0国际许可证。</div><div class="line"></div><div class="line">本文首发于Steven`s Notes博客（ http://www.steven7.top ），版权所有，侵权必究。</div></pre></td></tr></table></figure>
</li>
</ul>
<p>最后聊一聊使用<code>Typora</code>的小感受吧：</p>
<p>感觉的确是要比<code>MarkdownPad</code>方便很多，但是还是有一些不足吧！</p>
<ol>
<li><p>每次编辑完代码之后，总是很难切换到下一行==这一点是让我最头痛的/(ㄒoㄒ)/~~最能先切换到源码模式再切换回来。</p>
</li>
<li><p>每次使用完<code>list</code>工具之后，鼠标无法退出<code>list</code>模式，同样要进入源码模式切换/(ㄒoㄒ)/~~</p>
</li>
<li><p>的确是炒鸡方便有木有，比<code>Markdownpad</code>的实时预览好很多==推荐大家使用:-D</p>
<p>​</p>
</li>
</ol>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="http://i1.piimg.com/567571/473944d51f13444e.png" alt=""></p>
<p><a href="http://www.steven7.top/">Steven`s Notes</a> by <a href="http://www.steven7.top/about.html">Steven</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.  </p>
<p>由<a href="http://www.steven7.top/about.html">裴士超</a>创作并维护的<a href="http://www.steven7.top">斯蒂芬</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me" target="_blank" rel="external">Steven`s Notes</a>博客（ <a href="http://www.steven7.top">http://www.steven7.top</a> ），版权所有，侵权必究。</p>
<hr>
<p>本文永久链接：<a href="http://www.steven7.top/2016/08/14/基于HexoNexT的SEO优化.html">http://www.steven7.top/2016/08/14/基于HexoNexT的SEO优化.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo的奇淫技巧第二发：自动备份Hexo博客源文件]]></title>
      <url>http://www.steven7.top/2016/08/13/Hexo%E7%9A%84%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7%E7%AC%AC%E4%BA%8C%E5%8F%91.html</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近开始写博文的原因其实就是因为无聊..<br>写着写着感觉用Hexo写博文是一种享受~(≧▽≦)/~啦啦啦。写多了就想万一换了电脑或者电脑硬盘出问题了该咋整/(ㄒoㄒ)/~~<br>那将会是哭尽长江水都无法挽回啊！！！所以想着要有个备份方案吧。</p>
<ul>
<li><p>方案一：硬盘上复制一份咯。你是不是傻、硬盘坏了不也就木有了==</p>
</li>
<li><p>方案二：U盘咯。懒 pass</p>
</li>
<li><p>方案三：网盘吧。需要上传吧。懒 懒 懒 pass</p>
</li>
<li><p>方案四：github是个好东西，希望每个人都会用:-D</p>
</li>
</ul>
<h2 id="文件托管到github"><a href="#文件托管到github" class="headerlink" title="文件托管到github"></a>文件托管到github</h2><ul>
<li><p>新建repository，命名与本地项目文件夹相同（例如：我的为Hexo）</p>
</li>
<li><p>进入本地<code>Hexo</code>文件夹，执行以下命令创建仓库</p>
<p>  <code>git init</code></p>
</li>
<li><p>设置远程仓库地址</p>
<p>  <code>git remote add origin https://github.com/peishichao/Hexo.git</code></p>
</li>
</ul>
<p>如果报错：<code>fatal: remote origin already exists.</code></p>
<p>解决办法如下：<code>git remote rm origin</code></p>
<ul>
<li><p>Hexo源码提交</p>
<pre><code>git add .

git commit -m &quot;添加hexo源码文件作为备份&quot;

git push origin master
</code></pre></li>
</ul>
<p>如果报错：<code>Permission denied (publickey).</code></p>
<p>解决方法如下：</p>
<pre><code>ssh-agent

ssh-add ~/.ssh/id_key
</code></pre><p>如果报错    <code>error:failed to push som refs to .......</code></p>
<p>解决方式如下：</p>
<pre><code>git pull origin master
git push origin master
</code></pre><ul>
<li>完成</li>
</ul>
<p>经过上面的操作之后，本地的Hexo源码就已经上传到github服务器上进行备份了，就再也不用担心代码丢失找不到了(<em>^__^</em>) 嘻嘻……</p>
<p>当远程仓库有更新的时候，执行下面代码就可将hexo源码放到本地了。</p>
<pre><code>git pull origin master
</code></pre><h3 id="实现自动化操作"><a href="#实现自动化操作" class="headerlink" title="实现自动化操作"></a>实现自动化操作</h3><p>我说过我很懒..上面的操作远远不能达到我的心里预期，所以我还要实现自动化操作才可以咯。</p>
<p><a href="http://www.steven7.top/2016/08/13/Hexo%E7%9A%84%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7%E7%AC%AC%E4%B8%80%E5%8F%91/#more">Hexo的奇淫技巧第一发</a>中我们已经提到了怎么在<code>Hexo</code>添加文章时自动打开编辑器了。原理是利用<code>nodeJs</code>的事件监听机制来实现监听Hexo的new事件来启动编辑器，完成自动启动编辑器的操作。</p>
<p>那么可不可以通过通过监听Hexo的其它事件来完成自动执行Git命令完成自动备份呢？通过查阅Hexo文档，找到了Hexo的主要事件，见下表：</p>
<table>
<thead>
<tr>
<th style="text-align:left">事件名</th>
<th style="text-align:right">事件发生时间</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">deployBefore</td>
<td style="text-align:right">在部署完成前发布</td>
</tr>
<tr>
<td style="text-align:left">deployAfter</td>
<td style="text-align:right">在部署成功后发布</td>
</tr>
<tr>
<td style="text-align:left">exit</td>
<td style="text-align:right">在 Hexo 结束前发布</td>
</tr>
<tr>
<td style="text-align:left">generateBefore</td>
<td style="text-align:right">在静态文件生成前发布</td>
</tr>
<tr>
<td style="text-align:left">generateAfter</td>
<td style="text-align:right">在静态文件生成后发布</td>
</tr>
<tr>
<td style="text-align:left">new</td>
<td style="text-align:right">在文章文件建立后发布</td>
</tr>
</tbody>
</table>
<p>所以我们就可以通过监听Hexo的deployAfter事件，待上传完成之后自动运行Git备份命令打到自动备份的目的。</p>
<p>要实现这个自动备份功能，需要依赖<code>NodeJs</code>的一个<code>shelljs</code>模块,该模块重新包装了<code>child_process</code>,调用系统命令更加的方便。该模块需要安装后使用。</p>
<pre><code>npm install --save shelljs
</code></pre><p>操作步骤：</p>
<ol>
<li>编写脚本，在<code>Hexo</code>根目录下的<code>scripts</code>（如果没有请新建）创建autoGItSave.js文件,文件名随意。</li>
<li>脚本内容如下：</li>
</ol>
<pre><code>        var exe = require(&apos;child_process&apos;);
function run() {
        console.log(&quot;开始上传源代码&quot;);
       if(exe.execFile(&apos;D:/Hexo/GitUpdate.bat&apos;).code !== 0){
        console.log(&quot;恭喜你更新Github成功&quot;);
       }
       if(exe.execFile(&apos;D:/Hexo/GitUpdate.bat&apos;).code == 0){
        console.log(&quot;更新Github失败&quot;);
       }
        }
     hexo.on(&apos;deployAfter&apos;, function() {
        run();
});
</code></pre><p>其中<code>D:/Hexo/GitUpdate.bat</code>内容如下：</p>
<pre><code>git add --all
git commit -am &quot;Form auto backup script\&apos;s commit&quot;
git push origin master
</code></pre><p>请确保<code>GitUpdate.bat</code>文件位于Hexo的根目录下。</p>
<p>保存脚本并退出，然后执行<code>hexo deploy</code>命令，可以得到如下的类似结果：</p>
<pre><code>[master 4ae3ace] Site updated: 2016-08-14 00:05:25
 4 files changed, 44 insertions(+), 76 deletions(-)
Branch master set up to track remote branch master from https://github.com/peishichao/peishichao.github.io.git.
To https://github.com/peishichao/peishichao.github.io.git
   d781e56..4ae3ace  HEAD -&gt; master
INFO  Deploy done: git
开始上传源代码
恭喜你更新Github成功
</code></pre><p>这样子，每次更新博文并<code>deploy</code>到服务器上之后，备份就自动启动并完成备份啦~是不是很方便呢？麻麻再也不用担心我们的博文找不到啦:-D</p>
<p>Enjoy it！</p>
<p>have a nice day!!</p>
<p>蟹蟹O(∩_∩)O</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="http://i1.piimg.com/567571/473944d51f13444e.png" alt=""></p>
<p><a href="http://www.steven7.top/">Steven`s Notes</a> by <a href="http://www.steven7.top/about.html">Steven</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.  </p>
<p>由<a href="http://www.steven7.top/about.html">裴士超</a>创作并维护的<a href="http://www.steven7.top">斯蒂芬</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me" target="_blank" rel="external">Steven`s Notes</a>博客（ <a href="http://www.steven7.top">http://www.steven7.top</a> ），版权所有，侵权必究。</p>
<hr>
<p>本文永久链接：<a href="http://www.steven7.top/2016/08/13/Hexo的奇淫技巧第二发.html">http://www.steven7.top/2016/08/13/Hexo的奇淫技巧第二发.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo的奇淫技巧第一发：添加文章时自动打开编辑器]]></title>
      <url>http://www.steven7.top/2016/08/13/Hexo%E7%9A%84%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7%E7%AC%AC%E4%B8%80%E5%8F%91.html</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>扯一扯，本来今天心想写一下感悟啥的，谁知道小件小事耽误了整个上午的青春、、简直要哭瞎有木有、、<br><img src="http://i1.piimg.com/567571/abe13cbe996fb11a.png" width="200" heght="200" class="img-center"><br>下面就来说一说心痛的事情，让各位看官笑一笑:-D</p>
<h2 id="就想偷偷懒自动打开而已"><a href="#就想偷偷懒自动打开而已" class="headerlink" title="就想偷偷懒自动打开而已"></a>就想偷偷懒自动打开而已</h2><p>刚刚拥有属于自己的小站，当然炒鸡炒鸡鸡冻。所以想着多写点文章啥的。写的多了，想着可不可以在Hexo new 文章的时候使用markdownPad自动打开刚添加的文章那。。这样粑粑就可以少做几件事情了，就可以那剩下来的时间玩耍了（LOL啊。炉石啊。啊  我的大海啊）。本来想法很好，也很切合实际咯。我就开始动手了、、谁知道弄了半天都没弄好，最后，打开网易云静了静突发灵感才搞定。。大海啊全是我的泪水。<br><img src="http://i2.piimg.com/567571/5c90f6253a6beb6b.png" class="img-center"><br>下面给各位看官解决方案L</p>
<p>解决方案（使用<code>hexo new article</code> 自动打开刚添加的博文）</p>
<ul>
<li>在Hexo目录下新建script目录</li>
<li>在script新建js脚本文件</li>
<li>脚本内容如下：<br>  <code>var exe = require(&#39;child_process&#39;);</code><br>  <code>hexo.on(&#39;new&#39;, function(data){</code><br>  <code>console.log(data);</code><br>  <code>exe.execFile(&#39;C:/Program Files (x86)/MarkdownPad 2/MarkdownPad2.exe&#39;,[data.path]);</code><br>  <code>});</code></li>
</ul>
<p>保存退出之后使用<code>hexo new article</code>命令后就可以用指定的app打开文章了，炒鸡方便。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=16858400&auto=1&height=66"></iframe>


<p>最后给大家分享一首自己很喜欢的歌、虽然是单身狗但是炒鸡想学会了唱给自己的女朋友听…</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="http://i1.piimg.com/567571/473944d51f13444e.png" alt=""></p>
<p><a href="http://www.steven7.top/">Steven`s Notes</a> by <a href="http://www.steven7.top/about.html">Steven</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.  </p>
<p>由<a href="http://www.steven7.top/about.html">裴士超</a>创作并维护的<a href="http://www.steven7.top">斯蒂芬</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me" target="_blank" rel="external">Steven`s Notes</a>博客（ <a href="http://www.steven7.top">http://www.steven7.top</a> ），版权所有，侵权必究。</p>
<hr>
<p>本文永久链接：<a href="http://www.steven7.top/2016/08/13/Hexo的奇淫技巧第一发.html">http://www.steven7.top/2016/08/13/Hexo的奇淫技巧第一发.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[win10下MarkdownPad相关问题解决]]></title>
      <url>http://www.steven7.top/2016/08/12/win10%E4%B8%8BMarkdownPad%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3.html</url>
      <content type="html"><![CDATA[<h3 id="markdownpad相关问题"><a href="#markdownpad相关问题" class="headerlink" title="markdownpad相关问题"></a>markdownpad相关问题</h3><h4 id="win10下MarkdownPad预览无法显示的解决"><a href="#win10下MarkdownPad预览无法显示的解决" class="headerlink" title="win10下MarkdownPad预览无法显示的解决"></a>win10下MarkdownPad预览无法显示的解决</h4><p><img src="http://easun.org/blog/upload/md_pd.png" alt=""><br>实时预览模式竟然不能用..wtf<br>难道逼我换软件！！！！<br>其实根据官网文档给出的提示</p>
<blockquote>
<p>LivePreview is not working - it displays an error message stating This view has crashed!</p>
<p>This issue has been specifically observed in Windows 8. You may see an error message as shown here, and no HTML will be rendered when you type in the Markdown Editor pane.</p>
<p>To fix this issue, please try installing the Awesomium 1.6.6 SDK.</p>
<p>If you continue to experience issues, please install Microsoft’s DirectX End-User Runtimes (June 2010).</p>
</blockquote>
<p>我们只需要下载安装<a href="http://markdownpad.com/download/awesomium_v1.6.6_sdk_win.exe" target="_blank" rel="external">Awesomium 1.6.6 SDK</a>.就可以了。</p>
<p>下载安装，再次打开，一切正常:-D<img src="http://easun.org/blog/upload/md_pd_ok.png" alt=""></p>
<h4 id="MarkdownPad上传图片不方便？"><a href="#MarkdownPad上传图片不方便？" class="headerlink" title="MarkdownPad上传图片不方便？"></a>MarkdownPad上传图片不方便？</h4><p>Are you kidding me？上传图片不方便？</p>
<p>那是因为你没有接收到这个神奇的网站的呐喊！！！！</p>
<blockquote>
<p><a href="http://yotuku.cn/" target="_blank" rel="external">http://yotuku.cn/</a></p>
</blockquote>
<p>打开这个网站你会感觉整个世界都变成彩色的了。再也没有什么东西可以阻止markdown统治这个世界了…ahahh 请原谅我的笑:-D</p>
<p>最后来分享一波。MarkdownPad的注册码。<img src="http://i2.piimg.com/567571/9bd6991f658a344b.png" alt=""></p>
<p>邮箱：</p>
<blockquote>
<p>Soar360@live.com</p>
</blockquote>
<p>授权秘钥：</p>
<blockquote>
<p>GBPduHjWfJU1mZqcPM3BikjYKF6xKhlKIys3i1MU2eJHqWGImDHzWdD6xh<br>MNLGVpbP2M5SN6bnxn2kSE8qHqNY5QaaRxmO3YSMHxlv2EYpjdwLcPwfeT<br>G7kUdnhKE0vVy4RidP6Y2wZ0q74f47fzsZo45JE2hfQBFi2O9Jldjp1mW8<br>HUpTtLA2a5/sQytXJUQl/<br>QKO0jUQY4pa5CCx20sV1ClOTZtAGngSOJtIOFXK599sBr5aIEFyH0K7H4B<br>oNMiiDMnxt1rD8Vb/ikJdhGMMQr0R4B+L3nWU97eaVPTRKfWGDE8/<br>eAgKzpGwrQQoDh+nzX1xoVQ8NAuH+s4UcSeQ==</p>
</blockquote>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="http://i1.piimg.com/567571/473944d51f13444e.png" alt=""></p>
<p><a href="http://www.steven7.top/">Steven`s Notes</a> by <a href="http://www.steven7.top/about.html">Steven</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.  </p>
<p>由<a href="http://www.steven7.top/about.html">裴士超</a>创作并维护的<a href="http://www.steven7.top">斯蒂芬</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me" target="_blank" rel="external">Steven`s Notes</a>博客（ <a href="http://www.steven7.top">http://www.steven7.top</a> ），版权所有，侵权必究。</p>
<hr>
<p>本文永久链接：<a href="http://www.steven7.top/2016/08/12/win10下MarkdownPad相关问题解决.html">http://www.steven7.top/2016/08/12/win10下MarkdownPad相关问题解决.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[谈谈Hexo搭建的个人博客]]></title>
      <url>http://www.steven7.top/2016/08/12/%E8%B0%88%E8%B0%88Hexo%E6%90%AD%E5%BB%BA%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.html</url>
      <content type="html"><![CDATA[<p>大学毕业之后回家断断续续将近2个月的时间了==本打算在家里把驾照考完，可是谁料到人实在是太多了！！导致现在还木有考科目四。马上就要开学了/(ㄒoㄒ)/~~。就在前天随意逛着逛着翻到了<a href="http://notes.iissnan.com/" target="_blank" rel="external">iissnan</a>的博客。感觉自己一直就想要这样一个简洁的博客。所以看了他的博客之后，当机立断就去买域名去了。</p>
<h2 id="挑选域名"><a href="#挑选域名" class="headerlink" title="挑选域名"></a>挑选域名</h2><p>当然购买域名有很多的途径。我以前也木有听说过百度开放云。不知道我怎么就点进百度开放云里面去买域名去了。现在怎么想也回想不起来为啥（简直Ridiculous）。<img src="http://i4.piimg.com/567571/370154642b07446e.png" alt=""><br>大致域名注册都跟这个页面长得差不多。我选择百度的原因还有可能就是他长得好看呗。然后输入自己想注册的网址然后付款就可以了。百度最近在做活动。我注册了.top的顶级域名才花了4块大洋。这一点一定是这一点我选择了它（便宜是王道）。然后这个域名就是属于你的了。然后就会有属于你的控制台来管理该域名。<img src="http://i2.piimg.com/567571/2ff1a4b90e570b2e.png" alt=""><br>进入域名服务可以对域名进行管理，对域名进行解析、续费等操作。<br><img src="http://i2.piimg.com/567571/7ab560ad26f26a3a.png" alt=""><br>的确现在有了属于自己的域名，然而我们还需要有自己的博客不是吗、意识到这个问题我们才要开始我们的正事:-D</p>
<h2 id="使用hexo搭建我们的博客"><a href="#使用hexo搭建我们的博客" class="headerlink" title="使用hexo搭建我们的博客"></a>使用<a href="https://hexo.io/zh-cn/" target="_blank" rel="external">hexo</a>搭建我们的博客</h2><p>hexo是一种快速、简洁且高效的博客框架。使用node.js技术可以让上百个页面在几秒内瞬间完成渲染。等等。。（都是抄的，原谅我手懒==）</p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>温馨提示：下面的操作仅针对windows用户，其他用户请参照官网。<br>安装<a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a>、<a href="https://git-scm.com/" target="_blank" rel="external">GIt</a>.</p>
<p>安装上述程序之后，执行以下代码完成hexo安装。</p>
<pre><code>npm install -g hexo-cli
</code></pre><p>安装Hexo完成之后，在指定的文件夹内初始化Hexo。</p>
<pre><code>cd folder
hexo init
npm install
</code></pre><p>其实到此为止，你已经初步拥有了一个自己简洁（说实话是简陋）的博客了。想了解关于框架详细内容的请转至hexo官网了解详情。作为我们高端审美来说，这么丑的博客当然是不可以了…hexo提供多种主题可供选择。我选择的是NexT。接下来我就以NexT来说。</p>
<h3 id="安装NexT"><a href="#安装NexT" class="headerlink" title="安装NexT"></a>安装<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">NexT</a></h3><p>官网提供了两种方式下载NexT。一种是git clone，另一种是下载压缩包。本文选择git clone的方式。</p>
<pre><code>cd your-hexo-site
git clone https://github.com/iissnan/hexo-theme-next themes/next
</code></pre><h4 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h4><p>打开Hexo位于站点根目录下的_config.yml文件，找到theme字段，并将其值更改为next。</p>
<pre><code>theme：next
</code></pre><p>这样，HexT主题安装成功。验证主题是否正确之前，最好使用hexo clean来清除hexo的缓存。</p>
<h4 id="验证主题"><a href="#验证主题" class="headerlink" title="验证主题"></a>验证主题</h4><p>生成静态文件，启动服务器并开启调试模式进行监控</p>
<pre><code>hexo generate
hexo s --debug
</code></pre><p>在服务启动的过程中，注意观察命令行是否有异常信息。当命令行输出中提示</p>
<blockquote>
<p>INFO  Hexo is running at <a href="http://0.0.0.0:4000/" target="_blank" rel="external">http://0.0.0.0:4000/</a>. Press Ctrl+C to stop.</p>
</blockquote>
<p>此时即可使用浏览器访问<a href="http://localhost:4000，检查站点是否正常运行。" target="_blank" rel="external">http://localhost:4000，检查站点是否正常运行。</a></p>
<p> 当你看到站点的外观与下面所示类似时说明你已经成功按照NexT主题。</p>
<p><img src="http://theme-next.iissnan.com/uploads/five-minutes-setup/validation-default-scheme-mac.png" alt=""></p>
<p>主题设定等请参照官网文档进行个性化设置。</p>
<h3 id="部署配置"><a href="#部署配置" class="headerlink" title="部署配置"></a>部署配置</h3><p>我们已经完成了Hexo个性化配置中的基本信息和主题配置，还剩一项部署 - deploy。</p>
<pre><code>hexo deploy
</code></pre><p>通过上述命令可以将你的hexo博客提交到github上，从而刷新你的github page。</p>
<p>换句话说，如果执行了new、clean、generate,只是在你的电脑上生成了最新的博客，如果不执行deploy，新添加的内容是不会被推送到GitHub Pages上的。</p>
<p>既然我们已经决定将Hexo部署到GitHub，那么我们还是先看看需要在GitHub上做哪些前置准备。</p>
<h3 id="连接到GitHub"><a href="#连接到GitHub" class="headerlink" title="连接到GitHub"></a>连接到GitHub</h3><p>如果还没有GItHub账号，在<a href="https://github.com/join" target="_blank" rel="external">这里</a>申请一个</p>
<p>如果拥有了账号，还没有GItHub Pages地址，在页面右上角你的头像旁边点击 + 号按钮，选择repository。在Repository name中填写</p>
<blockquote>
<p>[你的用户名].github.io</p>
</blockquote>
<p><strong>注意，你的用户名必须与你实际的用户名一字不差。</strong></p>
<p>然后选Public。</p>
<p>去掉 Initialize this repository with a README 前的钩。</p>
<p>然后点击 Create repository。</p>
<p>成功后，就可以通过 <a href="http://[你的用户名].github.io" target="_blank" rel="external">http://[你的用户名].github.io</a> 访问你的页面了。</p>
<p>也许它现在还空无一物，接下来我们就把Hexo的内容放进去。</p>
<h3 id="配置Deploy"><a href="#配置Deploy" class="headerlink" title="配置Deploy"></a>配置Deploy</h3><p>当你拥有了个人的GitHub Pages后，再回到Hexo的_config.yml文件，找到Deployment章节。</p>
<p>将type改为git，repository改为你的GitHub Pages地址。</p>
<p>然后执行下述代码就可以发布自己的博客了。</p>
<pre><code>hexo deploy
</code></pre><p>比如我的博客，地址应该是：</p>
<blockquote>
<p><a href="http://peishichao.github.io" target="_blank" rel="external">http://peishichao.github.io</a></p>
</blockquote>
<p>恭喜！！你已经使用Hexo完成了个人博客的搭建并将它发布在GitHub Pages可供公开访问啦！</p>
<h3 id="日常维护"><a href="#日常维护" class="headerlink" title="日常维护"></a>日常维护</h3><p>当部署成功后，我们日常只需要：</p>
<p>新建文章(new)</p>
<p>找到生成的.md然后编辑并保存</p>
<p>生成博客(generate)</p>
<p>部署(deploy)</p>
<p>就可以完成新文章的发布。</p>
<h3 id="将GitHub关联到域名上"><a href="#将GitHub关联到域名上" class="headerlink" title="将GitHub关联到域名上"></a>将GitHub关联到域名上</h3><p>上面我们已经申请过域名了，我们接下来要做的就是讲自己申请过的域名与github page关联。<br>登录访问github</p>
<blockquote>
<p>进入github中github page相应的项目中，在该项目中创建CNAME，其CNAME内容即是域名。</p>
</blockquote>
<p>查询github page的服务器IP地址</p>
<blockquote>
<p>可以使用国内的域名ip地址查询的<a href="http://ip.chinaz.com/" target="_blank" rel="external">工具</a>,将你自己的github page的域名输进去得到ip地址。</p>
</blockquote>
<p><img src="http://i1.piimg.com/567571/49c21bc128e4ff90.png" alt=""><br>然后进入你购买的域名的域名服务中进行域名解析，点击域名解析，依次填写相应内容。</p>
<blockquote>
<p>记录类型-A</p>
<p>主机记录-www</p>
<p>解析线路 默认</p>
<p>记录值填写github page的ip地址</p>
</blockquote>
<p>最后点击保存。<br>验证域名和github page关联是否成功。<br><img src="http://i1.piimg.com/567571/ad889e53a23882ee.png" alt=""><br><img src="http://i1.piimg.com/567571/7714d0350e403d6e.png" alt=""></p>
<p>夜深了，洗洗睡，回头再念叨。</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="http://i1.piimg.com/567571/473944d51f13444e.png" alt=""></p>
<p><a href="http://www.steven7.top/">Steven`s Notes</a> by <a href="http://www.steven7.top/about.html">Steven</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.  </p>
<p>由<a href="http://www.steven7.top/about.html">裴士超</a>创作并维护的<a href="http://www.steven7.top">斯蒂芬</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me" target="_blank" rel="external">Steven`s Notes</a>博客（ <a href="http://www.steven7.top">http://www.steven7.top</a> ），版权所有，侵权必究。</p>
<hr>
<p>本文永久链接：<a href="http://www.steven7.top/2016/08/12/谈谈Hexo搭建的个人博客.html">http://www.steven7.top/2016/08/12/谈谈Hexo搭建的个人博客.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://www.steven7.top/2016/08/11/hello-world.html</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="http://i1.piimg.com/567571/473944d51f13444e.png" alt=""></p>
<p><a href="http://www.steven7.top/">Steven`s Notes</a> by <a href="http://www.steven7.top/about.html">Steven</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.  </p>
<p>由<a href="http://www.steven7.top/about.html">裴士超</a>创作并维护的<a href="http://www.steven7.top">斯蒂芬</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me" target="_blank" rel="external">Steven`s Notes</a>博客（ <a href="http://www.steven7.top">http://www.steven7.top</a> ），版权所有，侵权必究。</p>
<hr>
<p>本文永久链接：<a href="http://www.steven7.top/2016/08/11/hello-world.html">http://www.steven7.top/2016/08/11/hello-world.html</a></p>
]]></content>
    </entry>
    
  
  
</search>
