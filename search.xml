<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[对于计算机开机过程的一些看法]]></title>
      <url>http://www.steven7.top/2016/09/08/%E5%AF%B9%E4%BA%8E%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BC%80%E6%9C%BA%E8%BF%87%E7%A8%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9C%8B%E6%B3%95/</url>
      <content type="html"><![CDATA[<p><img src="http://i1.piimg.com/567571/76e4a9900a7717ae.png" alt=""></p>
<a id="more"></a>
<p>对于大多数学计算机或者是非科班出身的童鞋，大多对于计算机的开机过程大致只了解到按下计算机电源开关的程度。我们对于计算机到底是如何开启的，如何<code>boot</code>的，了解的并不是很多。今天我就这些问题做一些小小的探讨。说的不对或者不好的地方尽情拍砖…</p>
<h4 id="系统引导"><a href="#系统引导" class="headerlink" title="系统引导"></a>系统引导</h4><p>其实对于操作系统我们有太多的未知。只能说前人实在是太腻害了。我们从按下计算机开关的那一刻开始慢慢的捋一捋思绪。</p>
<p>首先借鉴<a href="http://www.ruanyifeng.com/blog/2013/02/booting.html" target="_blank" rel="external">阮一峰的网络日志</a>中的一个问题：<code>boot</code>怎么理解？</p>
<p><code>boot</code>原本为靴子的意思。启动和靴子的关系是什么呐…这就扯到一门谚语了：</p>
<blockquote>
<p><code>&quot;pull oneself up by one&#39;s bootstraps&quot;</code></p>
</blockquote>
<p>中文解释为：拽着鞋带把自己提起来。有点常识的童鞋都知道这是不可能的。这和计算机的启动过程其实有相似的地方：必须首先运行程序才可以启动计算机，但是计算机不启动就无法运行程序。好矛盾..好纠结是不是…</p>
<p>上述烧脑问题解答：操作系统是由进程叠加而成的。然而进程是由进程创建而来。进程由进程创建而来..而来..来…所以万事必有一个根才可以。否则就陷入了无限循环的哲学问题了。所以，对于进程来说，规定了进程0为所有进程的上帝。进程0创建了进程1，进而一而再再而三的创建其他进程。所以，对于计算机启动而言也一定有相同的体系。首先我们必须要硬性规定一个起始程序。目前，我们通过探讨已经知道必须首先启动一个程序了。然而我们怎么启动这个程序那？想要启动一个程序，首先必须将这个程序装入内存吧…我们怎么才能把这个起始程序装入内存呐..这就回到了问题的关键–系统引导。</p>
<p>我们把：从用户按下计算机电源开关开始，到操作系统运行起来这段时间被称为“系统引导”。由上文可知，其实引导过程对于操作系统来说是至关重要的一环。因为木有引导，操作系统无法运行。</p>
<p>那么问题又来了：当我们按下计算机电源开关之后，到底是谁在工作那？这里我们又要贯穿一下计算机硬件相关的知识了==（<a href="http://www.cnblogs.com/BoyXiao/archive/2010/11/20/1882716.html" target="_blank" rel="external">寄存器相关</a>）。</p>
<p><strong>CS 寄存器 和 IP 寄存器：</strong></p>
<p>CS:IP 两个寄存器指示了 CPU 当前将要读取的指令的地址，其中  CS  为代码段寄存器，而   IP  为指令指针寄存器 。</p>
<p>那么问题又来了：什么叫做指示了 CPU 当前将要读取的指令呢？在 8086  CPU 中，为什么  CPU  会自动的执行指令呢？</p>
<p>这些指令肯定是存放在内存中的，但是  CPU  怎么知道这些指令存放在内存的那个位置呢？</p>
<p>比如，我有下面的两条指令要执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">MOV AX,1234H</div><div class="line">MOV BX,AX</div></pre></td></tr></table></figure>
<p>而假设这两条指令在内存中存放为：</p>
<p><img src="http://i4.buimg.com/567571/47976157fd6ff294.png" alt=""></p>
<p>很显然， 1000H:0000H 指向的是  MOV  AX，1234H  的首地址，如果 CPU 要读取到我的指令的话，很显然，必须要知道地址  1000H:0000H ，然后  CPU  就可以根据这个首地址，将汇编指令<strong>MOV  AX，1234H</strong>  所对应的机器码读入到  CPU  的指令寄存器中，最后便可以在  CPU  中进行处理了。</p>
<p>但关键是   CPU  如何知道我的  1000H:0000H  这个首地址？其实这就需要使用到  CS:IP  这个寄存器组了 。当我们运行一个可执行文件时，很明显，我们需要另外一个程序来将这个可执行文件加载到内存当中，关于这个加载可执行文件的程序，我们在这里不管他，点一下即可，一般是通过操作系统的外壳程序（也就是传说中的  Shell  程序），Shell  将可执行文件加载到内存中以后，就会设置  CPU  中的两个寄存器，即设置  CS:IP  两个寄存器指向可执行文件的起始地址，此后  CPU  便从这个起始地址开始读取内存中的指令，并且执行，比如我们在写汇编程序时，通常会使用  START  标记，其实这个标记就是用来标记起始地址的，当将一个汇编程序编译，连接成可执行文件以后，再通过操作系统的  Shell  程序将可执行文件加载到内存中以后，这个  START  所标记处的地址就是整个可执行文件的起始地址了 。</p>
<p><strong>也就是说，当一个可执行文件加载到内存中以后，CS:IP  两个寄存器便指向了这个可执行文件的起始地址，然后CPU  就可以从这个起始地址开始往下读取指令，当读取完指令后，CS:IP  将会自动的改变，基本上是改变  IP ，从而指向下一条要读取的指令，这样就可以执行这个可执行文件了 。</strong></p>
<p><strong>最后再对  CS:IP  总结一下：</strong></p>
<ol>
<li>你想让  CPU  执行哪行指令，你就让  CS:IP  指向保存有指令的那块内存即可。</li>
<li>任何时候，CS:IP  指向的地址中的内容都是  CPU  当前执行的指令。</li>
</ol>
<p>通过上述了解CS 和 IP 寄存器之后，我们就可以探索下面的问题了。</p>
<p>在用户按下计算机电源开关之后，CPU会自动的将其CS寄存器设定为0xFFFF，将其IP寄存器设定为0x0000。由于CS:IP指出了下一条指令的地址，因此CPU会跳到0xFFFF:0x0000处进行执行。为什么是这个地址而不是其它地址呢？这其实是一个很巧妙的设计。</p>
<p>我们接下来以8086为例，8086是16位的CPU，但是却有20根地址线。也就是说可以寻址2的20次幂=1M内存空间。（2的10次幂=1K，2的32次幂=4G，2的30次幂=1G）这段内存空间由RAM、ROM组成。ROM是随机自读存储器，里面的程序是在计算机出厂的时候直接烧死在里面的。<strong>它保存着计算机最重要的基本输入输出的程序、开机后自检程序和系统自启动程序，它可从CMOS中读写系统设置的具体信息。</strong>其主要功能是为计算机提供最底层的、最直接的硬件设置和控制。被称为BIOS（”Basic Input Output System”-基本输入输出系统）。 不同的硬件厂商这段程序也会随着机型的不同而不同。</p>
<p>正是因为这个原因：有可能A厂出产的计算机所带的这段程序的大小为1K，而B厂出产的这段程序的大小为2K。</p>
<p>如果将这段程序放在0x0000处，那么用户写的程序就可能从0x0400处开始也可能从 0x0800处开始，非常不统一。故而，将此段程序放在1M内存的顶部，那么用户写的程序就都可以从0x0000处开始了。</p>
<p>但将BIOS这段程序放在1M内存的顶部，如果这段程序大小为1K，那么应当从0xFFC00开始放。如果这段程序的大小为2K，那么应当从0xFF800开始放，对于CPU而言，到底是应当从0xFFC00开始执行还是应当从0xFF800开始执行呢？为了解决这个问题，8086规定，CPU均从0xFFFF0处开始执行，而在0xFFFF0处，放一条无条件转移指令JMP。如果A厂的BIOS是从0xFFC00开始放的，那么这条转移指令就跳转到0xFFC00处开始执行。如果B厂的BIOS是从0xFF800开始放的，那么这条转移指令就跳转到0xFF800处开始执行，各个厂家可以跟据自己所生产的BIOS程序的大小，来决定此转移指令具体跳转到的位置。</p>
<p>　这里有一点需要清楚的是，通常认为，内存编址是连续的，不会出现空洞，其实完全不是这样。比如，假设BIOS的编址是从 0xF0000开始，而RAM，即通常讲的内存编址是从0x00000开始，那么，如果用户只安装了32K内存，那么内存的编址范围就是 0x00000~0x07FFF，那么从0x08000至0xEFFFF处就没有安装内存，这就是一个内存空洞。</p>
<p>当CPU执行了放在0xFFFF0处的第一条指令后，就跳转到BIOS程序内部去执行了，下面就来看看BIOS都做了些什么。</p>
<p>BIOS的工作相当简单，主要的工作就是执行主机自检（POST）。</p>
<p>如果硬件出现问题，主板会发出不同含义的蜂鸣，启动中止。如果没有问题，屏幕就会显示CPU、内存、硬盘灯信息。</p>
<p>自检完成后，然后查找操作系统存在在哪个磁盘上，将操作系统载入。BIOS需要有一个外部存储设备的排序，排在前面的设备就是优先转交控制权的设备。这种排序叫做“启动顺序”。BIOS在查找各磁盘的操作系统时，主要是查找磁盘上的第一个扇区（0面0磁道1扇区），每个扇区是512字节，如果这是一个引导扇区，那么就将它载入0x7C00的内存地址 上，然后跳转到此地址上执行。如果此不是一个引导扇区，就继续查找下一个磁盘，看其上面是否存在引导扇区。如果所有的磁盘上都不存在引导扇区，则在屏幕上 打印出一条出错信息。（如果这512个字节的最后两个字节是0x55和0xAA，表明这个设备可以用于启动；如果不是，表明设备不能用于启动，控制权于是被转交给”启动顺序”中的下一个设备。）</p>
<p>这时，计算机的控制权就要转交给硬盘的某个分区了，这里又分成三种情况。</p>
<table>
<thead>
<tr>
<th>情况分类</th>
<th>情况分析</th>
</tr>
</thead>
<tbody>
<tr>
<td>卷引导记录</td>
<td>四个主分区里面，只有一个是激活的。计算机会读取激活分区的第一个扇区，叫做”卷引导记录”。”卷引导记录”的主要作用是，告诉计算机，操作系统在这个分区里的位置。然后，计算机就会加载操作系统了。</td>
</tr>
<tr>
<td>扩展分区和逻辑分区</td>
<td>计算机先读取扩展分区的第一个扇区，叫做”扩展引导记录”。它里面也包含一张64字节的分区表，但是最多只有两项（也就是两个逻辑分区）。计算机接着读取第二个逻辑分区的第一个扇区，再从里面的分区表中找到第三个逻辑分区的位置，以此类推，直到某个逻辑分区的分区表只包含它自身为止（即只有一个分区项）。因此，扩展分区可以包含无数个逻辑分区。&lt;很少用这种方式&gt;</td>
</tr>
<tr>
<td>启动管理器</td>
<td>计算机读取”主引导记录”前面446字节的机器码之后，不再把控制权转交给某一个分区，而是运行事先安装的<a href="http://en.wikipedia.org/wiki/Boot_loader#Modern_boot_loaders" target="_blank" rel="external">“启动管理器”</a>（boot loader），由用户选择启动哪一个操作系统。Linux环境中，目前最流行的启动管理器是<a href="http://en.wikipedia.org/wiki/GNU_GRUB" target="_blank" rel="external">Grub</a></td>
</tr>
</tbody>
</table>
<p>　引导扇区只有一扇区即512字节大，因此它的主要目的是把操作系统的内核读进内存，然后跳转到操作系统内核处开始执行。从编写操作系统角度来说，前面的CPU上电及BIOS的工作都不是操作系统能控制的，而从引导扇区开始，就完完全全可由操作系统来控制了，因此，编写引导扇区也是编写操作系统必要的工作之一。从BIOS跳入引导扇区后，计算机系统引导工作就算完成，怎样把操作系统内核读进内存，然后再安排一条跳转指令跳到内核处执行就是操作系统开发人员的工作了。</p>
<hr>
<p>512字节的主引导记录：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">　　（1） 第1-446字节：调用操作系统的机器码。</div><div class="line">　　（2） 第447-510字节：分区表（Partition table）。</div><div class="line">　　（3） 第511-512字节：主引导记录签名（0x55和0xAA）。</div></pre></td></tr></table></figure>
<p>硬盘分区有很多好处。考虑到每个区可以安装不同的操作系统，”主引导记录”因此必须知道将控制权转交给哪个区。<br>分区表的长度只有64个字节，里面又分成四项，每项16个字节。所以，一个硬盘最多只能分四个一级分区，又叫做”主分区”。<br>每个主分区的16个字节，由6个部分组成：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">　  （1） 第1个字节：如果为0x80，就表示该主分区是激活分区，控制权要转交给这个分区。四个主分区里面只能有一个是激活的。</div><div class="line">　　（2） 第2-4个字节：主分区第一个扇区的物理位置（柱面、磁头、扇区号等等）。</div><div class="line">　　（3） 第5个字节：主分区类型。</div><div class="line">　　（4） 第6-8个字节：主分区最后一个扇区的物理位置。</div><div class="line">　　（5） 第9-12字节：该主分区第一个扇区的逻辑地址。</div><div class="line">　　（6） 第13-16字节：主分区的扇区总数。</div></pre></td></tr></table></figure>
<p>最后的四个字节（”主分区的扇区总数”），决定了这个主分区的长度。也就是说，一个主分区的扇区总数最多不超过2的32次方。<br>如果每个扇区为512个字节，就意味着单个分区最大不超过2TB。再考虑到扇区的逻辑地址也是32位，所以单个硬盘可利用的空间最大也不超过2TB。如果想使用更大的硬盘，只有2个方法：一是提高每个扇区的字节数，二是增加扇区总数。</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="http://i1.piimg.com/567571/473944d51f13444e.png" alt=""></p>
<p><a href="http://www.steven7.top/">Steven`s Notes</a> by <a href="http://www.steven7.top/about.html">Steven</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.  </p>
<p>由<a href="http://www.steven7.top/about.html">裴士超</a>创作并维护的<a href="http://www.steven7.top">斯蒂芬</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me" target="_blank" rel="external">Steven`s Notes</a>博客（ <a href="http://www.steven7.top">http://www.steven7.top</a> ），版权所有，侵权必究。</p>
<hr>
<p>本文永久链接：<a href="http://www.steven7.top/2016/09/08/对于计算机开机过程的一些看法/">http://www.steven7.top/2016/09/08/对于计算机开机过程的一些看法/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[printf函数实现]]></title>
      <url>http://www.steven7.top/2016/09/06/printf%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p><img src="http://i4.buimg.com/567571/eae0cc18aa7647f4.png" alt=""></p>
<a id="more"></a>
<p>同样也是操作系统的课堂上面，老师说让写一下如何实现<code>printf</code>函数。所以想了解一下<code>printf</code>函数的实现原理。首先，在<code>The C Programming Language</code>第7章7.3小节：变长参数表中，作者以实现<code>printf</code>的一个最简单版本为例，介绍了如何以可移植的方式编写可处理变长参数表的函数。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">minprintf</span><span class="params">(<span class="keyword">char</span> *fmt,...)</span></span>&#123;</div><div class="line">va_list ap;</div><div class="line"><span class="keyword">char</span> *p,*sval;</div><div class="line"><span class="keyword">int</span> ival;</div><div class="line"><span class="keyword">double</span> dval;</div><div class="line"></div><div class="line">va_start(ap,fmt);</div><div class="line"><span class="keyword">for</span>(p=fmt;*p;p++)&#123;</div><div class="line">        <span class="keyword">if</span>(*p != <span class="string">'%'</span>)&#123;</div><div class="line">            <span class="built_in">putchar</span>(*p);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">switch</span>(*++p)&#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'d'</span>:</div><div class="line">        ival = va_arg(ap,<span class="keyword">int</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,ival);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'f'</span>:</div><div class="line">        dval = va_arg(ap,<span class="keyword">double</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%f"</span>,dval);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'s'</span>:</div><div class="line">        <span class="keyword">for</span>(sval = va_arg(ap,<span class="keyword">char</span> *);*sval;sval++)</div><div class="line">            <span class="built_in">putchar</span>(*sval);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">        <span class="built_in">putchar</span>(*p);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    va_end(ap);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于重点在于如何处理参数，所以<code>minprintf</code>重点在于处理字符串和参数。</p>
<p>通过查询<code>Linux</code>  <code>C</code> <code>API</code>参考手册可以得知：</p>
<p><code>printf</code>：格式化输出数据</p>
<p>表头文件：<code>#include&lt;stdio.h&gt;</code></p>
<p>定义函数：<code>int printf(const char *format,...);</code></p>
<p>省略号表示参数表中参数的数量和类型都是可变的。省略号只能出现在参数表的尾部。因为<code>minprintf</code>函数不需要像<code>printf</code>函数一样返回实际输出的字符数。因此，我们将它声明为以下形式：</p>
<p><code>void minprintf(const char *format,...);</code></p>
<p>编写<code>minprintf</code>函数的关键在于如何处理一个甚至连名字都不知道的参数表。</p>
<p>可喜的是，标准头文件<code>&lt;stdarg.h&gt;</code>中包含一组宏定义，C语言用宏来处理这些可变的参数。它们定义了如何遍历参数列表。这些宏看起来炒鸡复杂。</p>
<p>其原理：根据参数入栈的特点从最靠近第一个可变参数的固定参数开始，依次获取每个可变参数的地址。</p>
<p><a href="http://blog.csdn.net/holandstone/article/details/6947119" target="_blank" rel="external">stdarg.h详解</a>                     </p>
<p>本文概要总结其实现原理：</p>
<p>下面以函数<code>fun()</code>为例进行讲解：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span></div><div class="line"> &#123;</div><div class="line">       <span class="keyword">int</span> d;</div><div class="line">       ...</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>正常情况下C语言的函数参数的入栈规则为<code>_stdcall</code>,它是由右至左的，即函数的最右端的参数最先入栈。即入栈的顺序为：<code>c-b-a-d</code></p>
<p>其栈结构如下：</p>
<p>​    <code>0x1ffc--&gt;d</code></p>
<pre><code>`0x2000--&gt;a`

`0x2004--&gt;b`

`0x2008--&gt;c`
</code></pre><p>对于32位的系统最小的栈单元为<code>sizeof(int)</code>。函数的每个参数都至少占一个栈单元。因此，函数的所有参数都是存储在线性连续的栈空间中的，基于这种存储结构，这样就可以从可变参数函数中必须有的第一个普通参数来寻址后续的所有可变参数的类型及其值。</p>
<p>对于固定参数列表的函数，我们可以直接通过&amp;a得到a的地址。并且通过函数原型声明得到a的数据类型。</p>
<p>然而，对于变长参数列表的函数，我们无法采用上述方法。按照C标准可知，</p>
<blockquote>
<p>支持变长参数的函数在函数原型声明中，必须有至少一个最左固定参数。</p>
</blockquote>
<p>我们便可以通过其中的固定参数的地址。但是无论函数到底有多少个参数、以及每个参数到底是什么类型的，它们都和固定参数的传参过程是一致的，都是栈操作。如此，我们就可以推导出其他变长参数的位置。</p>
<p>因为栈的延伸方向为从高地址到低地址，栈底占据着最高的内存地址，先入栈的参数，地理位置最高。所以对于可变参数列表的函数 <code>void var_args_func(const char * fmt, ... )</code> 来说可以得到结论：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">first_vararg.addr = fmt.addr + x_sizeof(fmt); <span class="comment">// x_sizeof !=sizeof</span></div><div class="line"></div><div class="line">second_vararg.addr = first_vararg.addr + x_sizeof(first_vararg);</div><div class="line"></div><div class="line">......</div></pre></td></tr></table></figure>
<p>上述结论得出的如此的简单粗暴。根据这一结论实现以下算法：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">var_args_func</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * fmt, ...)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span>    *ap;</div><div class="line"></div><div class="line">    ap = ((<span class="keyword">char</span>*)&amp;fmt) + <span class="keyword">sizeof</span>(fmt);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *(<span class="keyword">int</span>*)ap);</div><div class="line"></div><div class="line">    ap =  ap + <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *(<span class="keyword">int</span>*)ap);</div><div class="line"></div><div class="line">    ap =  ap + <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, *((<span class="keyword">char</span>**)ap));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    var_args_func(<span class="string">"%d %d %s\n"</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">"hello world"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>期望结果如图所示：</p>
<p><img src="http://i4.buimg.com/567571/c308e26957b9a8b6.png" alt=""></p>
<p>上图是我在<code>Code::Blocks</code>编译器的运行结果</p>
<p><a href="http://c.biancheng.net/cpp/html/1117.html" target="_blank" rel="external">VC6.0中文版下载（支持XP、Win7、Win8、Win10）</a></p>
<p><a href="https://sourceforge.net/projects/codeblocks/files/Binaries/16.01/Windows/codeblocks-16.01mingw_fortran-setup.exe/download" target="_blank" rel="external">Code::Blocks下载</a></p>
<p>通过上述讲解我们已经可以明白C语言是如何处理可变参数列表的了。接下来我们就来探讨一下如何实现简单的可变参数的C语言函数。</p>
<p>想要了解可变参数列表函数的实现首先需要分析的是<code>stdarg.h</code></p>
<p><code>stdarg.h</code>源代码</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">#define __va_rounded_size(TYPE)  \</div><div class="line">  (((sizeof (TYPE) + sizeof (int) - 1) / sizeof (int)) * sizeof (int))</div><div class="line"></div><div class="line">#if __GNUC__ &lt; 2</div><div class="line"></div><div class="line">#ifndef __sparc__</div><div class="line">#define va_start(AP, LASTARG)                                           \</div><div class="line"> (AP = ((char *) &amp;(LASTARG) + __va_rounded_size (LASTARG)))</div><div class="line">#else</div><div class="line">#define va_start(AP, LASTARG)                                           \</div><div class="line"> (__builtin_saveregs (),                                                \</div><div class="line">  AP = ((char *) &amp;(LASTARG) + __va_rounded_size (LASTARG)))</div><div class="line">#endif</div><div class="line"></div><div class="line">void va_end (va_list);          /* Defined in gnulib */</div><div class="line">#define va_end(AP)</div><div class="line"></div><div class="line">#define va_arg(AP, TYPE)                                                \</div><div class="line"> (AP += __va_rounded_size (TYPE),                                       \</div><div class="line">  *((TYPE *) (AP - __va_rounded_size (TYPE))))</div><div class="line"></div><div class="line">#else    /* __GNUC__ &gt;= 2 */</div><div class="line"></div><div class="line">#ifndef __sparc__</div><div class="line">#define va_start(AP, LASTARG)                         \</div><div class="line"> (AP = ((char *) __builtin_next_arg ()))</div><div class="line">#else</div><div class="line">#define va_start(AP, LASTARG)                    \</div><div class="line">  (__builtin_saveregs (), AP = ((char *) __builtin_next_arg ()))</div><div class="line">#endif</div><div class="line"></div><div class="line">void va_end (va_list);        /* Defined in libgcc.a */</div><div class="line">#define va_end(AP)</div><div class="line"></div><div class="line">#define va_arg(AP, TYPE)                        \</div><div class="line"> (AP = ((char *) (AP)) += __va_rounded_size (TYPE),            \</div><div class="line">  *((TYPE *) ((char *) (AP) - __va_rounded_size (TYPE))))</div><div class="line"></div><div class="line">#endif    /* __GNUC__ &gt;= 2 */</div><div class="line"></div><div class="line">#else    /* not __GNUC__ */</div><div class="line"></div><div class="line"></div><div class="line">typedef char *va_list;</div><div class="line"></div><div class="line">#define __vasz(x)        ((sizeof(x)+sizeof(int)-1) &amp; ~(sizeof(int) -1))</div><div class="line"></div><div class="line">#define va_start(ap, parmN)    ((ap) = (va_list)&amp;parmN + __vasz(parmN))</div><div class="line">#define va_arg(ap, type)      \</div><div class="line">  (*((type *)((va_list)((ap) = (void *)((va_list)(ap) + __vasz(type))) \</div><div class="line">                            - __vasz(type))))</div><div class="line">#define va_end(ap)</div><div class="line"></div><div class="line"></div><div class="line">#endif /* __GNUC__ */</div><div class="line"></div><div class="line">#endif /* _STDARG_H */</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>行号</th>
<th>解析</th>
</tr>
</thead>
<tbody>
<tr>
<td>8</td>
<td>使用<code>typedef</code>进行了一个声明：<code>typedef char *va_list;</code></td>
</tr>
<tr>
<td>14</td>
<td>定义了用于编译器的内存对齐宏</td>
</tr>
<tr>
<td>17</td>
<td>#<code>if __GNUC__ &lt; 2</code>，进行<code>GCC</code>的版本判断，看当前版本是否大于2</td>
</tr>
<tr>
<td>20</td>
<td>使得ap指向函数中的第一个无名参数的首地址的宏</td>
</tr>
<tr>
<td>31</td>
<td><code>va_arg</code>宏使得<code>ap</code>指向下一个参数，已经处理了内存对齐，其中参数的类型为<code>TYPE</code></td>
</tr>
<tr>
<td>48</td>
<td><code>va_end</code> 与<code>va_start</code>成对使用.</td>
</tr>
</tbody>
</table>
<p>由此可知，如果想要写一个简单的可变参数列表的函数需要用到以下宏：</p>
<p><code>void va_start( va_list arg_ptr, prev_param );</code><br><code>type va_arg( va_list arg_ptr, type );</code><br><code>void va_end( va_list arg_ptr );</code></p>
<p>通过开篇给出的例子可知使用可变参数的步骤应如下：</p>
<p>（1）首先在函数中定义一个<code>va_list</code> 变量</p>
<p>（2）然后使用<code>va_start</code>初始化该变量，该宏返回的结果是第一个无名参数的首地址（该宏的第二个参数为可变参数列表中的固定参数）</p>
<p>（3）使用<code>va_arg</code>依次获取可变参数列表中的可变参数。（该宏的第二个参数为想要返回参数的参数类型）</p>
<p>（4）最后使用<code>va_end</code>结束参数获取</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="http://i1.piimg.com/567571/473944d51f13444e.png" alt=""></p>
<p><a href="http://www.steven7.top/">Steven`s Notes</a> by <a href="http://www.steven7.top/about.html">Steven</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.  </p>
<p>由<a href="http://www.steven7.top/about.html">裴士超</a>创作并维护的<a href="http://www.steven7.top">斯蒂芬</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me" target="_blank" rel="external">Steven`s Notes</a>博客（ <a href="http://www.steven7.top">http://www.steven7.top</a> ），版权所有，侵权必究。</p>
<hr>
<p>本文永久链接：<a href="http://www.steven7.top/2016/09/06/printf函数实现/">http://www.steven7.top/2016/09/06/printf函数实现/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[atoi函数实现]]></title>
      <url>http://www.steven7.top/2016/09/06/atoi-algorithm-implementation/</url>
      <content type="html"><![CDATA[<p><img src="http://i1.piimg.com/567571/7117cd662881209d.png" alt=""></p>
<a id="more"></a>
<p>操作系统课上，老师提出了一个问题：</p>
<blockquote>
<p>当我们通过键盘输入10000的时候，我们是通过键盘打出字符‘1’、‘0’、‘0’、‘0’、‘0’的。然而系统可以将其识别为数字10000。似不似感觉炒鸡神奇。老师给我们提示了一个函数：<code>atoi</code></p>
</blockquote>
<p>通过查询C语言API得知<code>atoi()</code>函数如下：</p>
<p><code>atoi()</code>函数用来将字符串转换成整数<code>(int)</code>，其原型为：</p>
<p><code>int atoi (const char * str);</code></p>
<p>【函数说明】atoi() 函数会扫描参数 str 字符串，跳过前面的空白字符（例如空格，tab缩进等，可以通过 <a href="http://c.biancheng.net/cpp/html/120.html" target="_blank" rel="external">isspace()</a> 函数来检测），直到遇上数字或正负符号才开始做转换，而再遇到非数字或字符串结束时(‘\0’)才结束转换，并将结果返回。</p>
<p>【返回值】返回转换后的整型数；如果 str 不能转换成 int 或者 str 为空字符串，那么将返回 0。</p>
<p>温馨提示：</p>
<p>ANSI C 规范定义了 <a href="http://c.biancheng.net/cpp/html/124.html" target="_blank" rel="external">stof()</a>、<a href="http://c.biancheng.net/cpp/html/125.html" target="_blank" rel="external">atoi()</a>、<a href="http://c.biancheng.net/cpp/html/126.html" target="_blank" rel="external">atol()</a>、<a href="http://c.biancheng.net/cpp/html/128.html" target="_blank" rel="external">strtod()</a>、<a href="http://c.biancheng.net/cpp/html/129.html" target="_blank" rel="external">strtol()</a>、<a href="http://c.biancheng.net/cpp/html/130.html" target="_blank" rel="external">strtoul()</a> 共6个可以将字符串转换为数字的函数，大家可以对比学习。另外在 C99 / C++11 规范中又新增了5个函数，分别是 atoll()、strtof()、strtold()、strtoll()、strtoull()，在此不做介绍，请大家自行学习。</p>
<p>范例如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* atoi example */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>      <span class="comment">/* printf, fgets */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span>     <span class="comment">/* atoi */</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">int</span> i;</div><div class="line">  <span class="keyword">char</span> buffer[<span class="number">256</span>];</div><div class="line">  <span class="built_in">printf</span> (<span class="string">"Enter a number: "</span>);</div><div class="line">  fgets (buffer, <span class="number">256</span>, <span class="built_in">stdin</span>);</div><div class="line">  i = atoi (buffer);</div><div class="line">  <span class="built_in">printf</span> (<span class="string">"The value entered is %d. Its double is %d.\n"</span>,i,i*<span class="number">2</span>);</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Output:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Enter a number: 73</div><div class="line">The value entered is 73. Its double is 146.</div></pre></td></tr></table></figure>
<p>通过了解<code>atoi()</code>函数之后可以发现，要想实现<code>atoi()</code>函数要注意一下问题：</p>
<ul>
<li>跳过前面的空白字符</li>
<li>遇到数字或字符号要开始转换</li>
<li>再遇到非数字或字符串结束时结束转换</li>
<li>异常输入的情况输入0</li>
</ul>
<p>上述几点都是通过API提取出来的，包括了函数的开始条件以及结束条件。但是API中忽略了一个很重要的问题那就是没有考虑<strong><em>溢出</em></strong>的情况。</p>
<blockquote>
<p>注意：考虑溢出的情况，应该将输入数据与<code>int</code>值所能表示的最大值<code>INT_MAX</code>和最小值<code>INT_MIN</code>进行比较</p>
</blockquote>
<p><code>C</code>中<code>int</code>类型32位,范围是-2147483648到2147483647.</p>
<p>（1）最轻微的上溢是 <code>INT_MAX + 1</code> ：结果是 <code>INT_MIN</code>。<br>（2）最严重的上溢是 <code>INT_MAX + INT_MAX</code> ：结果是 -2。<br>（3）最轻微的下溢是 <code>INT_MIN - 1</code> ：结果是 <code>INT_MAX</code>。<br>（4）最严重的下溢是 <code>INT_MIN +INT_MIN</code> ：结果是 0。</p>
<p>atoi函数的实现如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INT_MAX ((int)0x7FFFFFFF)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INT_MIN ((int)0x80000000)</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">myatoi</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * str)</span></span>;</div><div class="line"><span class="keyword">bool</span> vaild = <span class="literal">true</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">myatoi</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * str)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">bool</span> minus = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> result = <span class="number">0</span>;</div><div class="line">    vaild = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">if</span>(str==<span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(*str==<span class="string">' '</span>)</div><div class="line">        str++;</div><div class="line">    <span class="keyword">if</span>(*str==<span class="string">'-'</span>)&#123;</div><div class="line">        minus = <span class="literal">true</span>;</div><div class="line">        str++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(*str==<span class="string">'+'</span>)&#123;</div><div class="line">        str++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(*str&lt;<span class="string">'0'</span>||*str&gt;<span class="string">'9'</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    vaild = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">while</span>(*str&gt;=<span class="string">'0'</span>&amp;&amp;*str&lt;=<span class="string">'9'</span>)&#123;</div><div class="line">        result = result*<span class="number">10</span>+(*str-<span class="string">'0'</span>);</div><div class="line">        <span class="keyword">if</span>((minus &amp;&amp; result&gt;INT_MAX+<span class="number">1L</span>L)|| (!minus &amp;&amp; result&gt;INT_MAX))&#123;</div><div class="line">            vaild = <span class="literal">false</span>;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span> ;</div><div class="line">        &#125;</div><div class="line">        str++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(minus)</div><div class="line">        result*=<span class="number">-1</span>;</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>)result;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i,j;</div><div class="line">    <span class="keyword">char</span> buffer[<span class="number">256</span>];</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"please input number: "</span>);</div><div class="line">    fgets(buffer,<span class="number">256</span>,<span class="built_in">stdin</span>);</div><div class="line">    i = atoi(buffer);</div><div class="line">    j = myatoi(buffer);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"The value entered is %d. Its double is %d.\n"</span>,i,i*<span class="number">2</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"The value entered is %d. Its double is %d.\n"</span>,j,j*<span class="number">2</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>output:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">please input number: 2147483647</div><div class="line">The value entered is 2147483647. Its double is -2.</div><div class="line">The value entered is 2147483647. Its double is -2.</div><div class="line">please input number: -2147483648</div><div class="line">The value entered is -2147483648. Its double is 0.</div><div class="line">The value entered is -2147483648. Its double is 0.</div><div class="line">please input number: 2147483648</div><div class="line">The value entered is -2147483648. Its double is 0.</div><div class="line">The value entered is 0. Its double is 0.</div><div class="line">please input number: -2147483649</div><div class="line">The value entered is 2147483647. Its double is -2.</div><div class="line">The value entered is 0. Its double is 0.</div></pre></td></tr></table></figure>
<blockquote>
<p>注意:C语言自带的<code>atoi()</code>函数没有考虑到数据溢出的情况。</p>
</blockquote>
<p> <code>if((minus &amp;&amp; result&gt;INT_MAX+1LL)|| (!minus &amp;&amp; result&gt;INT_MAX))</code></p>
<p>当输入的数据带负号时，并且结果的绝对值&gt;2147483648，说明已达到下溢；当输入的数据不带负号，并且结果的绝对值&gt;2147483647,说明已达到上溢。</p>
<p><a href="http://cpp.sh/" target="_blank" rel="external"><code>在线C++ shell</code></a></p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="http://i1.piimg.com/567571/473944d51f13444e.png" alt=""></p>
<p><a href="http://www.steven7.top/">Steven`s Notes</a> by <a href="http://www.steven7.top/about.html">Steven</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.  </p>
<p>由<a href="http://www.steven7.top/about.html">裴士超</a>创作并维护的<a href="http://www.steven7.top">斯蒂芬</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me" target="_blank" rel="external">Steven`s Notes</a>博客（ <a href="http://www.steven7.top">http://www.steven7.top</a> ），版权所有，侵权必究。</p>
<hr>
<p>本文永久链接：<a href="http://www.steven7.top/2016/09/06/atoi-algorithm-implementation/">http://www.steven7.top/2016/09/06/atoi-algorithm-implementation/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[毕业回想-附赠蹭饭神器]]></title>
      <url>http://www.steven7.top/2016/08/23/graduatefromcsu/</url>
      <content type="html"><![CDATA[<p><img src="http://i4.buimg.com/567571/8af70b8671fa2ae1.jpg" alt=""></p>
<a id="more"></a>
 <blockquote class="blockquote-center">唯美味与旧识，不可辜负</blockquote>

<p>毕业有段时间了，回想起毕业那段时间天天的喝酒聚餐，现在就有点小怀念了。</p>
<p>可能是要上学了吧。要接触新的同学新的环境，激起了过往。</p>
<p>前几天突然想记录一下同学们的去向，以免忘了，尴尬，或者说，去见一趟也好。</p>
<p>平常的联系也不过就是打游戏时开开黑或者在群里聊聊天。感觉接下来的离相见的日子还有挺久的吧。。</p>
<p>提起笔来想写点东西，然而写了开头就不知道怎么写下去了。。</p>
<p>这几日，随意翻了翻找了找，搞了一个毕业蹭饭地图。希望有用到的时候。</p>
<p><a href="http://www.steven7.top/software12-where/">左家垅男子职业学校软件1201班蹭饭地图演示</a></p>
<p><a href="http://www.steven7.top/software12-where/index.html">左家垅男子职业学校软件1201班蹭饭地图源码下载</a></p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="http://i1.piimg.com/567571/473944d51f13444e.png" alt=""></p>
<p><a href="http://www.steven7.top/">Steven`s Notes</a> by <a href="http://www.steven7.top/about.html">Steven</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.  </p>
<p>由<a href="http://www.steven7.top/about.html">裴士超</a>创作并维护的<a href="http://www.steven7.top">斯蒂芬</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me" target="_blank" rel="external">Steven`s Notes</a>博客（ <a href="http://www.steven7.top">http://www.steven7.top</a> ），版权所有，侵权必究。</p>
<hr>
<p>本文永久链接：<a href="http://www.steven7.top/2016/08/23/graduatefromcsu/">http://www.steven7.top/2016/08/23/graduatefromcsu/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[GitHubHelp-SSH相关问题Error:Permission-denied(publickey)]]></title>
      <url>http://www.steven7.top/2016/08/19/peoblem-about-git/</url>
      <content type="html"><![CDATA[<p><img src="http://i2.buimg.com/567571/b06ebb799f1e90bc.png" alt=""></p>
<a id="more"></a>
<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>我相信很多人都会和我一样，使用<code>github</code>的时候，总是会被各种各样的问题所困扰，实在是让人头痛不已啊 ╮(╯_╰)╭</p>
<p>下述内容翻译于<code>GItHub Help</code><a href="https://help.github.com/articles/error-permission-denied-publickey/" target="_blank" rel="external">官网</a>，各位看官可以选择自行查看，或选择继续阅读。（下述内容仅适用于<code>windows</code>用户，其他用户请转至官网）</p>
<h4 id="SSH相关问题"><a href="#SSH相关问题" class="headerlink" title="SSH相关问题"></a><code>SSH</code>相关问题</h4><h5 id="错误：权限被拒绝（公钥）-Error-Permission-denied-publickey"><a href="#错误：权限被拒绝（公钥）-Error-Permission-denied-publickey" class="headerlink" title="错误：权限被拒绝（公钥）-Error: Permission denied (publickey)"></a>错误：权限被拒绝（公钥）-<code>Error: Permission denied (publickey)</code></h5><p>该错误表示<strong><em>服务器拒绝连接</em></strong>，可能的情况有很多种，其中常见的例子说明如下：</p>
<ul>
<li><p>应该使用管理员权限使用<code>git</code></p>
<p><code>sudo git push</code></p>
</li>
<li><p>确保您连接到正确的服务器地址</p>
<p> 打字很辛苦，我们众所周知。请耐心书写。无论如何，你都没有办法连接到”<code>githib.com</code>“或者“<code>guthub.com</code>”的。在某些情况下，企业网络可能因为<code>DNS</code>解析记录等造成相关问题。</p>
<p> 为了确保你正在连接正确的<code>domain</code>，你可以尝试输入一下内容:</p>
<pre><code>$ ssh -vT git@github.com
OpenSSH_5.6p1, OpenSSL 0.9.8r 8 Feb 2011
debug1: Reading configuration data /Users/you/.ssh/config
debug1: Reading configuration data /etc/ssh_config
debug1: Applying options for *
debug1: Connecting to github.com [192.30.252.131] port 22.
</code></pre><p> 确保<code>IP</code>地址<code>192.30.252.131</code>以及端口<code>22</code>。除非你使用<a href="https://help.github.com/articles/using-ssh-over-the-https-port/" target="_blank" rel="external"><code>SSH over HTTPS</code></a>的方式覆盖了该设置。倘若如此：</p>
<hr>
<p> 有时候，防火墙拒绝<code>SSH</code>连接。你可以尝试使用<code>HTTPS</code>端口连接作为<code>SSH</code>连接的<code>clone</code>。大多数的防火墙允许这样，但是代理服务器可能会干扰。</p>
<p> 测试是否是<code>SSH over HTTPS</code>尝试一下输入：</p>
<pre><code>$ ssh -T -p 443 git@ssh.github.com
Hi username! You&apos;ve successfully authenticated, but GitHub does not
provide shell access.
</code></pre></li>
</ul>
<p>   如果测试成功，那太棒了。</p>
<p>   如果你能够通过<code>SSH</code>连接到<code>git@ssh.github.com</code>通过端口<code>443</code>，那么你可以强制所有<code>GitHub</code>连接通过该端口和服务器。</p>
<p>   更改<code>~/.ssh/config</code>文件：</p>
<pre><code>Host github.com
  Hostname ssh.github.com
  Port 443
</code></pre><p>  再次尝试：</p>
<pre><code>$ ssh -T git@github.com
Hi username! You&apos;ve successfully authenticated, but GitHub does not
provide shell access.
</code></pre><ul>
<li><p>总是使用<code>git</code>用户    </p>
<p> 任何连接，包括<code>remote URLs</code>，必须使用<code>git</code>用户，如果你尝试连接到你的<code>GitHub</code> 用户名，它将会失败。</p>
<pre><code>$ ssh -T billy.anyteen@github.com
Permission denied (publickey).
</code></pre><p> 如果你的连接失败，并且你正在使用你的<code>github</code> 用户名作为<code>remote URL</code>，你可以修改<code>remote URL</code>去使用<code>git</code>用户。</p>
<p> <code>git remote set-url</code>命令可以改变已经存在的远程资源库<code>URL</code>。</p>
<p> <code>git remote set-url</code>包括两个参数：</p>
<p> 现有的远程名：<code>origin/upstream</code></p>
<p> <code>URL</code>:<code>https://github.com/USERNAME/OTHERREPOSITORY.git/git@github.com:USERNAME/OTHERREPOSITORY.git</code></p>
<p> 转换<code>remote URLs</code>从<code>SSH</code>到<code>HTTPS</code>：</p>
<pre><code>$ git remote -v
origin  git@github.com:USERNAME/REPOSITORY.git (fetch)
origin  git@github.com:USERNAME/REPOSITORY.git (push)
$ git remote set-url origin https://github.com/USERNAME/OTHERREPOSITORY.git
$ git remote -v
# Verify new remote URL
origin  https://github.com/USERNAME/OTHERREPOSITORY.git (fetch)
origin  https://github.com/USERNAME/OTHERREPOSITORY.git (push)
</code></pre><p> 下一次你使用<code>git push</code>等操作时，会被询问到<code>GitHub</code>的用户名和密码。               </p>
<p> 如果你不想被询问密码，你可以执行以下命令：</p>
<pre><code>`git config --global credential.helper store`
</code></pre><p> 转换<code>remote URLs</code>从<code>HTTPS</code>到<code>SSH</code>：</p>
</li>
</ul>
<pre><code>$ git remote -v
origin  https://github.com/USERNAME/REPOSITORY.git (fetch)
origin  https://github.com/USERNAME/REPOSITORY.git (push)
$ git remote set-url origin git@github.com:USERNAME/OTHERREPOSITORY.git
$ git remote -v
# Verify new remote URL
origin  git@github.com:USERNAME/OTHERREPOSITORY.git (fetch)
origin  git@github.com:USERNAME/OTHERREPOSITORY.git (push)
</code></pre><ul>
<li><p>确保你有密钥</p>
<p> <a href="https://desktop.github.com/" target="_blank" rel="external"><code>GitHub for Windows</code></a>是最好的选择。你可以用于<code>clone</code>资源库而不需要密钥。并且它可以使用<code>GIt Bash</code>工具。（<code>github</code>实力推广一波，不是我的锅啊）</p>
<p>如果你使用的是<code>Git Bash</code>工具，验证如下：</p>
<pre><code># start the ssh-agent in the background
eval &quot;$(ssh-agent -s)&quot;
Agent pid 59566
</code></pre></li>
</ul>
<p>​    如果你使用的是<code>git for windows</code>工具，验证如下：</p>
<pre><code># start the ssh-agent in the background
eval $(ssh-agent -s)
Agent pid 59566
</code></pre><p>​    确保你拥有私钥并且已经加载到<code>SSH</code>中，验证如下：(<code>OpenSSH 6.7 or older</code>)</p>
<pre><code>$ ssh-add -l
2048 a0:dd:42:3c:5a:9d:e4:2a:21:52:4e:78:07:6e:c8:4d /Users/you/.ssh/id_rsa (RSA)
</code></pre><p>​    <code>OpenSSH 6.8 or newer</code></p>
<pre><code>$ ssh-add -l -E md5
2048 MD5:a0:dd:42:3c:5a:9d:e4:2a:21:52:4e:78:07:6e:c8:4d /Users/you/.ssh/id_rsa (RSA)
</code></pre><p>​    如果没有打印出相关信息，你需要去生成新的<code>SSH</code>钥匙。<a href="https://help.github.com/articles/generating-an-ssh-key/" target="_blank" rel="external">请戳我</a></p>
<p>​    检查是否存在已经存在的<code>SSH</code>密钥。<a href="https://help.github.com/articles/checking-for-existing-ssh-keys/" target="_blank" rel="external">戳我</a></p>
<p>​    生成<code>SSH</code>密钥并添加至<code>ssh-agent</code>。 <a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/" target="_blank" rel="external">戳我戳我</a></p>
<p>​    添加新的密钥到你的<code>GitHub</code>账户。 <a href="https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/" target="_blank" rel="external">戳我戳我戳我</a></p>
<p>​    上述情况翻译于<code>GitHub</code> 官网翻译文档</p>
<h4 id="Hexo主题相关问题解答："><a href="#Hexo主题相关问题解答：" class="headerlink" title="Hexo主题相关问题解答："></a><code>Hexo</code>主题相关问题解答：</h4><p><code>Hexo deploy</code>相关问题基本都可以从上面找到答案。如果上述方案无法解决，以下方案实在是无奈之举–纯属看各位看官的运气。</p>
<p><code>Hexo</code>主题配置：</p>
<pre><code>deploy:
  type: git 
  repo: git@github.com:peishichao/peishichao.github.io.git
  #repo: https://github.com/peishichao/peishichao.github.io.git
  branch: master
</code></pre><h4 id="hexo-deploy时重复输入用户名密码的问题"><a href="#hexo-deploy时重复输入用户名密码的问题" class="headerlink" title="hexo deploy时重复输入用户名密码的问题"></a><code>hexo deploy</code>时重复输入用户名密码的问题</h4><p>将资源库修改为<code>git@github.com:username/username.repository .git</code></p>
<h4 id="hexo-deploy突然执行失败，找不到原因"><a href="#hexo-deploy突然执行失败，找不到原因" class="headerlink" title="hexo deploy突然执行失败，找不到原因"></a><code>hexo deploy</code>突然执行失败，找不到原因</h4><p>尝试更改<code>git</code>版本，卸载高版本安装低版本</p>
<h4 id="hexo-deploy偶尔失常"><a href="#hexo-deploy偶尔失常" class="headerlink" title="hexo deploy偶尔失常"></a><code>hexo deploy</code>偶尔失常</h4><p>请过段时间尝试，我就是一个赤裸裸的例子，<code>hexo d</code>一直好好的，突然无法使用，各种报错，查询无数资料，才编写了这边文章，一直熬夜到凌晨2点都没有搞定，结果早晨一觉醒来一起变得那么的美好–:-D</p>
<p>==纠结原因可能是电脑，网络，vpn等各方面不知道的因素–与其纠结不如睡觉(～﹃～)~zZ</p>
<p>学会使用控制变量法找寻问题的关键，重启机器是最无奈也是最好的抉择==</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="http://i1.piimg.com/567571/473944d51f13444e.png" alt=""></p>
<p><a href="http://www.steven7.top/">Steven`s Notes</a> by <a href="http://www.steven7.top/about.html">Steven</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.  </p>
<p>由<a href="http://www.steven7.top/about.html">裴士超</a>创作并维护的<a href="http://www.steven7.top">斯蒂芬</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me" target="_blank" rel="external">Steven`s Notes</a>博客（ <a href="http://www.steven7.top">http://www.steven7.top</a> ），版权所有，侵权必究。</p>
<hr>
<p>本文永久链接：<a href="http://www.steven7.top/2016/08/19/peoblem-about-git/">http://www.steven7.top/2016/08/19/peoblem-about-git/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo的奇淫技巧第三发：添加背景以及网站图标设置]]></title>
      <url>http://www.steven7.top/2016/08/16/hexoskillthree/</url>
      <content type="html"><![CDATA[<p><img src="http://i4.buimg.com/567571/aecc6833cfb98a61.png" alt=""></p>
<a id="more"></a>
<p>闲来无事总想捣鼓捣鼓自己的这个小博客..的确是闲的蛋疼啊 ︿(￣︶￣)︿</p>
<p>先赠送给大家一个小技巧吧！</p>
<hr>
<p>我总是感觉显示文章摘要的时候，如果显示的全是文字总是感觉很<code>low</code>，所以，就像这篇文章一样你们进来的时候看到的效果一样，是不是瞬间感觉B格满满的呢:-D</p>
<p>对于<code>NexT</code>主题来讲，大家可以设置默认文章截取长度作为文章摘要参考：<a href="http://theme-next.iissnan.com/faqs.html" target="_blank" rel="external">NexT官方文档</a></p>
<p>但是还是建议大家使用<code>&lt;!-- more --&gt;</code>标签自己选择性截取比较有代表性。</p>
<p>文章摘要大图形式显示我就是使用的<code>&lt;!-- more --&gt;</code>标签，大家一定还会说，每次写文章去找一张图，我的尴尬症都要犯了==那懒人的福利又来了</p>
<p><code>&lt;img src=&quot;https://source.unsplash.com/random/1600x900&quot;&gt;</code></p>
<p>大家只需要将这个代码贴到<code>&lt;!-- more --&gt;</code>标签的前面就可以了，是不是很简单啊！</p>
<p><code>unsplash</code>可以随意生成绝美大图作为文章封面，瞬间B格满满滴–</p>
<p>滴滴滴，学长卡快上车–<code>unsplash</code><a href="https://source.unsplash.com/" target="_blank" rel="external">官网</a></p>
<hr>
<h4 id="添加网站背景"><a href="#添加网站背景" class="headerlink" title="添加网站背景"></a>添加网站背景</h4><p><code>Hexo NexT</code>的确留白很多，但是总是感觉空空荡荡的，话说一开始我的确是因为喜欢他这种简洁美才选择它的不是嘛！!<code>wtf</code>我真是一个花心的男纸==</p>
<p>我现在的确也还是很喜欢它这种简洁美，但是我还是想给它加上点色彩，所以就添加点背景试试咯。</p>
<ol>
<li><p>首先先找到自己喜欢的一张背景图片是关键、、我可是找了好久才找到一张自己喜欢的。如果各位看官喜欢我的背景的话，小弟就把它送给你们把！！拿去收好不送:-D(<a href="http://i4.buimg.com/567571/85118244e0cdca9b.png" target="_blank" rel="external">黑白齿轮</a>)</p>
</li>
<li><p>将自己的网站背景图片置于<code>Hexo/themes/next/source/images</code>下</p>
</li>
<li><p>修改以下文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Hexo/themes/next/source/css/_schemes/Pisces/index.styl</div><div class="line">1 line: modify background label</div><div class="line">body &#123; background:url(/images/background.png);&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>完成任务:-D</strong></p>
<p>效果图就跟我的博客长得一样咯 ！</p>
<h4 id="设置网站图标"><a href="#设置网站图标" class="headerlink" title="设置网站图标"></a>设置网站图标</h4><p>设置网站图标也是首先找到自己喜欢的网站图标，这个问题大家一定又是炒鸡纠结的啊哈哈–莫怨我仰天长笑 –因为我就是这么纠结的银/(ㄒoㄒ)/~~</p>
<ul>
<li>大家可以选择自己制作，推荐有<code>PS</code>功底的银尝试</li>
<li>选择制作好的，想我们这种懒蛋只有这个路数了。接住我的<a href="http://www.easyicon.net/" target="_blank" rel="external">天马流星拳</a>。大家可以在里面尽情的选择，在自由的大海里面徜徉辣-</li>
</ul>
<p>选择完成之后，大家只需要将这个<code>ico</code>文件放在<code>Hexo/source</code>文件夹下面即可</p>
<p>大家一定会问就这么简单！！！</p>
<p><del>柯南新一说：真相永远只有一个！！</del></p>
<blockquote>
<p>因为在<code>Hexo/themes/next/_config.yml</code>中，<code>NexT</code>主题已经提前为我们设置了网站图标<code>line 6</code>；</p>
</blockquote>
<p>对于其他主题的用户而言：<code>Hexo</code><a href="https://hexo.io/zh-cn/docs/helpers.html#favicon_tag" target="_blank" rel="external">官方文档</a>中有相应的指导：</p>
<blockquote>
<p>将<code>&lt;%- favicon_tag(path) %&gt;</code> 代码置于对应主题配置文件中即可。</p>
</blockquote>
<p>请其他主题用户自行尝试，本博主也木有试过哦==</p>
<p>问题相关解答：</p>
<table>
<thead>
<tr>
<th>问题描述</th>
<th>解答</th>
</tr>
</thead>
<tbody>
<tr>
<td>设置完网站图标之后不显示</td>
<td>请更换浏览器尝试</td>
</tr>
</tbody>
</table>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="http://i1.piimg.com/567571/473944d51f13444e.png" alt=""></p>
<p><a href="http://www.steven7.top/">Steven`s Notes</a> by <a href="http://www.steven7.top/about.html">Steven</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.  </p>
<p>由<a href="http://www.steven7.top/about.html">裴士超</a>创作并维护的<a href="http://www.steven7.top">斯蒂芬</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me" target="_blank" rel="external">Steven`s Notes</a>博客（ <a href="http://www.steven7.top">http://www.steven7.top</a> ），版权所有，侵权必究。</p>
<hr>
<p>本文永久链接：<a href="http://www.steven7.top/2016/08/16/hexoskillthree/">http://www.steven7.top/2016/08/16/hexoskillthree/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[本博客的SEO优化（2）-让谷歌和百度尽快收录你]]></title>
      <url>http://www.steven7.top/2016/08/15/Hexo-Seo-2/</url>
      <content type="html"><![CDATA[<p>前言</p>
<p>亲妈啊！！这真的是我这几天写博文遇到的最最最头痛的问题-让度娘和谷哥尽快的收了我啊/(ㄒoㄒ)/~~</p>
<p>窝也知道刚开始建的站不可能这么快收录的，然而我这不是心急如焚嘛！！<img src="http://i2.buimg.com/567571/b2c39f2227ba4a78.png" alt=""></p>
<p> <strong><u>接下来就来交大家脱坑吧==</u></strong></p>
<ul>
<li><a href="http://www.steven7.top/2016/08/14/%E5%9F%BA%E4%BA%8EHexoNexT%E7%9A%84SEO%E4%BC%98%E5%8C%96/#more">基于HexoNexT的SEO优化</a></li>
</ul>
<ul>
<li><p>首先想要被收录要提交你的网址给百度和谷歌</p>
<p>​（否则人家咋知道你的网址(ToT)/~~~）</p>
<p>​<a href="http://www.baidu.com/search/url_submit.htm" target="_blank" rel="external">百度引擎提交入口</a></p>
<p>​<a href="https://www.google.com/webmasters/tools/home?hl=zh-CN" target="_blank" rel="external">Google搜索引擎提交入口</a></p>
</li>
<li><p>接下来最好大家注册一下度娘和谷哥的站长服务，以便于你更好的管理自己的网站</p>
<p>​<a href="http://zhanzhang.baidu.com/" target="_blank" rel="external">百度站长平台欢迎您</a></p>
<p>​<a href="https://www.google.com/webmasters/tools/home?hl=zh-CN" target="_blank" rel="external">谷歌站长平台欢迎您</a></p>
</li>
</ul>
<h4 id="验证网站拥有权"><a href="#验证网站拥有权" class="headerlink" title="验证网站拥有权"></a>验证网站拥有权</h4><p>​    站长平台基本上都需要你去验证网站，添加并验证后，证明您是该域名的    所有者之后才可以进行相关操作。各位看官可以根据自己的需求选择特定的验证方式完成验证。</p>
<p><img src="http://i1.buimg.com/567571/8388041bf487bba5.png" alt=""></p>
<p>等待验证完成之后可以进行相关的网页抓取操作，以便于搜索引擎收录。</p>
<h4 id="robots测试"><a href="#robots测试" class="headerlink" title="robots测试"></a><code>robots</code>测试</h4><p>百度和谷歌都提供了类似的<code>robots</code><u>测试工具</u>便于我们测试<code>robots.txt</code>是否符合规范。</p>
<p><a href="http://zhanzhang.baidu.com/robots/" target="_blank" rel="external">百度<code>robots</code></a></p>
<p><a href="https://www.google.com/webmasters/tools" target="_blank" rel="external">谷歌<code>robots.txt</code>测试工具</a></p>
<p>百度<code>robots</code> 工具没有提示，只是提示检测更新。</p>
<p>谷歌<code>robots.txt</code>测试工具会提示你错误，请修改</p>
<h4 id="提交站点地图"><a href="#提交站点地图" class="headerlink" title="提交站点地图"></a>提交站点地图</h4><p>我们在<a href="http://www.steven7.top/2016/08/14/%E5%9F%BA%E4%BA%8EHexoNexT%E7%9A%84SEO%E4%BC%98%E5%8C%96/#more">上一节</a>中提到过创建<code>sitemap</code>的方法，现在我们来使用它。</p>
<p><code>sitemap.xml</code>适用于谷歌</p>
<p><code>baidusitemap.xml</code>毋庸置疑适用于百度</p>
<p><a href="https://www.google.com/webmasters/tools" target="_blank" rel="external">谷歌站点地图提交入口</a></p>
<p><a href="http://zhanzhang.baidu.com/linksubmit" target="_blank" rel="external">百度站点地图提交入口</a></p>
<p>其实<code>sitemap</code>只是一种提交网站链接给搜索引擎的一种方式。提交链接的方式还包括：主动推送、自动推送和手动推送。</p>
<p>当然手动推送不建议大家使用，因为太费事费脑。脑子是个好东西==</p>
<p>自动推送给百度的方式最为便捷，只需将自动推送的<code>JS</code>代码部署在每个页面的源代码中就可以了，当页面被浏览时，链接就会自动推送给百度。</p>
<p>提交完成之后，百度和谷歌都会反馈给你最后抓取时间和抓取<code>URL</code>数量。</p>
<h4 id="抓取方式"><a href="#抓取方式" class="headerlink" title="抓取方式"></a>抓取方式</h4><p><a href="https://www.google.com/webmasters/tools" target="_blank" rel="external">谷歌抓取方式</a></p>
<p><a href="http://zhanzhang.baidu.com/crawltools/" target="_blank" rel="external">百度抓取方式</a></p>
<p>每种抓取方式都分为<strong>桌面版</strong>还是<strong>移动版</strong>，以为我们博客类网站都选择桌面版抓取，点击抓取即可。不添加后缀，默认则是首页。</p>
<p>抓取完成之后则会给出相应的提示信息。抓取成功与否。</p>
<p>抓取完成之后根据提示完成相应的操作就可以了:-D</p>
<h4 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h4><p>基本上，这样结束之后，就可以等着被度娘和谷哥收录就可以了==就只能这样默默的等待了。不是嘛== &lt;(－︿－)&gt;</p>
<p>最后使用<code>site:your-site</code>验证你被收录了多少条吧==</p>
<p>度娘还是比较傲娇的===</p>
<p>虽然才两天的时间，你不收录我==但是谷哥已经收录4条了:-D</p>
<p><img src="http://i4.buimg.com/567571/c0f38a106e6b923c.png" alt=""></p>
<p><img src="http://i4.buimg.com/567571/0b6f489dd427e649.png" alt=""></p>
<hr>
<p>百度应用推荐：</p>
<p><a href="http://su.baidu.com/" target="_blank" rel="external">百度云加速，免费<code>CDN</code>服务，为您的网站全面加速</a></p>
<p><a href="http://ce.baidu.com/" target="_blank" rel="external">百度云观测，网站安全，观测一下，实时监测，问题报警</a></p>
<hr>
<p>以上应用没有任何利益相关，只是感觉不错推荐给大家 -</p>
<p>百度云加速倘若不会使用；请参照<a href="http://jingyan.baidu.com/article/676629974ba6c054d51b84ab.html" target="_blank" rel="external">百度云加速百度经验</a></p>
<p>说明问题如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">问题描述</th>
<th style="text-align:left">解决方案</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">谷歌无法访问</td>
<td style="text-align:left"><a href="http://www.0678life.com/" target="_blank" rel="external">天行浏览器</a>购买<code>vpn</code>炒鸡便宜</td>
</tr>
<tr>
<td style="text-align:center">百度云加速之后无法访问</td>
<td style="text-align:left">1.请在百度云加速中提交工单，请求百度专业人士解决2.<a href="http://www.ishuo.cn/show/1001052.html" target="_blank" rel="external">轻松设置百度云加速，让网站飞起来</a></td>
</tr>
<tr>
<td style="text-align:center">百度云加速之后蜘蛛无法抓取</td>
<td style="text-align:left">因为刚更换<code>DNS</code>服务器，蜘蛛可能还没有反应过来，发射弧</td>
</tr>
<tr>
<td style="text-align:center">百度或谷歌长时间无法抓取</td>
<td style="text-align:left">请切换<code>DNS</code>服务器</td>
</tr>
<tr>
<td style="text-align:center">百度云加速之后会导致<code>Https</code>无妨访问</td>
<td style="text-align:left">因为百度云（免费版）本身不支持，╮(╯▽╰)╭想用百度云加速木有办法啊啊啊！！除非把<code>DNS</code>切换回来。==专业版是支持的哟</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://tengj.top/2016/03/14/baidunoshouluresson/" target="_blank" rel="external">百度链接提交主动推送后不收录的原因</a></td>
<td style="text-align:left">所以希望大家还是主动推送和自动推送相结合</td>
</tr>
</tbody>
</table>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="http://i1.piimg.com/567571/473944d51f13444e.png" alt=""></p>
<p><a href="http://www.steven7.top/">Steven`s Notes</a> by <a href="http://www.steven7.top/about.html">Steven</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.  </p>
<p>由<a href="http://www.steven7.top/about.html">裴士超</a>创作并维护的<a href="http://www.steven7.top">斯蒂芬</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me" target="_blank" rel="external">Steven`s Notes</a>博客（ <a href="http://www.steven7.top">http://www.steven7.top</a> ），版权所有，侵权必究。</p>
<hr>
<p>本文永久链接：<a href="http://www.steven7.top/2016/08/15/Hexo-Seo-2/">http://www.steven7.top/2016/08/15/Hexo-Seo-2/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo博客页面留白太多,代码看起来不方便]]></title>
      <url>http://www.steven7.top/2016/08/15/Hexo-page-leave-a-note/</url>
      <content type="html"><![CDATA[<p>其实关于浏览器留白这个问题，每个人都有没个人的看法，有人感觉这块多了，那块少了..很难迎合大众。</p>
<p>关于设置浏览器留白这一部分，<a href="http://theme-next.iissnan.com/faqs.html" target="_blank" rel="external">Hexo NexT主题官方文档</a>给出以下解决方案：</p>
<p><img src="http://i2.piimg.com/567571/e4a3d80261be3ae4.png" alt=""></p>
<p>但是该方法不适用于<code>Pisces</code>这不就尴尬了../(ㄒoㄒ)/~~</p>
<p>本来用适用<code>pisces</code>不就是为了美观嘛—</p>
<p>然后我就顺藤摸瓜，找到了上面所提到的<code>Issue</code></p>
<p>里面刷刷刷列出了很多解决方法：</p>
<p><img src="http://i2.piimg.com/567571/9c0b05e12200d525.png" alt=""></p>
<p>好了，重点来了，最关键的被窝发现咯：</p>
<p>对于 <code>Pisces Scheme</code>，需要同时修改 <code>header</code> 的宽度、<code>.main-inner</code> 的宽度以及 <code>.content-wrap</code> 的宽度。例如，使用百分比（<code>Pisces</code> 的布局定义在 <code>source/css/_schemes/Picses/_layout.styl</code> 中）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">header&#123; width: 90%; &#125;</div><div class="line">.container .main-inner &#123; width: 90%; &#125;</div><div class="line">.content-wrap &#123; width: calc(100% - 260px); &#125;</div></pre></td></tr></table></figure>
<p><code>iissnan</code>表示：</p>
<hr>
<p>我并未对这个布局进行测试，自定义修改需要自己进行测试。另外，我觉得超过一定宽度后（一行内文字太多导致换行跨度太大），阅读体验都不怎么样。</p>
<hr>
<p>博主，自己设置的是<code>60%</code>的百分比，自我感觉观感体验最好:-D</p>
<p>当然，什么是最好，自己感受才知道不是嘛@-@</p>
<p>各位看官就自行调整吧==</p>
<p>我去吃早饭了︿(￣︶￣)︿</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="http://i1.piimg.com/567571/473944d51f13444e.png" alt=""></p>
<p><a href="http://www.steven7.top/">Steven`s Notes</a> by <a href="http://www.steven7.top/about.html">Steven</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.  </p>
<p>由<a href="http://www.steven7.top/about.html">裴士超</a>创作并维护的<a href="http://www.steven7.top">斯蒂芬</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me" target="_blank" rel="external">Steven`s Notes</a>博客（ <a href="http://www.steven7.top">http://www.steven7.top</a> ），版权所有，侵权必究。</p>
<hr>
<p>本文永久链接：<a href="http://www.steven7.top/2016/08/15/Hexo-page-leave-a-note/">http://www.steven7.top/2016/08/15/Hexo-page-leave-a-note/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[基于HexoNexT的SEO优化]]></title>
      <url>http://www.steven7.top/2016/08/14/%E5%9F%BA%E4%BA%8EHexoNexT%E7%9A%84SEO%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本来建站没多久，刚开始接触，一开始使用的是<strong><em><a href="http://markdownpad.com/" target="_blank" rel="external">MarkdownPad 2</a></em></strong>进行博文编写的。谁料就在今天<a href="https://www.hrwhisper.me/" target="_blank" rel="external"><strong><em>hrwhisper</em></strong></a>在我的博文下面留言告诉我了<a href="http://www.typora.io/" target="_blank" rel="external"><strong><em>Typora</em></strong></a>这个美妙的东西。感觉<strong><em>Typora</em></strong>和<strong><em>markdown</em></strong>更配哟。</p>
<h3 id="正题"><a href="#正题" class="headerlink" title="正题"></a>正题</h3><p>建站初期，当然是想让搜索引擎可以尽快的收录我咯。所以我这几天疯狂的发博文，其实就是这个道理:-D。</p>
<p> 聊一聊我最近做的一些SEO优化吧！</p>
<ul>
<li>安装hexo的sitemap网站地图生成插件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-sitemap --save</div><div class="line">npm install hexo-generator-baidu-sitemap --save</div></pre></td></tr></table></figure>
<ul>
<li><p>在hexo站点根目录下的<code>_config.yml</code>中添加如下代码</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#sitemap网站地址</div><div class="line">sitemap:</div><div class="line">path: sitemap.xml</div></pre></td></tr></table></figure>
<p>此外，在<code>hexo</code>站点的<code>source</code>文件夹下创建<code>robots.txt</code>添加网络爬虫协议</p>
<p>参考如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># hexo robots.txt</div><div class="line">User-agent: *</div><div class="line">Allow: /</div><div class="line">Allow: /archives/</div><div class="line"></div><div class="line">Disallow: /vendors/</div><div class="line">Disallow: /js/</div><div class="line">Disallow: /css/</div><div class="line">Disallow: /fonts/</div><div class="line">Disallow: /vendors/</div><div class="line">Disallow: /fancybox/</div><div class="line"></div><div class="line">Sitemap: http://www.steven7.top/sitemap.xml</div><div class="line">Sitemap: http://www.steven7.top/baidusitemap.xml</div></pre></td></tr></table></figure>
<p><code>sitemap</code>网址请自行替换。</p>
</li>
<li><p>添加<code>nofollow</code>标签</p>
<p><code>nofollow</code>标签即告诉搜索引擎不要追踪此网页上的链接，减少垃圾链接分散网站权重。</p>
<p>所以我们要对非友情链接之外的出站链接添加<code>nofollow</code>标签，减少不必要的PR值输出。感兴趣的同学可以通过<a href="http://link.chinaz.com/" target="_blank" rel="external">chinaz站长工具友情链接检测进行查询</a>。</p>
<p>下面以<code>Hexo NexT</code>主题为例，进行修改指导</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">your-hexo-site\themes\next\layout\_partials\footer.swig</div><div class="line"></div><div class="line">line 12:add tag(rel="external nofollow")</div><div class="line"></div><div class="line">&#123;&#123; __('footer.powered', '<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"theme-link"</span> <span class="attr">href</span>=<span class="string">"http://hexo.io"</span> <span class="attr">rel</span>=<span class="string">"external nofollow"</span>&gt;</span>Hexo<span class="tag">&lt;/<span class="name">a</span>&gt;</span>') &#125;&#125;</div><div class="line"></div><div class="line">line 17:add tag(rel="external nofollow")</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"theme-link"</span> <span class="attr">href</span>=<span class="string">"https://github.com/iissnan/hexo-theme-next"</span> <span class="attr">rel</span>=<span class="string">"external nofollow"</span>&gt;</span></div><div class="line">--------------------------------------------------------------------------------------------</div><div class="line">your-hexo-site\themes\next\layout\_macro\sidebar.swig</div><div class="line"></div><div class="line">line 75:add tag(rel="external nofollow")</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; link &#125;&#125;"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">title</span>=<span class="string">"&#123;&#123; name &#125;&#125;"</span> <span class="attr">rel</span>=<span class="string">"external nofollow"</span>&gt;</span></div><div class="line"></div><div class="line">line 89:add tag(rel="external nofollow")</div><div class="line"></div><div class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://creativecommons.org/&#123;% if theme.creative_commons === 'zero' %&#125;publicdomain/zero/1.0&#123;% else %&#125;licenses/&#123;&#123; theme.creative_commons &#125;&#125;/4.0&#123;% endif %&#125;/"</span> <span class="attr">class</span>=<span class="string">"cc-opacity"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">rel</span>=<span class="string">"external nofollow"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>title</code>优化</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">your-hexo-site\themes\next\layout\index.swig</div><div class="line"></div><div class="line">line 5:add tag(&#123;&#123; theme.keywords &#125;&#125; &#123;&#123; config.title &#125;&#125;)</div><div class="line"></div><div class="line">&#123;% block title %&#125; &#123;&#123; theme.keywords &#125;&#125; &#123;&#123; config.title &#125;&#125; - &#123;&#123; theme.description &#125;&#125; &#123;% endblock %&#125;</div></pre></td></tr></table></figure>
<p>提示：</p>
<p><u>整个标题不要超过80字符，不要堆砌关键字</u></p>
</li>
<li><p>提交网站</p>
<p><a href="http://www.soshoulu.com/sousuotijiao/baidu/tijiao/" target="_blank" rel="external">百度入口</a></p>
<p><a href="http://info.so.360.cn/site_submit.html" target="_blank" rel="external">360入口</a></p>
<p>网站提交成功之后，可以通过各站长平台进行站点管理。</p>
</li>
<li><p><code>NexT</code>主题内置的<code>SEO</code>优化工具</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">your-hexo-site\themes\next\_config.yml</div><div class="line"></div><div class="line">line 22:</div><div class="line">cannoical: true</div><div class="line"></div><div class="line">line 333:</div><div class="line">baidu_push: ture</div></pre></td></tr></table></figure>
<p><code>cannoical</code>标签适用于解决由于网址形式不同内容相同而造成的内容重复问题。</p>
<p><code>baidu_push</code>标签将<code>url</code>自动推送到百度</p>
</li>
<li><p>小技巧</p>
<p><a href="http://kuangqi.me/tricks/append-a-copyright-info-after-every-post/" target="_blank" rel="external">为Hexo博客的每一篇文章自动追加版权信息</a></p>
<p>简要概括如下：</p>
<p><code>your-hexo-site\scripts</code>中创建<code>AddDeclare.js</code>脚本文件（文件名随意）</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">AddDeclare.js：</div><div class="line">var fs = require('fs');</div><div class="line">hexo.extend.filter.register('before_post_render', function(data)&#123;</div><div class="line">    if(data.copyright == false) return data;</div><div class="line">    var file_content = fs.readFileSync('tail.md');</div><div class="line">    if(file_content &amp;&amp; data.content.length &gt; 50) </div><div class="line">    &#123;</div><div class="line">        data.content += file_content;</div><div class="line">        var permalink = '\n本文永久链接：' + data.permalink;</div><div class="line">        data.content += permalink;</div><div class="line">    &#125;</div><div class="line">    return data;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><code>tail.md</code>为脚本信息文件，请诸君自己编写，将<code>tail.md</code>置于<code>Hexo</code>根目录下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">tail.md:</div><div class="line"></div><div class="line">版权声明</div><div class="line"></div><div class="line">Steven`s Notes by Steven is licensed under a Creative Commons BY-NC-ND 4.0 International License.  </div><div class="line"></div><div class="line">由裴士超创作并维护的斯蒂芬博客采用创作共用保留署名-非商业-禁止演绎4.0国际许可证。</div><div class="line"></div><div class="line">本文首发于Steven`s Notes博客（ http://www.steven7.top ），版权所有，侵权必究。</div></pre></td></tr></table></figure>
</li>
</ul>
<p>最后聊一聊使用<code>Typora</code>的小感受吧：</p>
<p>感觉的确是要比<code>MarkdownPad</code>方便很多，但是还是有一些不足吧！</p>
<ol>
<li><p>每次编辑完代码之后，总是很难切换到下一行==这一点是让我最头痛的/(ㄒoㄒ)/~~最能先切换到源码模式再切换回来。</p>
</li>
<li><p>每次使用完<code>list</code>工具之后，鼠标无法退出<code>list</code>模式，同样要进入源码模式切换/(ㄒoㄒ)/~~</p>
</li>
<li><p>的确是炒鸡方便有木有，比<code>Markdownpad</code>的实时预览好很多==推荐大家使用:-D</p>
<p>​</p>
</li>
</ol>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="http://i1.piimg.com/567571/473944d51f13444e.png" alt=""></p>
<p><a href="http://www.steven7.top/">Steven`s Notes</a> by <a href="http://www.steven7.top/about.html">Steven</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.  </p>
<p>由<a href="http://www.steven7.top/about.html">裴士超</a>创作并维护的<a href="http://www.steven7.top">斯蒂芬</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me" target="_blank" rel="external">Steven`s Notes</a>博客（ <a href="http://www.steven7.top">http://www.steven7.top</a> ），版权所有，侵权必究。</p>
<hr>
<p>本文永久链接：<a href="http://www.steven7.top/2016/08/14/基于HexoNexT的SEO优化/">http://www.steven7.top/2016/08/14/基于HexoNexT的SEO优化/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo的奇淫技巧第二发：自动备份Hexo博客源文件]]></title>
      <url>http://www.steven7.top/2016/08/13/Hexo%E7%9A%84%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7%E7%AC%AC%E4%BA%8C%E5%8F%91/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近开始写博文的原因其实就是因为无聊..<br>写着写着感觉用Hexo写博文是一种享受~(≧▽≦)/~啦啦啦。写多了就想万一换了电脑或者电脑硬盘出问题了该咋整/(ㄒoㄒ)/~~<br>那将会是哭尽长江水都无法挽回啊！！！所以想着要有个备份方案吧。</p>
<ul>
<li><p>方案一：硬盘上复制一份咯。你是不是傻、硬盘坏了不也就木有了==</p>
</li>
<li><p>方案二：U盘咯。懒 pass</p>
</li>
<li><p>方案三：网盘吧。需要上传吧。懒 懒 懒 pass</p>
</li>
<li><p>方案四：github是个好东西，希望每个人都会用:-D</p>
</li>
</ul>
<h2 id="文件托管到github"><a href="#文件托管到github" class="headerlink" title="文件托管到github"></a>文件托管到github</h2><ul>
<li><p>新建repository，命名与本地项目文件夹相同（例如：我的为Hexo）</p>
</li>
<li><p>进入本地<code>Hexo</code>文件夹，执行以下命令创建仓库</p>
<p>  <code>git init</code></p>
</li>
<li><p>设置远程仓库地址</p>
<p>  <code>git remote add origin https://github.com/peishichao/Hexo.git</code></p>
</li>
</ul>
<p>如果报错：<code>fatal: remote origin already exists.</code></p>
<p>解决办法如下：<code>git remote rm origin</code></p>
<ul>
<li><p>Hexo源码提交</p>
<pre><code>git add .

git commit -m &quot;添加hexo源码文件作为备份&quot;

git push origin master
</code></pre></li>
</ul>
<p>如果报错：<code>Permission denied (publickey).</code></p>
<p>解决方法如下：</p>
<pre><code>ssh-agent

ssh-add ~/.ssh/id_key
</code></pre><p>如果报错    <code>error:failed to push som refs to .......</code></p>
<p>解决方式如下：</p>
<pre><code>git pull origin master
git push origin master
</code></pre><ul>
<li>完成</li>
</ul>
<p>经过上面的操作之后，本地的Hexo源码就已经上传到github服务器上进行备份了，就再也不用担心代码丢失找不到了(<em>^__^</em>) 嘻嘻……</p>
<p>当远程仓库有更新的时候，执行下面代码就可将hexo源码放到本地了。</p>
<pre><code>git pull origin master
</code></pre><h3 id="实现自动化操作"><a href="#实现自动化操作" class="headerlink" title="实现自动化操作"></a>实现自动化操作</h3><p>我说过我很懒..上面的操作远远不能达到我的心里预期，所以我还要实现自动化操作才可以咯。</p>
<p><a href="http://www.steven7.top/2016/08/13/Hexo%E7%9A%84%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7%E7%AC%AC%E4%B8%80%E5%8F%91/#more">Hexo的奇淫技巧第一发</a>中我们已经提到了怎么在<code>Hexo</code>添加文章时自动打开编辑器了。原理是利用<code>nodeJs</code>的事件监听机制来实现监听Hexo的new事件来启动编辑器，完成自动启动编辑器的操作。</p>
<p>那么可不可以通过通过监听Hexo的其它事件来完成自动执行Git命令完成自动备份呢？通过查阅Hexo文档，找到了Hexo的主要事件，见下表：</p>
<table>
<thead>
<tr>
<th style="text-align:left">事件名</th>
<th style="text-align:right">事件发生时间</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">deployBefore</td>
<td style="text-align:right">在部署完成前发布</td>
</tr>
<tr>
<td style="text-align:left">deployAfter</td>
<td style="text-align:right">在部署成功后发布</td>
</tr>
<tr>
<td style="text-align:left">exit</td>
<td style="text-align:right">在 Hexo 结束前发布</td>
</tr>
<tr>
<td style="text-align:left">generateBefore</td>
<td style="text-align:right">在静态文件生成前发布</td>
</tr>
<tr>
<td style="text-align:left">generateAfter</td>
<td style="text-align:right">在静态文件生成后发布</td>
</tr>
<tr>
<td style="text-align:left">new</td>
<td style="text-align:right">在文章文件建立后发布</td>
</tr>
</tbody>
</table>
<p>所以我们就可以通过监听Hexo的deployAfter事件，待上传完成之后自动运行Git备份命令打到自动备份的目的。</p>
<p>要实现这个自动备份功能，需要依赖<code>NodeJs</code>的一个<code>shelljs</code>模块,该模块重新包装了<code>child_process</code>,调用系统命令更加的方便。该模块需要安装后使用。</p>
<pre><code>npm install --save shelljs
</code></pre><p>操作步骤：</p>
<ol>
<li>编写脚本，在<code>Hexo</code>根目录下的<code>scripts</code>（如果没有请新建）创建autoGItSave.js文件,文件名随意。</li>
<li>脚本内容如下：</li>
</ol>
<pre><code>        var exe = require(&apos;child_process&apos;);
function run() {
        console.log(&quot;开始上传源代码&quot;);
       if(exe.execFile(&apos;D:/Hexo/GitUpdate.bat&apos;).code !== 0){
        console.log(&quot;恭喜你更新Github成功&quot;);
       }
       if(exe.execFile(&apos;D:/Hexo/GitUpdate.bat&apos;).code == 0){
        console.log(&quot;更新Github失败&quot;);
       }
        }
     hexo.on(&apos;deployAfter&apos;, function() {
        run();
});
</code></pre><p>其中<code>D:/Hexo/GitUpdate.bat</code>内容如下：</p>
<pre><code>git add --all
git commit -am &quot;Form auto backup script\&apos;s commit&quot;
git push origin master
</code></pre><p>请确保<code>GitUpdate.bat</code>文件位于Hexo的根目录下。</p>
<p>保存脚本并退出，然后执行<code>hexo deploy</code>命令，可以得到如下的类似结果：</p>
<pre><code>[master 4ae3ace] Site updated: 2016-08-14 00:05:25
 4 files changed, 44 insertions(+), 76 deletions(-)
Branch master set up to track remote branch master from https://github.com/peishichao/peishichao.github.io.git.
To https://github.com/peishichao/peishichao.github.io.git
   d781e56..4ae3ace  HEAD -&gt; master
INFO  Deploy done: git
开始上传源代码
恭喜你更新Github成功
</code></pre><p>这样子，每次更新博文并<code>deploy</code>到服务器上之后，备份就自动启动并完成备份啦~是不是很方便呢？麻麻再也不用担心我们的博文找不到啦:-D</p>
<p>Enjoy it！</p>
<p>have a nice day!!</p>
<p>蟹蟹O(∩_∩)O</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="http://i1.piimg.com/567571/473944d51f13444e.png" alt=""></p>
<p><a href="http://www.steven7.top/">Steven`s Notes</a> by <a href="http://www.steven7.top/about.html">Steven</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.  </p>
<p>由<a href="http://www.steven7.top/about.html">裴士超</a>创作并维护的<a href="http://www.steven7.top">斯蒂芬</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me" target="_blank" rel="external">Steven`s Notes</a>博客（ <a href="http://www.steven7.top">http://www.steven7.top</a> ），版权所有，侵权必究。</p>
<hr>
<p>本文永久链接：<a href="http://www.steven7.top/2016/08/13/Hexo的奇淫技巧第二发/">http://www.steven7.top/2016/08/13/Hexo的奇淫技巧第二发/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo的奇淫技巧第一发：添加文章时自动打开编辑器]]></title>
      <url>http://www.steven7.top/2016/08/13/Hexo%E7%9A%84%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7%E7%AC%AC%E4%B8%80%E5%8F%91/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>扯一扯，本来今天心想写一下感悟啥的，谁知道小件小事耽误了整个上午的青春、、简直要哭瞎有木有、、<br><img src="http://i1.piimg.com/567571/abe13cbe996fb11a.png" width="200" heght="200" class="img-center"><br>下面就来说一说心痛的事情，让各位看官笑一笑:-D</p>
<h2 id="就想偷偷懒自动打开而已"><a href="#就想偷偷懒自动打开而已" class="headerlink" title="就想偷偷懒自动打开而已"></a>就想偷偷懒自动打开而已</h2><p>刚刚拥有属于自己的小站，当然炒鸡炒鸡鸡冻。所以想着多写点文章啥的。写的多了，想着可不可以在Hexo new 文章的时候使用markdownPad自动打开刚添加的文章那。。这样粑粑就可以少做几件事情了，就可以那剩下来的时间玩耍了（LOL啊。炉石啊。啊  我的大海啊）。本来想法很好，也很切合实际咯。我就开始动手了、、谁知道弄了半天都没弄好，最后，打开网易云静了静突发灵感才搞定。。大海啊全是我的泪水。<br><img src="http://i2.piimg.com/567571/5c90f6253a6beb6b.png" class="img-center"><br>下面给各位看官解决方案L</p>
<p>解决方案（使用<code>hexo new article</code> 自动打开刚添加的博文）</p>
<ul>
<li>在Hexo目录下新建script目录</li>
<li>在script新建js脚本文件</li>
<li>脚本内容如下：<br>  <code>var exe = require(&#39;child_process&#39;);</code><br>  <code>hexo.on(&#39;new&#39;, function(data){</code><br>  <code>console.log(data);</code><br>  <code>exe.execFile(&#39;C:/Program Files (x86)/MarkdownPad 2/MarkdownPad2.exe&#39;,[data.path]);</code><br>  <code>});</code></li>
</ul>
<p>保存退出之后使用<code>hexo new article</code>命令后就可以用指定的app打开文章了，炒鸡方便。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=16858400&auto=1&height=66"></iframe>


<p>最后给大家分享一首自己很喜欢的歌、虽然是单身狗但是炒鸡想学会了唱给自己的女朋友听…</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="http://i1.piimg.com/567571/473944d51f13444e.png" alt=""></p>
<p><a href="http://www.steven7.top/">Steven`s Notes</a> by <a href="http://www.steven7.top/about.html">Steven</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.  </p>
<p>由<a href="http://www.steven7.top/about.html">裴士超</a>创作并维护的<a href="http://www.steven7.top">斯蒂芬</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me" target="_blank" rel="external">Steven`s Notes</a>博客（ <a href="http://www.steven7.top">http://www.steven7.top</a> ），版权所有，侵权必究。</p>
<hr>
<p>本文永久链接：<a href="http://www.steven7.top/2016/08/13/Hexo的奇淫技巧第一发/">http://www.steven7.top/2016/08/13/Hexo的奇淫技巧第一发/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[win10下MarkdownPad相关问题解决]]></title>
      <url>http://www.steven7.top/2016/08/12/win10%E4%B8%8BMarkdownPad%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      <content type="html"><![CDATA[<h3 id="markdownpad相关问题"><a href="#markdownpad相关问题" class="headerlink" title="markdownpad相关问题"></a>markdownpad相关问题</h3><h4 id="win10下MarkdownPad预览无法显示的解决"><a href="#win10下MarkdownPad预览无法显示的解决" class="headerlink" title="win10下MarkdownPad预览无法显示的解决"></a>win10下MarkdownPad预览无法显示的解决</h4><p><img src="http://easun.org/blog/upload/md_pd.png" alt=""><br>实时预览模式竟然不能用..wtf<br>难道逼我换软件！！！！<br>其实根据官网文档给出的提示</p>
<blockquote>
<p>LivePreview is not working - it displays an error message stating This view has crashed!</p>
<p>This issue has been specifically observed in Windows 8. You may see an error message as shown here, and no HTML will be rendered when you type in the Markdown Editor pane.</p>
<p>To fix this issue, please try installing the Awesomium 1.6.6 SDK.</p>
<p>If you continue to experience issues, please install Microsoft’s DirectX End-User Runtimes (June 2010).</p>
</blockquote>
<p>我们只需要下载安装<a href="http://markdownpad.com/download/awesomium_v1.6.6_sdk_win.exe" target="_blank" rel="external">Awesomium 1.6.6 SDK</a>.就可以了。</p>
<p>下载安装，再次打开，一切正常:-D<img src="http://easun.org/blog/upload/md_pd_ok.png" alt=""></p>
<h4 id="MarkdownPad上传图片不方便？"><a href="#MarkdownPad上传图片不方便？" class="headerlink" title="MarkdownPad上传图片不方便？"></a>MarkdownPad上传图片不方便？</h4><p>Are you kidding me？上传图片不方便？</p>
<p>那是因为你没有接收到这个神奇的网站的呐喊！！！！</p>
<blockquote>
<p><a href="http://yotuku.cn/" target="_blank" rel="external">http://yotuku.cn/</a></p>
</blockquote>
<p>打开这个网站你会感觉整个世界都变成彩色的了。再也没有什么东西可以阻止markdown统治这个世界了…ahahh 请原谅我的笑:-D</p>
<p>最后来分享一波。MarkdownPad的注册码。<img src="http://i2.piimg.com/567571/9bd6991f658a344b.png" alt=""></p>
<p>邮箱：</p>
<blockquote>
<p>Soar360@live.com</p>
</blockquote>
<p>授权秘钥：</p>
<blockquote>
<p>GBPduHjWfJU1mZqcPM3BikjYKF6xKhlKIys3i1MU2eJHqWGImDHzWdD6xh<br>MNLGVpbP2M5SN6bnxn2kSE8qHqNY5QaaRxmO3YSMHxlv2EYpjdwLcPwfeT<br>G7kUdnhKE0vVy4RidP6Y2wZ0q74f47fzsZo45JE2hfQBFi2O9Jldjp1mW8<br>HUpTtLA2a5/sQytXJUQl/<br>QKO0jUQY4pa5CCx20sV1ClOTZtAGngSOJtIOFXK599sBr5aIEFyH0K7H4B<br>oNMiiDMnxt1rD8Vb/ikJdhGMMQr0R4B+L3nWU97eaVPTRKfWGDE8/<br>eAgKzpGwrQQoDh+nzX1xoVQ8NAuH+s4UcSeQ==</p>
</blockquote>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="http://i1.piimg.com/567571/473944d51f13444e.png" alt=""></p>
<p><a href="http://www.steven7.top/">Steven`s Notes</a> by <a href="http://www.steven7.top/about.html">Steven</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.  </p>
<p>由<a href="http://www.steven7.top/about.html">裴士超</a>创作并维护的<a href="http://www.steven7.top">斯蒂芬</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me" target="_blank" rel="external">Steven`s Notes</a>博客（ <a href="http://www.steven7.top">http://www.steven7.top</a> ），版权所有，侵权必究。</p>
<hr>
<p>本文永久链接：<a href="http://www.steven7.top/2016/08/12/win10下MarkdownPad相关问题解决/">http://www.steven7.top/2016/08/12/win10下MarkdownPad相关问题解决/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[谈谈Hexo搭建的个人博客]]></title>
      <url>http://www.steven7.top/2016/08/12/%E8%B0%88%E8%B0%88Hexo%E6%90%AD%E5%BB%BA%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>大学毕业之后回家断断续续将近2个月的时间了==本打算在家里把驾照考完，可是谁料到人实在是太多了！！导致现在还木有考科目四。马上就要开学了/(ㄒoㄒ)/~~。就在前天随意逛着逛着翻到了<a href="http://notes.iissnan.com/" target="_blank" rel="external">iissnan</a>的博客。感觉自己一直就想要这样一个简洁的博客。所以看了他的博客之后，当机立断就去买域名去了。</p>
<h2 id="挑选域名"><a href="#挑选域名" class="headerlink" title="挑选域名"></a>挑选域名</h2><p>当然购买域名有很多的途径。我以前也木有听说过百度开放云。不知道我怎么就点进百度开放云里面去买域名去了。现在怎么想也回想不起来为啥（简直Ridiculous）。<img src="http://i4.piimg.com/567571/370154642b07446e.png" alt=""><br>大致域名注册都跟这个页面长得差不多。我选择百度的原因还有可能就是他长得好看呗。然后输入自己想注册的网址然后付款就可以了。百度最近在做活动。我注册了.top的顶级域名才花了4块大洋。这一点一定是这一点我选择了它（便宜是王道）。然后这个域名就是属于你的了。然后就会有属于你的控制台来管理该域名。<img src="http://i2.piimg.com/567571/2ff1a4b90e570b2e.png" alt=""><br>进入域名服务可以对域名进行管理，对域名进行解析、续费等操作。<br><img src="http://i2.piimg.com/567571/7ab560ad26f26a3a.png" alt=""><br>的确现在有了属于自己的域名，然而我们还需要有自己的博客不是吗、意识到这个问题我们才要开始我们的正事:-D</p>
<h2 id="使用hexo搭建我们的博客"><a href="#使用hexo搭建我们的博客" class="headerlink" title="使用hexo搭建我们的博客"></a>使用<a href="https://hexo.io/zh-cn/" target="_blank" rel="external">hexo</a>搭建我们的博客</h2><p>hexo是一种快速、简洁且高效的博客框架。使用node.js技术可以让上百个页面在几秒内瞬间完成渲染。等等。。（都是抄的，原谅我手懒==）</p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>温馨提示：下面的操作仅针对windows用户，其他用户请参照官网。<br>安装<a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a>、<a href="https://git-scm.com/" target="_blank" rel="external">GIt</a>.</p>
<p>安装上述程序之后，执行以下代码完成hexo安装。</p>
<pre><code>npm install -g hexo-cli
</code></pre><p>安装Hexo完成之后，在指定的文件夹内初始化Hexo。</p>
<pre><code>cd folder
hexo init
npm install
</code></pre><p>其实到此为止，你已经初步拥有了一个自己简洁（说实话是简陋）的博客了。想了解关于框架详细内容的请转至hexo官网了解详情。作为我们高端审美来说，这么丑的博客当然是不可以了…hexo提供多种主题可供选择。我选择的是NexT。接下来我就以NexT来说。</p>
<h3 id="安装NexT"><a href="#安装NexT" class="headerlink" title="安装NexT"></a>安装<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">NexT</a></h3><p>官网提供了两种方式下载NexT。一种是git clone，另一种是下载压缩包。本文选择git clone的方式。</p>
<pre><code>cd your-hexo-site
git clone https://github.com/iissnan/hexo-theme-next themes/next
</code></pre><h4 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h4><p>打开Hexo位于站点根目录下的_config.yml文件，找到theme字段，并将其值更改为next。</p>
<pre><code>theme：next
</code></pre><p>这样，HexT主题安装成功。验证主题是否正确之前，最好使用hexo clean来清除hexo的缓存。</p>
<h4 id="验证主题"><a href="#验证主题" class="headerlink" title="验证主题"></a>验证主题</h4><p>生成静态文件，启动服务器并开启调试模式进行监控</p>
<pre><code>hexo generate
hexo s --debug
</code></pre><p>在服务启动的过程中，注意观察命令行是否有异常信息。当命令行输出中提示</p>
<blockquote>
<p>INFO  Hexo is running at <a href="http://0.0.0.0:4000/" target="_blank" rel="external">http://0.0.0.0:4000/</a>. Press Ctrl+C to stop.</p>
</blockquote>
<p>此时即可使用浏览器访问<a href="http://localhost:4000，检查站点是否正常运行。" target="_blank" rel="external">http://localhost:4000，检查站点是否正常运行。</a></p>
<p> 当你看到站点的外观与下面所示类似时说明你已经成功按照NexT主题。</p>
<p><img src="http://theme-next.iissnan.com/uploads/five-minutes-setup/validation-default-scheme-mac.png" alt=""></p>
<p>主题设定等请参照官网文档进行个性化设置。</p>
<h3 id="部署配置"><a href="#部署配置" class="headerlink" title="部署配置"></a>部署配置</h3><p>我们已经完成了Hexo个性化配置中的基本信息和主题配置，还剩一项部署 - deploy。</p>
<pre><code>hexo deploy
</code></pre><p>通过上述命令可以将你的hexo博客提交到github上，从而刷新你的github page。</p>
<p>换句话说，如果执行了new、clean、generate,只是在你的电脑上生成了最新的博客，如果不执行deploy，新添加的内容是不会被推送到GitHub Pages上的。</p>
<p>既然我们已经决定将Hexo部署到GitHub，那么我们还是先看看需要在GitHub上做哪些前置准备。</p>
<h3 id="连接到GitHub"><a href="#连接到GitHub" class="headerlink" title="连接到GitHub"></a>连接到GitHub</h3><p>如果还没有GItHub账号，在<a href="https://github.com/join" target="_blank" rel="external">这里</a>申请一个</p>
<p>如果拥有了账号，还没有GItHub Pages地址，在页面右上角你的头像旁边点击 + 号按钮，选择repository。在Repository name中填写</p>
<blockquote>
<p>[你的用户名].github.io</p>
</blockquote>
<p><strong>注意，你的用户名必须与你实际的用户名一字不差。</strong></p>
<p>然后选Public。</p>
<p>去掉 Initialize this repository with a README 前的钩。</p>
<p>然后点击 Create repository。</p>
<p>成功后，就可以通过 <a href="http://[你的用户名].github.io" target="_blank" rel="external">http://[你的用户名].github.io</a> 访问你的页面了。</p>
<p>也许它现在还空无一物，接下来我们就把Hexo的内容放进去。</p>
<h3 id="配置Deploy"><a href="#配置Deploy" class="headerlink" title="配置Deploy"></a>配置Deploy</h3><p>当你拥有了个人的GitHub Pages后，再回到Hexo的_config.yml文件，找到Deployment章节。</p>
<p>将type改为git，repository改为你的GitHub Pages地址。</p>
<p>然后执行下述代码就可以发布自己的博客了。</p>
<pre><code>hexo deploy
</code></pre><p>比如我的博客，地址应该是：</p>
<blockquote>
<p><a href="http://peishichao.github.io" target="_blank" rel="external">http://peishichao.github.io</a></p>
</blockquote>
<p>恭喜！！你已经使用Hexo完成了个人博客的搭建并将它发布在GitHub Pages可供公开访问啦！</p>
<h3 id="日常维护"><a href="#日常维护" class="headerlink" title="日常维护"></a>日常维护</h3><p>当部署成功后，我们日常只需要：</p>
<p>新建文章(new)</p>
<p>找到生成的.md然后编辑并保存</p>
<p>生成博客(generate)</p>
<p>部署(deploy)</p>
<p>就可以完成新文章的发布。</p>
<h3 id="将GitHub关联到域名上"><a href="#将GitHub关联到域名上" class="headerlink" title="将GitHub关联到域名上"></a>将GitHub关联到域名上</h3><p>上面我们已经申请过域名了，我们接下来要做的就是讲自己申请过的域名与github page关联。<br>登录访问github</p>
<blockquote>
<p>进入github中github page相应的项目中，在该项目中创建CNAME，其CNAME内容即是域名。</p>
</blockquote>
<p>查询github page的服务器IP地址</p>
<blockquote>
<p>可以使用国内的域名ip地址查询的<a href="http://ip.chinaz.com/" target="_blank" rel="external">工具</a>,将你自己的github page的域名输进去得到ip地址。</p>
</blockquote>
<p><img src="http://i1.piimg.com/567571/49c21bc128e4ff90.png" alt=""><br>然后进入你购买的域名的域名服务中进行域名解析，点击域名解析，依次填写相应内容。</p>
<blockquote>
<p>记录类型-A</p>
<p>主机记录-www</p>
<p>解析线路 默认</p>
<p>记录值填写github page的ip地址</p>
</blockquote>
<p>最后点击保存。<br>验证域名和github page关联是否成功。<br><img src="http://i1.piimg.com/567571/ad889e53a23882ee.png" alt=""><br><img src="http://i1.piimg.com/567571/7714d0350e403d6e.png" alt=""></p>
<p>夜深了，洗洗睡，回头再念叨。</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="http://i1.piimg.com/567571/473944d51f13444e.png" alt=""></p>
<p><a href="http://www.steven7.top/">Steven`s Notes</a> by <a href="http://www.steven7.top/about.html">Steven</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.  </p>
<p>由<a href="http://www.steven7.top/about.html">裴士超</a>创作并维护的<a href="http://www.steven7.top">斯蒂芬</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me" target="_blank" rel="external">Steven`s Notes</a>博客（ <a href="http://www.steven7.top">http://www.steven7.top</a> ），版权所有，侵权必究。</p>
<hr>
<p>本文永久链接：<a href="http://www.steven7.top/2016/08/12/谈谈Hexo搭建的个人博客/">http://www.steven7.top/2016/08/12/谈谈Hexo搭建的个人博客/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://www.steven7.top/2016/08/11/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="http://i1.piimg.com/567571/473944d51f13444e.png" alt=""></p>
<p><a href="http://www.steven7.top/">Steven`s Notes</a> by <a href="http://www.steven7.top/about.html">Steven</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.  </p>
<p>由<a href="http://www.steven7.top/about.html">裴士超</a>创作并维护的<a href="http://www.steven7.top">斯蒂芬</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。</p>
<p>本文首发于<a href="http://kuangqi.me" target="_blank" rel="external">Steven`s Notes</a>博客（ <a href="http://www.steven7.top">http://www.steven7.top</a> ），版权所有，侵权必究。</p>
<hr>
<p>本文永久链接：<a href="http://www.steven7.top/2016/08/11/hello-world/">http://www.steven7.top/2016/08/11/hello-world/</a></p>
]]></content>
    </entry>
    
  
  
</search>
